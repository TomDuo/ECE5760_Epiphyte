
C:/ECE5760_Epiphyte/lab2_DDA/DE2-115_Basic_Computer/app_software/JTAG_UART_C/JTAG_UART.elf:     file format elf32-littlenios2
C:/ECE5760_Epiphyte/lab2_DDA/DE2-115_Basic_Computer/app_software/JTAG_UART_C/JTAG_UART.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000877c memsz 0x0000877c flags r-x
    LOAD off    0x0000979c vaddr 0x0000879c paddr 0x0000a294 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x0000bd8c vaddr 0x0000bd8c paddr 0x0000bd8c align 2**12
         filesz 0x00000000 memsz 0x00000250 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008300  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000334  00008468  00008468  00009468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af8  0000879c  0000a294  0000979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000250  0000bd8c  0000bd8c  0000bd8c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000b294  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a18  00000000  00000000  0000b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000f2a  00000000  00000000  0000bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000130d7  00000000  00000000  0000cbfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000060af  00000000  00000000  0001fcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e066  00000000  00000000  00025d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000010f4  00000000  00000000  00033de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002253  00000000  00000000  00034edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008e65  00000000  00000000  0003712f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003ff94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000690  00000000  00000000  0003ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00042c69  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00042c6c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00042c6f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00042c70  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00042c71  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00042c75  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00042c79  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00042c7d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00042c86  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00042c8f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00042c98  2**0
                  CONTENTS, READONLY
 28 .jdi          00004aa8  00000000  00000000  00042ca3  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00047e89  00000000  00000000  0004774b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
00008468 l    d  .rodata	00000000 .rodata
0000879c l    d  .rwdata	00000000 .rwdata
0000bd8c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 JTAG_UART.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 atof.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strstr.c
00001254 l     F .text	00000134 critical_factorization
00000000 l    df *ABS*	00000000 strtod.c
000019e8 l     F .text	00000048 match
00008bb8 l     O .rwdata	00000014 fpi.1950
000084cc l     O .rodata	00000028 tinytens
00008ba4 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000357c l     F .text	00000024 htinit
00003608 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00003eb4 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 impure.c
00008bcc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0000862c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00005818 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00006944 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000a26c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008fcc l     O .rwdata	00001060 JTAG_UART
0000a02c l     O .rwdata	0000002c DDA_Options
0000a058 l     O .rwdata	0000002c Green_LEDs
0000a084 l     O .rwdata	0000002c HEX3_HEX0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000073cc l     F .text	00000054 altera_avalon_jtag_uart_timeout
000074a0 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00007aa4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00007c40 l     F .text	00000078 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000829c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000474c g     F .text	00000094 _mprec_log10
00004838 g     F .text	00000088 __any_on
00008604 g     O .rodata	00000028 __mprec_tinytens
000071b4 g     F .text	00000050 alt_main
0000bedc g     O .bss	00000100 alt_irq
0000a294 g       *ABS*	00000000 __flash_rwdata_start
0000bfdc g       *ABS*	00000000 __alt_heap_start
00007208 g     F .text	00000004 __malloc_unlock
00001a30 g     F .text	000015cc _strtod_r
000048c0 g     F .text	000000bc _Balloc
000005e0 g     F .text	00000094 __fixsfsi
000063c0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000bd98 g     O .bss	00000004 errno
000007b0 g     F .text	0000002c __make_fp
0000bda0 g     O .bss	00000004 alt_argv
00012258 g       *ABS*	00000000 _gp
0000a0d8 g     O .rwdata	00000180 alt_fd_list
00008024 g     F .text	00000070 alt_find_dev
000042a0 g     F .text	000000a0 memcpy
00003f00 g     F .text	00000248 __hexnan
000065e0 g     F .text	000000f8 __floatsidf
00007cb8 g     F .text	00000098 alt_io_redirect
000064d0 g     F .text	00000088 __ltdf2
0000469c g     F .text	000000b0 __ratio
00007648 g     F .text	00000168 altera_avalon_jtag_uart_read
00000a90 g     F .text	00000014 malloc
00006a80 g     F .text	00000008 __udivsi3
00008514 g     O .rodata	000000c8 __mprec_tens
0000560c g     F .text	000000a4 __fixunsdfsi
0000bd8c g     O .bss	00000004 __malloc_top_pad
00005024 g     F .text	0000003c __i2b
000011e4 g     F .text	00000070 _sbrk_r
0000a280 g     O .rwdata	00000004 alt_max_fd
000007dc g     F .text	00000138 __unpack_d
0000bd90 g     O .bss	00000004 __malloc_max_sbrked_mem
00005ca8 g     F .text	00000074 __adddf3
000056b0 g     F .text	00000078 __nesf2
0000457c g     F .text	00000120 __b2d
0000a268 g     O .rwdata	00000004 _global_impure_ptr
0000bfdc g       *ABS*	00000000 __bss_end
00007bd8 g     F .text	00000068 alt_iic_isr_register
00007f70 g     F .text	000000ac alt_tick
0000bddc g     O .bss	00000100 __hexdig
000085dc g     O .rodata	00000028 __mprec_bigtens
000052ac g     F .text	00000120 __s2b
000067b0 g     F .text	00000194 __floatunsidf
0000449c g     F .text	00000060 __mcmp
00007b20 g     F .text	00000018 alt_ic_irq_enabled
00007f3c g     F .text	00000034 alt_alarm_stop
0000bda8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
0000a0b0 g     O .rwdata	00000028 alt_dev_null
000006e8 g     F .text	000000c8 __unpack_f
00007aa0 g     F .text	00000004 alt_dcache_flush_all
00004368 g     F .text	00000070 __hi0bits
000066d8 g     F .text	000000d8 __fixdfsi
00003120 g     F .text	0000001c strtod
0000a294 g       *ABS*	00000000 __ram_rwdata_end
0000a278 g     O .rwdata	00000008 alt_dev_list
00000a74 g     F .text	00000008 atof
00005728 g     F .text	00000078 __gtsf2
0000879c g       *ABS*	00000000 __ram_rodata_end
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00006558 g     F .text	00000088 __ledf2
0000518c g     F .text	00000120 __pow5mult
00006a88 g     F .text	00000008 __umodsi3
0000bfdc g       *ABS*	00000000 end
00000914 g     F .text	00000160 __pack_f
00007420 g     F .text	00000080 altera_avalon_jtag_uart_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
00006bec g     F .text	00000080 __clzsi2
000077b0 g     F .text	0000017c altera_avalon_jtag_uart_write
00004148 g     F .text	000000e4 memchr
00003268 g     F .text	00000314 _free_r
000082a0 g     F .text	000001b0 __call_exitprocs
0000a260 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
0000bdac g     O .bss	00000004 _alt_tick_rate
00001388 g     F .text	00000660 strstr
00004c84 g     F .text	0000014c __lshift
0000bdb0 g     O .bss	00000004 _alt_nticks
0000727c g     F .text	00000080 alt_sys_init
00004dd0 g     F .text	00000254 __multiply
00007394 g     F .text	00000038 altera_avalon_jtag_uart_close
00006a90 g     F .text	00000038 __mulsi3
0000879c g       *ABS*	00000000 __ram_rwdata_start
00008468 g       *ABS*	00000000 __ram_rodata_start
0000bdb4 g     O .bss	00000028 __malloc_current_mallinfo
0000497c g     F .text	0000017c __d2b
0000736c g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00008150 g     F .text	000000a0 alt_get_fd
00007028 g     F .text	000000c8 __fpcmp_parts_d
0000422c g     F .text	00000074 memcmp
0000731c g     F .text	00000028 altera_avalon_jtag_uart_close_fd
0000bfdc g       *ABS*	00000000 __alt_stack_base
000072fc g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000060e0 g     F .text	00000258 __divdf3
000047e0 g     F .text	00000058 __copybits
0000879c g     O .rwdata	00000408 __malloc_av_
00005d1c g     F .text	000003c4 __muldf3
00008094 g     F .text	000000bc alt_find_file
00007aac g     F .text	00000070 alt_dev_llist_insert
00007204 g     F .text	00000004 __malloc_lock
0000720c g     F .text	00000050 sbrk
000054ac g     F .text	000000c8 _calloc_r
0000bd8c g       *ABS*	00000000 __bss_start
00005574 g     F .text	00000098 memset
000001c8 g     F .text	00000418 main
0000bda4 g     O .bss	00000004 alt_envp
0000bd94 g     O .bss	00000004 __malloc_max_total_mem
00007344 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
000057a0 g     F .text	00000078 __ltsf2
08000000 g       *ABS*	00000000 __alt_heap_limit
00000674 g     F .text	00000074 __truncdfsf2
00000aa4 g     F .text	00000740 _malloc_r
0000a284 g     O .rwdata	00000004 alt_errno
0000a258 g     O .rwdata	00000004 dda_ptr
000069c0 g     F .text	00000060 __divsi3
00008638 g     O .rodata	00000014 __thenan_df
0000313c g     F .text	0000012c _malloc_trim_r
00008468 g       *ABS*	00000000 __flash_rodata_start
00006338 g     F .text	00000088 __nedf2
0000725c g     F .text	00000020 alt_irq_init
00007ed4 g     F .text	00000068 alt_release_fd
0000864c g     O .rodata	00000100 __clz_tab
00002ffc g     F .text	00000124 strtof
0000a264 g     O .rwdata	00000004 _impure_ptr
0000bd9c g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
000044fc g     F .text	00000080 __ulp
0000a270 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007bb8 g     F .text	00000020 alt_ic_isr_register
000035a0 g     F .text	00000068 __hexdig_init
0000a294 g       *ABS*	00000000 _edata
0000bfdc g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
000075d4 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00007b78 g     F .text	00000040 alt_ic_irq_disable
0000a25c g     O .rwdata	00000004 __malloc_trim_threshold
0000801c g     F .text	00000008 altera_nios2_qsys_irq_init
000081f0 g     F .text	00000038 exit
00004af8 g     F .text	0000018c __mdiff
00006a20 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006c6c g     F .text	000000a8 __fpcmp_parts_f
00008450 g     F .text	00000014 _exit
0000792c g     F .text	00000094 alt_alarm_start
00006ac8 g     F .text	00000124 __muldi3
00008228 g     F .text	00000074 strlen
00007d50 g     F .text	00000184 open
00006448 g     F .text	00000088 __gedf2
000036b8 g     F .text	000007fc __gethex
00007b1c g     F .text	00000004 alt_icache_flush_all
000053cc g     F .text	000000e0 strchr
0000a288 g     O .rwdata	00000004 alt_priority_mask
00007b38 g     F .text	00000040 alt_ic_irq_enable
00005c28 g     F .text	00000080 __subdf3
000001a4 g     F .text	00000024 put_jtag
000043d8 g     F .text	000000c4 __lo0bits
0000a28c g     O .rwdata	00000008 alt_alarm_list
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
000079c0 g     F .text	000000e0 close
000070f0 g     F .text	000000c4 alt_load
00006d14 g     F .text	00000314 __pack_d
00000a7c g     F .text	00000014 free
00005060 g     F .text	0000012c __multadd
00004340 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08405a14 	ori	at,at,360
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	842fb704 	addi	r16,r16,-16676
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 114:	200490fa 	slli	r2,r4,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	0009883a 	mov	r4,zero
 140:	180b883a 	mov	r5,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	2149883a 	add	r4,r4,r5
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     174:	d6889614 	ori	gp,gp,8792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     17c:	10af6314 	ori	r2,r2,48524

    movhi r3, %hi(__bss_end)
     180:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     184:	18eff714 	ori	r3,r3,49116

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	00070f00 	call	70f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	00071b40 	call	71b4 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <put_jtag>:
 * Subroutine to send a character to the JTAG UART
********************************************************************************/
void put_jtag( volatile int * JTAG_UART_ptr, char c )
{
	int control;
	control = *(JTAG_UART_ptr + 1);			// read the JTAG_UART control register
     1a4:	20800104 	addi	r2,r4,4
     1a8:	10800017 	ldw	r2,0(r2)
	if (control & 0xFFFF0000)					// if space, then echo character, else ignore 
     1ac:	10bfffec 	andhi	r2,r2,65535
     1b0:	10000426 	beq	r2,zero,1c4 <put_jtag+0x20>
		*(JTAG_UART_ptr) = c;
     1b4:	28803fcc 	andi	r2,r5,255
     1b8:	1080201c 	xori	r2,r2,128
     1bc:	10bfe004 	addi	r2,r2,-128
     1c0:	20800015 	stw	r2,0(r4)
     1c4:	f800283a 	ret

000001c8 <main>:
 * 	2. reads character data from the JTAG UART
 * 	3. echos the character data back to the JTAG UART
********************************************************************************/
volatile int * dda_ptr = (int *) DDA_OPTIONS_BASE;
int main(void)
{
     1c8:	deffe404 	addi	sp,sp,-112
     1cc:	dfc01b15 	stw	ra,108(sp)
     1d0:	dd001a15 	stw	r20,104(sp)
     1d4:	dcc01915 	stw	r19,100(sp)
     1d8:	dc801815 	stw	r18,96(sp)
     1dc:	dc401715 	stw	r17,92(sp)
     1e0:	dc001615 	stw	r16,88(sp)
	uint32_t dataLine;

	int data, i, n;
	int k1, k2, k13, kmid, x1, v1, x2, v2;
	char command_index = 0;
	char text_string[] = "\nInput Spring-Mass System Parameters\n> \0";
     1e4:	00c00074 	movhi	r3,1
     1e8:	18e11a04 	addi	r3,r3,-31640
     1ec:	18800017 	ldw	r2,0(r3)
     1f0:	d8800115 	stw	r2,4(sp)
     1f4:	18800117 	ldw	r2,4(r3)
     1f8:	d8800215 	stw	r2,8(sp)
     1fc:	18800217 	ldw	r2,8(r3)
     200:	d8800315 	stw	r2,12(sp)
     204:	18800317 	ldw	r2,12(r3)
     208:	d8800415 	stw	r2,16(sp)
     20c:	18800417 	ldw	r2,16(r3)
     210:	d8800515 	stw	r2,20(sp)
     214:	18800517 	ldw	r2,20(r3)
     218:	d8800615 	stw	r2,24(sp)
     21c:	18800617 	ldw	r2,24(r3)
     220:	d8800715 	stw	r2,28(sp)
     224:	18800717 	ldw	r2,28(r3)
     228:	d8800815 	stw	r2,32(sp)
     22c:	18800817 	ldw	r2,32(r3)
     230:	d8800915 	stw	r2,36(sp)
     234:	18800917 	ldw	r2,36(r3)
     238:	d8800a15 	stw	r2,40(sp)
     23c:	18800a03 	ldbu	r2,40(r3)
     240:	d8800b05 	stb	r2,44(sp)
	char * command_string;//[20];
	char go_string[] = "go:";
     244:	00800074 	movhi	r2,1
     248:	10a12504 	addi	r2,r2,-31596
     24c:	10800017 	ldw	r2,0(r2)
     250:	d8800c15 	stw	r2,48(sp)
	char stop_string[] = "st:";
     254:	00800074 	movhi	r2,1
     258:	10a12604 	addi	r2,r2,-31592
     25c:	10800017 	ldw	r2,0(r2)
     260:	d8800d15 	stw	r2,52(sp)
	char k1_string[] = "k1:";
     264:	00800074 	movhi	r2,1
     268:	10a12704 	addi	r2,r2,-31588
     26c:	10800017 	ldw	r2,0(r2)
     270:	d8800e15 	stw	r2,56(sp)
	char k2_string[] = "k2:";
     274:	00800074 	movhi	r2,1
     278:	10a12804 	addi	r2,r2,-31584
     27c:	10800017 	ldw	r2,0(r2)
     280:	d8800f15 	stw	r2,60(sp)
	char kmid_string[] = "km:";
     284:	00800074 	movhi	r2,1
     288:	10a12904 	addi	r2,r2,-31580
     28c:	10800017 	ldw	r2,0(r2)
     290:	d8801015 	stw	r2,64(sp)
	char k13_string[] = "k3:";
     294:	00800074 	movhi	r2,1
     298:	10a12a04 	addi	r2,r2,-31576
     29c:	10800017 	ldw	r2,0(r2)
     2a0:	d8801115 	stw	r2,68(sp)
	char x1_string[] = "x1:";
     2a4:	00800074 	movhi	r2,1
     2a8:	10a12b04 	addi	r2,r2,-31572
     2ac:	10800017 	ldw	r2,0(r2)
     2b0:	d8801215 	stw	r2,72(sp)
	char v1_string[] = "v1:";
     2b4:	00800074 	movhi	r2,1
     2b8:	10a12c04 	addi	r2,r2,-31568
     2bc:	10800017 	ldw	r2,0(r2)
     2c0:	d8801315 	stw	r2,76(sp)
	char x2_string[] = "x2:";
     2c4:	00800074 	movhi	r2,1
     2c8:	10a12d04 	addi	r2,r2,-31564
     2cc:	10800017 	ldw	r2,0(r2)
     2d0:	d8801415 	stw	r2,80(sp)
	char v2_string[] = "v2:";
     2d4:	00800074 	movhi	r2,1
     2d8:	10a12e04 	addi	r2,r2,-31560
     2dc:	10800017 	ldw	r2,0(r2)
     2e0:	d8801515 	stw	r2,84(sp)
  	char* pEnd;

	command_string = malloc( sizeof(char)*20);
     2e4:	01000504 	movi	r4,20
     2e8:	0000a900 	call	a90 <malloc>
     2ec:	1021883a 	mov	r16,r2
	/* print a text string */
	for (i = 0; text_string[i] != 0; ++i)
     2f0:	d9400103 	ldbu	r5,4(sp)
     2f4:	28803fcc 	andi	r2,r5,255
     2f8:	1080201c 	xori	r2,r2,128
     2fc:	10bfe004 	addi	r2,r2,-128
     300:	10000d26 	beq	r2,zero,338 <main+0x170>
     304:	dc400144 	addi	r17,sp,5
		put_jtag (JTAG_UART_ptr, text_string[i]);
     308:	01040034 	movhi	r4,4096
     30c:	21040004 	addi	r4,r4,4096
     310:	29403fcc 	andi	r5,r5,255
     314:	2940201c 	xori	r5,r5,128
     318:	297fe004 	addi	r5,r5,-128
     31c:	00001a40 	call	1a4 <put_jtag>
	char v2_string[] = "v2:";
  	char* pEnd;

	command_string = malloc( sizeof(char)*20);
	/* print a text string */
	for (i = 0; text_string[i] != 0; ++i)
     320:	89400003 	ldbu	r5,0(r17)
     324:	8c400044 	addi	r17,r17,1
     328:	28803fcc 	andi	r2,r5,255
     32c:	1080201c 	xori	r2,r2,128
     330:	10bfe004 	addi	r2,r2,-128
     334:	103ff41e 	bne	r2,zero,308 <main+0x140>
     338:	0027883a 	mov	r19,zero
     33c:	0023883a 	mov	r17,zero
     340:	050000c4 	movi	r20,3
		put_jtag (JTAG_UART_ptr, text_string[i]);
	/* read and echo characters */
	while(1)
	{
		data = *(JTAG_UART_ptr);		 		// read the JTAG_UART data register
     344:	00840034 	movhi	r2,4096
     348:	10840004 	addi	r2,r2,4096
     34c:	11400017 	ldw	r5,0(r2)
		if (data & 0x00008000)					// check RVALID to see if there is new data
     350:	28a0000c 	andi	r2,r5,32768
     354:	103ffb26 	beq	r2,zero,344 <main+0x17c>
		{
			data = data & 0x000000FF;			// the data is in the least significant byte
     358:	2c803fcc 	andi	r18,r5,255
			/* echo the character */

			// Add the data to the current command string if not return
			if ((data != '\n') && (data != '\r') && (command_index <19))
     35c:	00800284 	movi	r2,10
     360:	90800b26 	beq	r18,r2,390 <main+0x1c8>
     364:	00800344 	movi	r2,13
     368:	90800926 	beq	r18,r2,390 <main+0x1c8>
     36c:	88c03fcc 	andi	r3,r17,255
     370:	18c0201c 	xori	r3,r3,128
     374:	18ffe004 	addi	r3,r3,-128
     378:	00800484 	movi	r2,18
     37c:	10c00416 	blt	r2,r3,390 <main+0x1c8>
			{
				command_string[command_index] = data;
     380:	80c5883a 	add	r2,r16,r3
     384:	14800005 	stb	r18,0(r2)
				command_index++;
     388:	8c400044 	addi	r17,r17,1
     38c:	00008d06 	br	5c4 <main+0x3fc>
			}
			// clear the command string if there is a return
			else
			{
				command_string[command_index] = '\0';
     390:	88803fcc 	andi	r2,r17,255
     394:	1080201c 	xori	r2,r2,128
     398:	10bfe004 	addi	r2,r2,-128
     39c:	8085883a 	add	r2,r16,r2
     3a0:	10000005 	stb	zero,0(r2)
				// check for a match on any of the special strings in the command string
				if (strstr(command_string,k1_string) == command_string)
     3a4:	8009883a 	mov	r4,r16
     3a8:	d9400e04 	addi	r5,sp,56
     3ac:	00013880 	call	1388 <strstr>
     3b0:	8080081e 	bne	r16,r2,3d4 <main+0x20c>
				{

					//printf("\nfound k1 match\n");
					tempFloat = atof(&command_string[3]); //strtod(&command_string[3],&pEnd);
     3b4:	810000c4 	addi	r4,r16,3
     3b8:	0000a740 	call	a74 <atof>
     3bc:	1009883a 	mov	r4,r2
     3c0:	180b883a 	mov	r5,r3
     3c4:	00006740 	call	674 <__truncdfsf2>
     3c8:	d8800015 	stw	r2,0(sp)
     3cc:	04c00044 	movi	r19,1
     3d0:	00006606 	br	56c <main+0x3a4>
					//sscanf(command_string,"%f", &tempFloat);
					select_line = 0x1;

				}
				
				else if (strstr(command_string,k2_string) == command_string)
     3d4:	8009883a 	mov	r4,r16
     3d8:	d9400f04 	addi	r5,sp,60
     3dc:	00013880 	call	1388 <strstr>
     3e0:	8080091e 	bne	r16,r2,408 <main+0x240>
				{
					tempFloat = strtod(command_string + 3,NULL);
     3e4:	810000c4 	addi	r4,r16,3
     3e8:	000b883a 	mov	r5,zero
     3ec:	00031200 	call	3120 <strtod>
     3f0:	1009883a 	mov	r4,r2
     3f4:	180b883a 	mov	r5,r3
     3f8:	00006740 	call	674 <__truncdfsf2>
     3fc:	d8800015 	stw	r2,0(sp)
     400:	04c00084 	movi	r19,2
     404:	00005906 	br	56c <main+0x3a4>
					select_line = 0x2;
				}
				else if (strstr(command_string,k13_string) == command_string)
     408:	8009883a 	mov	r4,r16
     40c:	d9401104 	addi	r5,sp,68
     410:	00013880 	call	1388 <strstr>
     414:	8080091e 	bne	r16,r2,43c <main+0x274>
				{
					tempFloat = strtod(command_string + 3,NULL);
     418:	8509883a 	add	r4,r16,r20
     41c:	000b883a 	mov	r5,zero
     420:	00031200 	call	3120 <strtod>
     424:	1009883a 	mov	r4,r2
     428:	180b883a 	mov	r5,r3
     42c:	00006740 	call	674 <__truncdfsf2>
     430:	d8800015 	stw	r2,0(sp)
     434:	a027883a 	mov	r19,r20
     438:	00004c06 	br	56c <main+0x3a4>
					select_line = 0x3;
				}

				else if (strstr(command_string,kmid_string) == command_string)
     43c:	8009883a 	mov	r4,r16
     440:	d9401004 	addi	r5,sp,64
     444:	00013880 	call	1388 <strstr>
     448:	8080091e 	bne	r16,r2,470 <main+0x2a8>
				{
					tempFloat = strtod(command_string + 3,NULL);
     44c:	810000c4 	addi	r4,r16,3
     450:	000b883a 	mov	r5,zero
     454:	00031200 	call	3120 <strtod>
     458:	1009883a 	mov	r4,r2
     45c:	180b883a 	mov	r5,r3
     460:	00006740 	call	674 <__truncdfsf2>
     464:	d8800015 	stw	r2,0(sp)
     468:	04c00104 	movi	r19,4
     46c:	00003f06 	br	56c <main+0x3a4>
					select_line = 0x4;

				}
				else if (strstr(command_string,x1_string) == command_string)
     470:	8009883a 	mov	r4,r16
     474:	d9401204 	addi	r5,sp,72
     478:	00013880 	call	1388 <strstr>
     47c:	8080091e 	bne	r16,r2,4a4 <main+0x2dc>
				{
					tempFloat = strtod(command_string + 3,NULL);
     480:	810000c4 	addi	r4,r16,3
     484:	000b883a 	mov	r5,zero
     488:	00031200 	call	3120 <strtod>
     48c:	1009883a 	mov	r4,r2
     490:	180b883a 	mov	r5,r3
     494:	00006740 	call	674 <__truncdfsf2>
     498:	d8800015 	stw	r2,0(sp)
     49c:	04c00144 	movi	r19,5
     4a0:	00003206 	br	56c <main+0x3a4>
					select_line = 0x5;
				}
				else if (strstr(command_string,v1_string) == command_string)
     4a4:	8009883a 	mov	r4,r16
     4a8:	d9401304 	addi	r5,sp,76
     4ac:	00013880 	call	1388 <strstr>
     4b0:	8080091e 	bne	r16,r2,4d8 <main+0x310>
				{
					tempFloat = strtod(command_string + 3,NULL);
     4b4:	810000c4 	addi	r4,r16,3
     4b8:	000b883a 	mov	r5,zero
     4bc:	00031200 	call	3120 <strtod>
     4c0:	1009883a 	mov	r4,r2
     4c4:	180b883a 	mov	r5,r3
     4c8:	00006740 	call	674 <__truncdfsf2>
     4cc:	d8800015 	stw	r2,0(sp)
     4d0:	04c00184 	movi	r19,6
     4d4:	00002506 	br	56c <main+0x3a4>
				select_line = 0x6;
				}
				else if (strstr(command_string,x2_string) == command_string)
     4d8:	8009883a 	mov	r4,r16
     4dc:	d9401404 	addi	r5,sp,80
     4e0:	00013880 	call	1388 <strstr>
     4e4:	8080091e 	bne	r16,r2,50c <main+0x344>
				{
					tempFloat = strtod(command_string + 3,NULL);
     4e8:	810000c4 	addi	r4,r16,3
     4ec:	000b883a 	mov	r5,zero
     4f0:	00031200 	call	3120 <strtod>
     4f4:	1009883a 	mov	r4,r2
     4f8:	180b883a 	mov	r5,r3
     4fc:	00006740 	call	674 <__truncdfsf2>
     500:	d8800015 	stw	r2,0(sp)
     504:	04c001c4 	movi	r19,7
     508:	00001806 	br	56c <main+0x3a4>
					select_line = 0x7;
				}
				else if (strstr(command_string,v2_string) == command_string)
     50c:	8009883a 	mov	r4,r16
     510:	d9401504 	addi	r5,sp,84
     514:	00013880 	call	1388 <strstr>
     518:	8080091e 	bne	r16,r2,540 <main+0x378>
				{
					tempFloat = strtod(command_string + 3,NULL);
     51c:	810000c4 	addi	r4,r16,3
     520:	000b883a 	mov	r5,zero
     524:	00031200 	call	3120 <strtod>
     528:	1009883a 	mov	r4,r2
     52c:	180b883a 	mov	r5,r3
     530:	00006740 	call	674 <__truncdfsf2>
     534:	d8800015 	stw	r2,0(sp)
     538:	04c00204 	movi	r19,8
     53c:	00000b06 	br	56c <main+0x3a4>
					select_line = 0x8;
				}
				else if (strstr(command_string,go_string) == command_string)
     540:	8009883a 	mov	r4,r16
     544:	d9400c04 	addi	r5,sp,48
     548:	00013880 	call	1388 <strstr>
     54c:	8080021e 	bne	r16,r2,558 <main+0x390>
     550:	04c00244 	movi	r19,9
     554:	00000506 	br	56c <main+0x3a4>
				{
					select_line = 0x9;
				}
				else if (strstr(command_string,stop_string) == command_string)
     558:	8009883a 	mov	r4,r16
     55c:	d9400d04 	addi	r5,sp,52
     560:	00013880 	call	1388 <strstr>
     564:	8080011e 	bne	r16,r2,56c <main+0x3a4>
     568:	04c00284 	movi	r19,10
				else
				{
					//select_line = 0x0;
				}
				//printf("about to convert to fixed\n");
				dataLine = FLOAT2_DDA_FIXED(tempFloat);
     56c:	d8800017 	ldw	r2,0(sp)
				// after reading a value, zero the index and clear the command string
				//printf("tempFloat = %f\ndataLine = ",tempFloat);
				*(dda_ptr)= (dataLine << 4) | select_line;
     570:	0111e034 	movhi	r4,18304
     574:	1109ff32 	custom	252,r4,r2,r4
     578:	00005e00 	call	5e0 <__fixsfsi>
     57c:	00c00134 	movhi	r3,4
     580:	18ffffc4 	addi	r3,r3,-1
     584:	10c4703a 	and	r2,r2,r3
     588:	1004913a 	slli	r2,r2,4
     58c:	98c03fcc 	andi	r3,r19,255
     590:	18c0201c 	xori	r3,r3,128
     594:	18ffe004 	addi	r3,r3,-128
     598:	10c4b03a 	or	r2,r2,r3
     59c:	d0e00017 	ldw	r3,-32768(gp)
     5a0:	18800015 	stw	r2,0(r3)
     5a4:	0007883a 	mov	r3,zero
     5a8:	01400044 	movi	r5,1
     5ac:	01000504 	movi	r4,20
				*/
				//printf("\nPort output displayed above\n");
				
				// zero the command string
				for (n=0;n<20;n++){
					command_string[n] = '\0';
     5b0:	80c5883a 	add	r2,r16,r3
     5b4:	10000005 	stb	zero,0(r2)
				}
				*/
				//printf("\nPort output displayed above\n");
				
				// zero the command string
				for (n=0;n<20;n++){
     5b8:	1947883a 	add	r3,r3,r5
     5bc:	193ffc1e 	bne	r3,r4,5b0 <main+0x3e8>
     5c0:	0023883a 	mov	r17,zero
					command_string[n] = '\0';
				}
			}

			put_jtag (JTAG_UART_ptr, (char) data & 0xFF );
     5c4:	01040034 	movhi	r4,4096
     5c8:	21040004 	addi	r4,r4,4096
     5cc:	91403fcc 	andi	r5,r18,255
     5d0:	2940201c 	xori	r5,r5,128
     5d4:	297fe004 	addi	r5,r5,-128
     5d8:	00001a40 	call	1a4 <put_jtag>
     5dc:	003f5906 	br	344 <main+0x17c>

000005e0 <__fixsfsi>:
     5e0:	defffa04 	addi	sp,sp,-24
     5e4:	d9000015 	stw	r4,0(sp)
     5e8:	d9400104 	addi	r5,sp,4
     5ec:	d809883a 	mov	r4,sp
     5f0:	dfc00515 	stw	ra,20(sp)
     5f4:	00006e80 	call	6e8 <__unpack_f>
     5f8:	d8c00117 	ldw	r3,4(sp)
     5fc:	00800084 	movi	r2,2
     600:	1880041e 	bne	r3,r2,614 <__fixsfsi+0x34>
     604:	0005883a 	mov	r2,zero
     608:	dfc00517 	ldw	ra,20(sp)
     60c:	dec00604 	addi	sp,sp,24
     610:	f800283a 	ret
     614:	00800044 	movi	r2,1
     618:	10fffa2e 	bgeu	r2,r3,604 <__fixsfsi+0x24>
     61c:	00800104 	movi	r2,4
     620:	18800426 	beq	r3,r2,634 <__fixsfsi+0x54>
     624:	d8800317 	ldw	r2,12(sp)
     628:	103ff616 	blt	r2,zero,604 <__fixsfsi+0x24>
     62c:	00c00784 	movi	r3,30
     630:	1880070e 	bge	r3,r2,650 <__fixsfsi+0x70>
     634:	d8800217 	ldw	r2,8(sp)
     638:	10000c1e 	bne	r2,zero,66c <__fixsfsi+0x8c>
     63c:	00a00034 	movhi	r2,32768
     640:	10bfffc4 	addi	r2,r2,-1
     644:	dfc00517 	ldw	ra,20(sp)
     648:	dec00604 	addi	sp,sp,24
     64c:	f800283a 	ret
     650:	1885c83a 	sub	r2,r3,r2
     654:	d9000217 	ldw	r4,8(sp)
     658:	d8c00417 	ldw	r3,16(sp)
     65c:	1884d83a 	srl	r2,r3,r2
     660:	203fe926 	beq	r4,zero,608 <__fixsfsi+0x28>
     664:	0085c83a 	sub	r2,zero,r2
     668:	003fe706 	br	608 <__fixsfsi+0x28>
     66c:	00a00034 	movhi	r2,32768
     670:	003fe506 	br	608 <__fixsfsi+0x28>

00000674 <__truncdfsf2>:
     674:	defff804 	addi	sp,sp,-32
     678:	2005883a 	mov	r2,r4
     67c:	2807883a 	mov	r3,r5
     680:	d809883a 	mov	r4,sp
     684:	d9400204 	addi	r5,sp,8
     688:	d8c00115 	stw	r3,4(sp)
     68c:	d8800015 	stw	r2,0(sp)
     690:	dfc00715 	stw	ra,28(sp)
     694:	00007dc0 	call	7dc <__unpack_d>
     698:	d9c00517 	ldw	r7,20(sp)
     69c:	da000617 	ldw	r8,24(sp)
     6a0:	02d00034 	movhi	r11,16384
     6a4:	5affffc4 	addi	r11,r11,-1
     6a8:	3812d7ba 	srli	r9,r7,30
     6ac:	401a90ba 	slli	r13,r8,2
     6b0:	3ac4703a 	and	r2,r7,r11
     6b4:	0007883a 	mov	r3,zero
     6b8:	6a52b03a 	or	r9,r13,r9
     6bc:	10c4b03a 	or	r2,r2,r3
     6c0:	d9000217 	ldw	r4,8(sp)
     6c4:	d9400317 	ldw	r5,12(sp)
     6c8:	d9800417 	ldw	r6,16(sp)
     6cc:	480f883a 	mov	r7,r9
     6d0:	10000126 	beq	r2,zero,6d8 <__truncdfsf2+0x64>
     6d4:	49c00054 	ori	r7,r9,1
     6d8:	00007b00 	call	7b0 <__make_fp>
     6dc:	dfc00717 	ldw	ra,28(sp)
     6e0:	dec00804 	addi	sp,sp,32
     6e4:	f800283a 	ret

000006e8 <__unpack_f>:
     6e8:	21800017 	ldw	r6,0(r4)
     6ec:	00c02034 	movhi	r3,128
     6f0:	18ffffc4 	addi	r3,r3,-1
     6f4:	3004d5fa 	srli	r2,r6,23
     6f8:	3008d7fa 	srli	r4,r6,31
     6fc:	30ce703a 	and	r7,r6,r3
     700:	10c03fcc 	andi	r3,r2,255
     704:	29000115 	stw	r4,4(r5)
     708:	1800131e 	bne	r3,zero,758 <__unpack_f+0x70>
     70c:	38000f26 	beq	r7,zero,74c <__unpack_f+0x64>
     710:	380691fa 	slli	r3,r7,7
     714:	01bfe084 	movi	r6,-126
     718:	008000c4 	movi	r2,3
     71c:	01100034 	movhi	r4,16384
     720:	213fffc4 	addi	r4,r4,-1
     724:	28800015 	stw	r2,0(r5)
     728:	29800215 	stw	r6,8(r5)
     72c:	20c00536 	bltu	r4,r3,744 <__unpack_f+0x5c>
     730:	3005883a 	mov	r2,r6
     734:	18c7883a 	add	r3,r3,r3
     738:	10bfffc4 	addi	r2,r2,-1
     73c:	20fffd2e 	bgeu	r4,r3,734 <__unpack_f+0x4c>
     740:	28800215 	stw	r2,8(r5)
     744:	28c00315 	stw	r3,12(r5)
     748:	f800283a 	ret
     74c:	00800084 	movi	r2,2
     750:	28800015 	stw	r2,0(r5)
     754:	f800283a 	ret
     758:	00803fc4 	movi	r2,255
     75c:	18800826 	beq	r3,r2,780 <__unpack_f+0x98>
     760:	380491fa 	slli	r2,r7,7
     764:	18ffe044 	addi	r3,r3,-127
     768:	28c00215 	stw	r3,8(r5)
     76c:	10900034 	orhi	r2,r2,16384
     770:	28800315 	stw	r2,12(r5)
     774:	008000c4 	movi	r2,3
     778:	28800015 	stw	r2,0(r5)
     77c:	f800283a 	ret
     780:	3800031e 	bne	r7,zero,790 <__unpack_f+0xa8>
     784:	00800104 	movi	r2,4
     788:	28800015 	stw	r2,0(r5)
     78c:	f800283a 	ret
     790:	3080042c 	andhi	r2,r6,16
     794:	10000426 	beq	r2,zero,7a8 <__unpack_f+0xc0>
     798:	00800044 	movi	r2,1
     79c:	28800015 	stw	r2,0(r5)
     7a0:	29c00315 	stw	r7,12(r5)
     7a4:	f800283a 	ret
     7a8:	28000015 	stw	zero,0(r5)
     7ac:	003ffc06 	br	7a0 <__unpack_f+0xb8>

000007b0 <__make_fp>:
     7b0:	defffb04 	addi	sp,sp,-20
     7b4:	d9000015 	stw	r4,0(sp)
     7b8:	d809883a 	mov	r4,sp
     7bc:	dfc00415 	stw	ra,16(sp)
     7c0:	d9400115 	stw	r5,4(sp)
     7c4:	d9800215 	stw	r6,8(sp)
     7c8:	d9c00315 	stw	r7,12(sp)
     7cc:	00009140 	call	914 <__pack_f>
     7d0:	dfc00417 	ldw	ra,16(sp)
     7d4:	dec00504 	addi	sp,sp,20
     7d8:	f800283a 	ret

000007dc <__unpack_d>:
     7dc:	20c00117 	ldw	r3,4(r4)
     7e0:	22400017 	ldw	r9,0(r4)
     7e4:	00800434 	movhi	r2,16
     7e8:	10bfffc4 	addi	r2,r2,-1
     7ec:	1808d53a 	srli	r4,r3,20
     7f0:	180cd7fa 	srli	r6,r3,31
     7f4:	1894703a 	and	r10,r3,r2
     7f8:	2201ffcc 	andi	r8,r4,2047
     7fc:	281b883a 	mov	r13,r5
     800:	4817883a 	mov	r11,r9
     804:	29800115 	stw	r6,4(r5)
     808:	5019883a 	mov	r12,r10
     80c:	40001e1e 	bne	r8,zero,888 <__unpack_d+0xac>
     810:	4a84b03a 	or	r2,r9,r10
     814:	10001926 	beq	r2,zero,87c <__unpack_d+0xa0>
     818:	4804d63a 	srli	r2,r9,24
     81c:	500c923a 	slli	r6,r10,8
     820:	013f0084 	movi	r4,-1022
     824:	00c40034 	movhi	r3,4096
     828:	18ffffc4 	addi	r3,r3,-1
     82c:	118cb03a 	or	r6,r2,r6
     830:	008000c4 	movi	r2,3
     834:	480a923a 	slli	r5,r9,8
     838:	68800015 	stw	r2,0(r13)
     83c:	69000215 	stw	r4,8(r13)
     840:	19800b36 	bltu	r3,r6,870 <__unpack_d+0x94>
     844:	200f883a 	mov	r7,r4
     848:	1811883a 	mov	r8,r3
     84c:	2945883a 	add	r2,r5,r5
     850:	1149803a 	cmpltu	r4,r2,r5
     854:	3187883a 	add	r3,r6,r6
     858:	20c9883a 	add	r4,r4,r3
     85c:	100b883a 	mov	r5,r2
     860:	200d883a 	mov	r6,r4
     864:	39ffffc4 	addi	r7,r7,-1
     868:	413ff82e 	bgeu	r8,r4,84c <__unpack_d+0x70>
     86c:	69c00215 	stw	r7,8(r13)
     870:	69800415 	stw	r6,16(r13)
     874:	69400315 	stw	r5,12(r13)
     878:	f800283a 	ret
     87c:	00800084 	movi	r2,2
     880:	28800015 	stw	r2,0(r5)
     884:	f800283a 	ret
     888:	0081ffc4 	movi	r2,2047
     88c:	40800f26 	beq	r8,r2,8cc <__unpack_d+0xf0>
     890:	480cd63a 	srli	r6,r9,24
     894:	5006923a 	slli	r3,r10,8
     898:	4804923a 	slli	r2,r9,8
     89c:	0009883a 	mov	r4,zero
     8a0:	30c6b03a 	or	r3,r6,r3
     8a4:	01440034 	movhi	r5,4096
     8a8:	110cb03a 	or	r6,r2,r4
     8ac:	423f0044 	addi	r8,r8,-1023
     8b0:	194eb03a 	or	r7,r3,r5
     8b4:	008000c4 	movi	r2,3
     8b8:	69c00415 	stw	r7,16(r13)
     8bc:	6a000215 	stw	r8,8(r13)
     8c0:	68800015 	stw	r2,0(r13)
     8c4:	69800315 	stw	r6,12(r13)
     8c8:	f800283a 	ret
     8cc:	4a84b03a 	or	r2,r9,r10
     8d0:	1000031e 	bne	r2,zero,8e0 <__unpack_d+0x104>
     8d4:	00800104 	movi	r2,4
     8d8:	28800015 	stw	r2,0(r5)
     8dc:	f800283a 	ret
     8e0:	0009883a 	mov	r4,zero
     8e4:	01400234 	movhi	r5,8
     8e8:	4904703a 	and	r2,r9,r4
     8ec:	5146703a 	and	r3,r10,r5
     8f0:	10c4b03a 	or	r2,r2,r3
     8f4:	10000526 	beq	r2,zero,90c <__unpack_d+0x130>
     8f8:	00800044 	movi	r2,1
     8fc:	68800015 	stw	r2,0(r13)
     900:	6b000415 	stw	r12,16(r13)
     904:	6ac00315 	stw	r11,12(r13)
     908:	f800283a 	ret
     90c:	68000015 	stw	zero,0(r13)
     910:	003ffb06 	br	900 <__unpack_d+0x124>

00000914 <__pack_f>:
     914:	20c00017 	ldw	r3,0(r4)
     918:	01c00044 	movi	r7,1
     91c:	21800317 	ldw	r6,12(r4)
     920:	21400117 	ldw	r5,4(r4)
     924:	38c02d2e 	bgeu	r7,r3,9dc <__pack_f+0xc8>
     928:	00800104 	movi	r2,4
     92c:	18802826 	beq	r3,r2,9d0 <__pack_f+0xbc>
     930:	00800084 	movi	r2,2
     934:	18800126 	beq	r3,r2,93c <__pack_f+0x28>
     938:	3000101e 	bne	r6,zero,97c <__pack_f+0x68>
     93c:	000d883a 	mov	r6,zero
     940:	0007883a 	mov	r3,zero
     944:	19003fcc 	andi	r4,r3,255
     948:	200895fa 	slli	r4,r4,23
     94c:	00c02034 	movhi	r3,128
     950:	18ffffc4 	addi	r3,r3,-1
     954:	30c6703a 	and	r3,r6,r3
     958:	10a0002c 	andhi	r2,r2,32768
     95c:	10c4b03a 	or	r2,r2,r3
     960:	280a97fa 	slli	r5,r5,31
     964:	1104b03a 	or	r2,r2,r4
     968:	00e00034 	movhi	r3,32768
     96c:	18ffffc4 	addi	r3,r3,-1
     970:	10c4703a 	and	r2,r2,r3
     974:	1144b03a 	or	r2,r2,r5
     978:	f800283a 	ret
     97c:	21000217 	ldw	r4,8(r4)
     980:	00bfe084 	movi	r2,-126
     984:	20801b16 	blt	r4,r2,9f4 <__pack_f+0xe0>
     988:	00801fc4 	movi	r2,127
     98c:	11001016 	blt	r2,r4,9d0 <__pack_f+0xbc>
     990:	308e703a 	and	r7,r6,r2
     994:	2087883a 	add	r3,r4,r2
     998:	00801004 	movi	r2,64
     99c:	38800526 	beq	r7,r2,9b4 <__pack_f+0xa0>
     9a0:	31800fc4 	addi	r6,r6,63
     9a4:	30000716 	blt	r6,zero,9c4 <__pack_f+0xb0>
     9a8:	300490ba 	slli	r2,r6,2
     9ac:	100cd27a 	srli	r6,r2,9
     9b0:	003fe406 	br	944 <__pack_f+0x30>
     9b4:	3080200c 	andi	r2,r6,128
     9b8:	103ffa26 	beq	r2,zero,9a4 <__pack_f+0x90>
     9bc:	31cd883a 	add	r6,r6,r7
     9c0:	003ff806 	br	9a4 <__pack_f+0x90>
     9c4:	300cd07a 	srli	r6,r6,1
     9c8:	18c00044 	addi	r3,r3,1
     9cc:	003ff606 	br	9a8 <__pack_f+0x94>
     9d0:	000d883a 	mov	r6,zero
     9d4:	00ffffc4 	movi	r3,-1
     9d8:	003fda06 	br	944 <__pack_f+0x30>
     9dc:	31800434 	orhi	r6,r6,16
     9e0:	00802034 	movhi	r2,128
     9e4:	10bfffc4 	addi	r2,r2,-1
     9e8:	308c703a 	and	r6,r6,r2
     9ec:	00ffffc4 	movi	r3,-1
     9f0:	003fd406 	br	944 <__pack_f+0x30>
     9f4:	1109c83a 	sub	r4,r2,r4
     9f8:	00800644 	movi	r2,25
     9fc:	11001216 	blt	r2,r4,a48 <__pack_f+0x134>
     a00:	3904983a 	sll	r2,r7,r4
     a04:	3106d83a 	srl	r3,r6,r4
     a08:	10bfffc4 	addi	r2,r2,-1
     a0c:	3084703a 	and	r2,r6,r2
     a10:	1004c03a 	cmpne	r2,r2,zero
     a14:	1886b03a 	or	r3,r3,r2
     a18:	19001fcc 	andi	r4,r3,127
     a1c:	00801004 	movi	r2,64
     a20:	20800c26 	beq	r4,r2,a54 <__pack_f+0x140>
     a24:	18c00fc4 	addi	r3,r3,63
     a28:	00900034 	movhi	r2,16384
     a2c:	10bfffc4 	addi	r2,r2,-1
     a30:	180cd1fa 	srli	r6,r3,7
     a34:	10c7803a 	cmpltu	r3,r2,r3
     a38:	00802034 	movhi	r2,128
     a3c:	10bfffc4 	addi	r2,r2,-1
     a40:	308c703a 	and	r6,r6,r2
     a44:	003fbf06 	br	944 <__pack_f+0x30>
     a48:	0007883a 	mov	r3,zero
     a4c:	000d883a 	mov	r6,zero
     a50:	003ff906 	br	a38 <__pack_f+0x124>
     a54:	1880200c 	andi	r2,r3,128
     a58:	10000126 	beq	r2,zero,a60 <__pack_f+0x14c>
     a5c:	1907883a 	add	r3,r3,r4
     a60:	180cd1fa 	srli	r6,r3,7
     a64:	00900034 	movhi	r2,16384
     a68:	10bfffc4 	addi	r2,r2,-1
     a6c:	10c7803a 	cmpltu	r3,r2,r3
     a70:	003ff106 	br	a38 <__pack_f+0x124>

00000a74 <atof>:
     a74:	000b883a 	mov	r5,zero
     a78:	00031201 	jmpi	3120 <strtod>

00000a7c <free>:
     a7c:	00800074 	movhi	r2,1
     a80:	10a89904 	addi	r2,r2,-23964
     a84:	200b883a 	mov	r5,r4
     a88:	11000017 	ldw	r4,0(r2)
     a8c:	00032681 	jmpi	3268 <_free_r>

00000a90 <malloc>:
     a90:	00800074 	movhi	r2,1
     a94:	10a89904 	addi	r2,r2,-23964
     a98:	200b883a 	mov	r5,r4
     a9c:	11000017 	ldw	r4,0(r2)
     aa0:	0000aa41 	jmpi	aa4 <_malloc_r>

00000aa4 <_malloc_r>:
     aa4:	defff604 	addi	sp,sp,-40
     aa8:	28c002c4 	addi	r3,r5,11
     aac:	00800584 	movi	r2,22
     ab0:	dc800215 	stw	r18,8(sp)
     ab4:	dfc00915 	stw	ra,36(sp)
     ab8:	df000815 	stw	fp,32(sp)
     abc:	ddc00715 	stw	r23,28(sp)
     ac0:	dd800615 	stw	r22,24(sp)
     ac4:	dd400515 	stw	r21,20(sp)
     ac8:	dd000415 	stw	r20,16(sp)
     acc:	dcc00315 	stw	r19,12(sp)
     ad0:	dc400115 	stw	r17,4(sp)
     ad4:	dc000015 	stw	r16,0(sp)
     ad8:	2025883a 	mov	r18,r4
     adc:	10c01236 	bltu	r2,r3,b28 <_malloc_r+0x84>
     ae0:	04400404 	movi	r17,16
     ae4:	8940142e 	bgeu	r17,r5,b38 <_malloc_r+0x94>
     ae8:	00800304 	movi	r2,12
     aec:	0007883a 	mov	r3,zero
     af0:	90800015 	stw	r2,0(r18)
     af4:	1805883a 	mov	r2,r3
     af8:	dfc00917 	ldw	ra,36(sp)
     afc:	df000817 	ldw	fp,32(sp)
     b00:	ddc00717 	ldw	r23,28(sp)
     b04:	dd800617 	ldw	r22,24(sp)
     b08:	dd400517 	ldw	r21,20(sp)
     b0c:	dd000417 	ldw	r20,16(sp)
     b10:	dcc00317 	ldw	r19,12(sp)
     b14:	dc800217 	ldw	r18,8(sp)
     b18:	dc400117 	ldw	r17,4(sp)
     b1c:	dc000017 	ldw	r16,0(sp)
     b20:	dec00a04 	addi	sp,sp,40
     b24:	f800283a 	ret
     b28:	00bffe04 	movi	r2,-8
     b2c:	18a2703a 	and	r17,r3,r2
     b30:	883fed16 	blt	r17,zero,ae8 <_malloc_r+0x44>
     b34:	897fec36 	bltu	r17,r5,ae8 <_malloc_r+0x44>
     b38:	9009883a 	mov	r4,r18
     b3c:	00072040 	call	7204 <__malloc_lock>
     b40:	00807dc4 	movi	r2,503
     b44:	14402b2e 	bgeu	r2,r17,bf4 <_malloc_r+0x150>
     b48:	8806d27a 	srli	r3,r17,9
     b4c:	18003f1e 	bne	r3,zero,c4c <_malloc_r+0x1a8>
     b50:	880cd0fa 	srli	r6,r17,3
     b54:	300490fa 	slli	r2,r6,3
     b58:	02c00074 	movhi	r11,1
     b5c:	5ae1e704 	addi	r11,r11,-30820
     b60:	12cb883a 	add	r5,r2,r11
     b64:	2c000317 	ldw	r16,12(r5)
     b68:	580f883a 	mov	r7,r11
     b6c:	2c00041e 	bne	r5,r16,b80 <_malloc_r+0xdc>
     b70:	00000a06 	br	b9c <_malloc_r+0xf8>
     b74:	1800860e 	bge	r3,zero,d90 <_malloc_r+0x2ec>
     b78:	84000317 	ldw	r16,12(r16)
     b7c:	2c000726 	beq	r5,r16,b9c <_malloc_r+0xf8>
     b80:	80800117 	ldw	r2,4(r16)
     b84:	00ffff04 	movi	r3,-4
     b88:	10c8703a 	and	r4,r2,r3
     b8c:	2447c83a 	sub	r3,r4,r17
     b90:	008003c4 	movi	r2,15
     b94:	10fff70e 	bge	r2,r3,b74 <_malloc_r+0xd0>
     b98:	31bfffc4 	addi	r6,r6,-1
     b9c:	32400044 	addi	r9,r6,1
     ba0:	02800074 	movhi	r10,1
     ba4:	52a1e904 	addi	r10,r10,-30812
     ba8:	54000217 	ldw	r16,8(r10)
     bac:	8280a026 	beq	r16,r10,e30 <_malloc_r+0x38c>
     bb0:	80800117 	ldw	r2,4(r16)
     bb4:	00ffff04 	movi	r3,-4
     bb8:	10ca703a 	and	r5,r2,r3
     bbc:	2c4dc83a 	sub	r6,r5,r17
     bc0:	008003c4 	movi	r2,15
     bc4:	11808316 	blt	r2,r6,dd4 <_malloc_r+0x330>
     bc8:	52800315 	stw	r10,12(r10)
     bcc:	52800215 	stw	r10,8(r10)
     bd0:	30002916 	blt	r6,zero,c78 <_malloc_r+0x1d4>
     bd4:	8147883a 	add	r3,r16,r5
     bd8:	18800117 	ldw	r2,4(r3)
     bdc:	9009883a 	mov	r4,r18
     be0:	10800054 	ori	r2,r2,1
     be4:	18800115 	stw	r2,4(r3)
     be8:	00072080 	call	7208 <__malloc_unlock>
     bec:	80c00204 	addi	r3,r16,8
     bf0:	003fc006 	br	af4 <_malloc_r+0x50>
     bf4:	02c00074 	movhi	r11,1
     bf8:	5ae1e704 	addi	r11,r11,-30820
     bfc:	8ac5883a 	add	r2,r17,r11
     c00:	14000317 	ldw	r16,12(r2)
     c04:	580f883a 	mov	r7,r11
     c08:	8806d0fa 	srli	r3,r17,3
     c0c:	14006c26 	beq	r2,r16,dc0 <_malloc_r+0x31c>
     c10:	80c00117 	ldw	r3,4(r16)
     c14:	00bfff04 	movi	r2,-4
     c18:	81800317 	ldw	r6,12(r16)
     c1c:	1886703a 	and	r3,r3,r2
     c20:	80c7883a 	add	r3,r16,r3
     c24:	18800117 	ldw	r2,4(r3)
     c28:	81400217 	ldw	r5,8(r16)
     c2c:	9009883a 	mov	r4,r18
     c30:	10800054 	ori	r2,r2,1
     c34:	18800115 	stw	r2,4(r3)
     c38:	31400215 	stw	r5,8(r6)
     c3c:	29800315 	stw	r6,12(r5)
     c40:	00072080 	call	7208 <__malloc_unlock>
     c44:	80c00204 	addi	r3,r16,8
     c48:	003faa06 	br	af4 <_malloc_r+0x50>
     c4c:	00800104 	movi	r2,4
     c50:	10c0052e 	bgeu	r2,r3,c68 <_malloc_r+0x1c4>
     c54:	00800504 	movi	r2,20
     c58:	10c07836 	bltu	r2,r3,e3c <_malloc_r+0x398>
     c5c:	198016c4 	addi	r6,r3,91
     c60:	300490fa 	slli	r2,r6,3
     c64:	003fbc06 	br	b58 <_malloc_r+0xb4>
     c68:	8804d1ba 	srli	r2,r17,6
     c6c:	11800e04 	addi	r6,r2,56
     c70:	300490fa 	slli	r2,r6,3
     c74:	003fb806 	br	b58 <_malloc_r+0xb4>
     c78:	00807fc4 	movi	r2,511
     c7c:	1140bb36 	bltu	r2,r5,f6c <_malloc_r+0x4c8>
     c80:	2806d0fa 	srli	r3,r5,3
     c84:	573ffe04 	addi	fp,r10,-8
     c88:	00800044 	movi	r2,1
     c8c:	180890fa 	slli	r4,r3,3
     c90:	1807d0ba 	srai	r3,r3,2
     c94:	e1c00117 	ldw	r7,4(fp)
     c98:	5909883a 	add	r4,r11,r4
     c9c:	21400217 	ldw	r5,8(r4)
     ca0:	10c4983a 	sll	r2,r2,r3
     ca4:	81000315 	stw	r4,12(r16)
     ca8:	81400215 	stw	r5,8(r16)
     cac:	388eb03a 	or	r7,r7,r2
     cb0:	2c000315 	stw	r16,12(r5)
     cb4:	24000215 	stw	r16,8(r4)
     cb8:	e1c00115 	stw	r7,4(fp)
     cbc:	4807883a 	mov	r3,r9
     cc0:	4800cd16 	blt	r9,zero,ff8 <_malloc_r+0x554>
     cc4:	1807d0ba 	srai	r3,r3,2
     cc8:	00800044 	movi	r2,1
     ccc:	10c8983a 	sll	r4,r2,r3
     cd0:	39004436 	bltu	r7,r4,de4 <_malloc_r+0x340>
     cd4:	21c4703a 	and	r2,r4,r7
     cd8:	10000a1e 	bne	r2,zero,d04 <_malloc_r+0x260>
     cdc:	2109883a 	add	r4,r4,r4
     ce0:	00bfff04 	movi	r2,-4
     ce4:	4884703a 	and	r2,r9,r2
     ce8:	3906703a 	and	r3,r7,r4
     cec:	12400104 	addi	r9,r2,4
     cf0:	1800041e 	bne	r3,zero,d04 <_malloc_r+0x260>
     cf4:	2109883a 	add	r4,r4,r4
     cf8:	3904703a 	and	r2,r7,r4
     cfc:	4a400104 	addi	r9,r9,4
     d00:	103ffc26 	beq	r2,zero,cf4 <_malloc_r+0x250>
     d04:	480490fa 	slli	r2,r9,3
     d08:	4819883a 	mov	r12,r9
     d0c:	023fff04 	movi	r8,-4
     d10:	589b883a 	add	r13,r11,r2
     d14:	6807883a 	mov	r3,r13
     d18:	014003c4 	movi	r5,15
     d1c:	1c000317 	ldw	r16,12(r3)
     d20:	1c00041e 	bne	r3,r16,d34 <_malloc_r+0x290>
     d24:	0000a706 	br	fc4 <_malloc_r+0x520>
     d28:	3000ab0e 	bge	r6,zero,fd8 <_malloc_r+0x534>
     d2c:	84000317 	ldw	r16,12(r16)
     d30:	1c00a426 	beq	r3,r16,fc4 <_malloc_r+0x520>
     d34:	80800117 	ldw	r2,4(r16)
     d38:	1204703a 	and	r2,r2,r8
     d3c:	144dc83a 	sub	r6,r2,r17
     d40:	29bff90e 	bge	r5,r6,d28 <_malloc_r+0x284>
     d44:	81000317 	ldw	r4,12(r16)
     d48:	80c00217 	ldw	r3,8(r16)
     d4c:	89400054 	ori	r5,r17,1
     d50:	8445883a 	add	r2,r16,r17
     d54:	20c00215 	stw	r3,8(r4)
     d58:	19000315 	stw	r4,12(r3)
     d5c:	81400115 	stw	r5,4(r16)
     d60:	1187883a 	add	r3,r2,r6
     d64:	31000054 	ori	r4,r6,1
     d68:	50800315 	stw	r2,12(r10)
     d6c:	50800215 	stw	r2,8(r10)
     d70:	19800015 	stw	r6,0(r3)
     d74:	11000115 	stw	r4,4(r2)
     d78:	12800215 	stw	r10,8(r2)
     d7c:	12800315 	stw	r10,12(r2)
     d80:	9009883a 	mov	r4,r18
     d84:	00072080 	call	7208 <__malloc_unlock>
     d88:	80c00204 	addi	r3,r16,8
     d8c:	003f5906 	br	af4 <_malloc_r+0x50>
     d90:	8109883a 	add	r4,r16,r4
     d94:	20800117 	ldw	r2,4(r4)
     d98:	80c00217 	ldw	r3,8(r16)
     d9c:	81400317 	ldw	r5,12(r16)
     da0:	10800054 	ori	r2,r2,1
     da4:	20800115 	stw	r2,4(r4)
     da8:	28c00215 	stw	r3,8(r5)
     dac:	19400315 	stw	r5,12(r3)
     db0:	9009883a 	mov	r4,r18
     db4:	00072080 	call	7208 <__malloc_unlock>
     db8:	80c00204 	addi	r3,r16,8
     dbc:	003f4d06 	br	af4 <_malloc_r+0x50>
     dc0:	80800204 	addi	r2,r16,8
     dc4:	14000317 	ldw	r16,12(r2)
     dc8:	143f911e 	bne	r2,r16,c10 <_malloc_r+0x16c>
     dcc:	1a400084 	addi	r9,r3,2
     dd0:	003f7306 	br	ba0 <_malloc_r+0xfc>
     dd4:	88c00054 	ori	r3,r17,1
     dd8:	8445883a 	add	r2,r16,r17
     ddc:	80c00115 	stw	r3,4(r16)
     de0:	003fdf06 	br	d60 <_malloc_r+0x2bc>
     de4:	e4000217 	ldw	r16,8(fp)
     de8:	00bfff04 	movi	r2,-4
     dec:	80c00117 	ldw	r3,4(r16)
     df0:	802d883a 	mov	r22,r16
     df4:	18aa703a 	and	r21,r3,r2
     df8:	ac401636 	bltu	r21,r17,e54 <_malloc_r+0x3b0>
     dfc:	ac49c83a 	sub	r4,r21,r17
     e00:	008003c4 	movi	r2,15
     e04:	1100130e 	bge	r2,r4,e54 <_malloc_r+0x3b0>
     e08:	88800054 	ori	r2,r17,1
     e0c:	8447883a 	add	r3,r16,r17
     e10:	80800115 	stw	r2,4(r16)
     e14:	20800054 	ori	r2,r4,1
     e18:	18800115 	stw	r2,4(r3)
     e1c:	e0c00215 	stw	r3,8(fp)
     e20:	9009883a 	mov	r4,r18
     e24:	00072080 	call	7208 <__malloc_unlock>
     e28:	80c00204 	addi	r3,r16,8
     e2c:	003f3106 	br	af4 <_malloc_r+0x50>
     e30:	39c00117 	ldw	r7,4(r7)
     e34:	573ffe04 	addi	fp,r10,-8
     e38:	003fa006 	br	cbc <_malloc_r+0x218>
     e3c:	00801504 	movi	r2,84
     e40:	10c06736 	bltu	r2,r3,fe0 <_malloc_r+0x53c>
     e44:	8804d33a 	srli	r2,r17,12
     e48:	11801b84 	addi	r6,r2,110
     e4c:	300490fa 	slli	r2,r6,3
     e50:	003f4106 	br	b58 <_malloc_r+0xb4>
     e54:	d0a6cd17 	ldw	r2,-25804(gp)
     e58:	d0e00217 	ldw	r3,-32760(gp)
     e5c:	053fffc4 	movi	r20,-1
     e60:	10800404 	addi	r2,r2,16
     e64:	88a7883a 	add	r19,r17,r2
     e68:	1d000326 	beq	r3,r20,e78 <_malloc_r+0x3d4>
     e6c:	98c3ffc4 	addi	r3,r19,4095
     e70:	00bc0004 	movi	r2,-4096
     e74:	18a6703a 	and	r19,r3,r2
     e78:	9009883a 	mov	r4,r18
     e7c:	980b883a 	mov	r5,r19
     e80:	00011e40 	call	11e4 <_sbrk_r>
     e84:	1009883a 	mov	r4,r2
     e88:	15000426 	beq	r2,r20,e9c <_malloc_r+0x3f8>
     e8c:	854b883a 	add	r5,r16,r21
     e90:	1029883a 	mov	r20,r2
     e94:	11405a2e 	bgeu	r2,r5,1000 <_malloc_r+0x55c>
     e98:	87000c26 	beq	r16,fp,ecc <_malloc_r+0x428>
     e9c:	e4000217 	ldw	r16,8(fp)
     ea0:	80c00117 	ldw	r3,4(r16)
     ea4:	00bfff04 	movi	r2,-4
     ea8:	1884703a 	and	r2,r3,r2
     eac:	14400336 	bltu	r2,r17,ebc <_malloc_r+0x418>
     eb0:	1449c83a 	sub	r4,r2,r17
     eb4:	008003c4 	movi	r2,15
     eb8:	113fd316 	blt	r2,r4,e08 <_malloc_r+0x364>
     ebc:	9009883a 	mov	r4,r18
     ec0:	00072080 	call	7208 <__malloc_unlock>
     ec4:	0007883a 	mov	r3,zero
     ec8:	003f0a06 	br	af4 <_malloc_r+0x50>
     ecc:	05c00074 	movhi	r23,1
     ed0:	bdef6d04 	addi	r23,r23,-16972
     ed4:	b8800017 	ldw	r2,0(r23)
     ed8:	988d883a 	add	r6,r19,r2
     edc:	b9800015 	stw	r6,0(r23)
     ee0:	d0e00217 	ldw	r3,-32760(gp)
     ee4:	00bfffc4 	movi	r2,-1
     ee8:	18808e26 	beq	r3,r2,1124 <_malloc_r+0x680>
     eec:	2145c83a 	sub	r2,r4,r5
     ef0:	3085883a 	add	r2,r6,r2
     ef4:	b8800015 	stw	r2,0(r23)
     ef8:	20c001cc 	andi	r3,r4,7
     efc:	18005f1e 	bne	r3,zero,107c <_malloc_r+0x5d8>
     f00:	000b883a 	mov	r5,zero
     f04:	a4c5883a 	add	r2,r20,r19
     f08:	1083ffcc 	andi	r2,r2,4095
     f0c:	00c40004 	movi	r3,4096
     f10:	1887c83a 	sub	r3,r3,r2
     f14:	28e7883a 	add	r19,r5,r3
     f18:	9009883a 	mov	r4,r18
     f1c:	980b883a 	mov	r5,r19
     f20:	00011e40 	call	11e4 <_sbrk_r>
     f24:	1007883a 	mov	r3,r2
     f28:	00bfffc4 	movi	r2,-1
     f2c:	18807a26 	beq	r3,r2,1118 <_malloc_r+0x674>
     f30:	1d05c83a 	sub	r2,r3,r20
     f34:	9885883a 	add	r2,r19,r2
     f38:	10c00054 	ori	r3,r2,1
     f3c:	b8800017 	ldw	r2,0(r23)
     f40:	a021883a 	mov	r16,r20
     f44:	a0c00115 	stw	r3,4(r20)
     f48:	9885883a 	add	r2,r19,r2
     f4c:	b8800015 	stw	r2,0(r23)
     f50:	e5000215 	stw	r20,8(fp)
     f54:	b7003626 	beq	r22,fp,1030 <_malloc_r+0x58c>
     f58:	018003c4 	movi	r6,15
     f5c:	35404b36 	bltu	r6,r21,108c <_malloc_r+0x5e8>
     f60:	00800044 	movi	r2,1
     f64:	a0800115 	stw	r2,4(r20)
     f68:	003fcd06 	br	ea0 <_malloc_r+0x3fc>
     f6c:	2808d27a 	srli	r4,r5,9
     f70:	2000371e 	bne	r4,zero,1050 <_malloc_r+0x5ac>
     f74:	2808d0fa 	srli	r4,r5,3
     f78:	200690fa 	slli	r3,r4,3
     f7c:	1ad1883a 	add	r8,r3,r11
     f80:	41800217 	ldw	r6,8(r8)
     f84:	41805b26 	beq	r8,r6,10f4 <_malloc_r+0x650>
     f88:	30800117 	ldw	r2,4(r6)
     f8c:	00ffff04 	movi	r3,-4
     f90:	10c4703a 	and	r2,r2,r3
     f94:	2880022e 	bgeu	r5,r2,fa0 <_malloc_r+0x4fc>
     f98:	31800217 	ldw	r6,8(r6)
     f9c:	41bffa1e 	bne	r8,r6,f88 <_malloc_r+0x4e4>
     fa0:	32000317 	ldw	r8,12(r6)
     fa4:	39c00117 	ldw	r7,4(r7)
     fa8:	82000315 	stw	r8,12(r16)
     fac:	81800215 	stw	r6,8(r16)
     fb0:	07000074 	movhi	fp,1
     fb4:	e721e704 	addi	fp,fp,-30820
     fb8:	34000315 	stw	r16,12(r6)
     fbc:	44000215 	stw	r16,8(r8)
     fc0:	003f3e06 	br	cbc <_malloc_r+0x218>
     fc4:	63000044 	addi	r12,r12,1
     fc8:	608000cc 	andi	r2,r12,3
     fcc:	10005d26 	beq	r2,zero,1144 <_malloc_r+0x6a0>
     fd0:	18c00204 	addi	r3,r3,8
     fd4:	003f5106 	br	d1c <_malloc_r+0x278>
     fd8:	8089883a 	add	r4,r16,r2
     fdc:	003f6d06 	br	d94 <_malloc_r+0x2f0>
     fe0:	00805504 	movi	r2,340
     fe4:	10c02036 	bltu	r2,r3,1068 <_malloc_r+0x5c4>
     fe8:	8804d3fa 	srli	r2,r17,15
     fec:	11801dc4 	addi	r6,r2,119
     ff0:	300490fa 	slli	r2,r6,3
     ff4:	003ed806 	br	b58 <_malloc_r+0xb4>
     ff8:	48c000c4 	addi	r3,r9,3
     ffc:	003f3106 	br	cc4 <_malloc_r+0x220>
    1000:	05c00074 	movhi	r23,1
    1004:	bdef6d04 	addi	r23,r23,-16972
    1008:	b8800017 	ldw	r2,0(r23)
    100c:	988d883a 	add	r6,r19,r2
    1010:	b9800015 	stw	r6,0(r23)
    1014:	293fb21e 	bne	r5,r4,ee0 <_malloc_r+0x43c>
    1018:	2083ffcc 	andi	r2,r4,4095
    101c:	103fb01e 	bne	r2,zero,ee0 <_malloc_r+0x43c>
    1020:	e4000217 	ldw	r16,8(fp)
    1024:	9d45883a 	add	r2,r19,r21
    1028:	10800054 	ori	r2,r2,1
    102c:	80800115 	stw	r2,4(r16)
    1030:	b8c00017 	ldw	r3,0(r23)
    1034:	d0a6ce17 	ldw	r2,-25800(gp)
    1038:	10c0012e 	bgeu	r2,r3,1040 <_malloc_r+0x59c>
    103c:	d0e6ce15 	stw	r3,-25800(gp)
    1040:	d0a6cf17 	ldw	r2,-25796(gp)
    1044:	10ff962e 	bgeu	r2,r3,ea0 <_malloc_r+0x3fc>
    1048:	d0e6cf15 	stw	r3,-25796(gp)
    104c:	003f9406 	br	ea0 <_malloc_r+0x3fc>
    1050:	00800104 	movi	r2,4
    1054:	11001e36 	bltu	r2,r4,10d0 <_malloc_r+0x62c>
    1058:	2804d1ba 	srli	r2,r5,6
    105c:	11000e04 	addi	r4,r2,56
    1060:	200690fa 	slli	r3,r4,3
    1064:	003fc506 	br	f7c <_malloc_r+0x4d8>
    1068:	00815504 	movi	r2,1364
    106c:	10c01d2e 	bgeu	r2,r3,10e4 <_malloc_r+0x640>
    1070:	01801f84 	movi	r6,126
    1074:	0080fc04 	movi	r2,1008
    1078:	003eb706 	br	b58 <_malloc_r+0xb4>
    107c:	00800204 	movi	r2,8
    1080:	10cbc83a 	sub	r5,r2,r3
    1084:	2169883a 	add	r20,r4,r5
    1088:	003f9e06 	br	f04 <_malloc_r+0x460>
    108c:	00bffe04 	movi	r2,-8
    1090:	a93ffd04 	addi	r4,r21,-12
    1094:	2088703a 	and	r4,r4,r2
    1098:	b10b883a 	add	r5,r22,r4
    109c:	00c00144 	movi	r3,5
    10a0:	28c00215 	stw	r3,8(r5)
    10a4:	28c00115 	stw	r3,4(r5)
    10a8:	b0800117 	ldw	r2,4(r22)
    10ac:	1080004c 	andi	r2,r2,1
    10b0:	2084b03a 	or	r2,r4,r2
    10b4:	b0800115 	stw	r2,4(r22)
    10b8:	313fdd2e 	bgeu	r6,r4,1030 <_malloc_r+0x58c>
    10bc:	b1400204 	addi	r5,r22,8
    10c0:	9009883a 	mov	r4,r18
    10c4:	00032680 	call	3268 <_free_r>
    10c8:	e4000217 	ldw	r16,8(fp)
    10cc:	003fd806 	br	1030 <_malloc_r+0x58c>
    10d0:	00800504 	movi	r2,20
    10d4:	11001536 	bltu	r2,r4,112c <_malloc_r+0x688>
    10d8:	210016c4 	addi	r4,r4,91
    10dc:	200690fa 	slli	r3,r4,3
    10e0:	003fa606 	br	f7c <_malloc_r+0x4d8>
    10e4:	8804d4ba 	srli	r2,r17,18
    10e8:	11801f04 	addi	r6,r2,124
    10ec:	300490fa 	slli	r2,r6,3
    10f0:	003e9906 	br	b58 <_malloc_r+0xb4>
    10f4:	2009d0ba 	srai	r4,r4,2
    10f8:	01400074 	movhi	r5,1
    10fc:	2961e704 	addi	r5,r5,-30820
    1100:	00c00044 	movi	r3,1
    1104:	28800117 	ldw	r2,4(r5)
    1108:	1906983a 	sll	r3,r3,r4
    110c:	10c4b03a 	or	r2,r2,r3
    1110:	28800115 	stw	r2,4(r5)
    1114:	003fa306 	br	fa4 <_malloc_r+0x500>
    1118:	0027883a 	mov	r19,zero
    111c:	00c00044 	movi	r3,1
    1120:	003f8606 	br	f3c <_malloc_r+0x498>
    1124:	d1200215 	stw	r4,-32760(gp)
    1128:	003f7306 	br	ef8 <_malloc_r+0x454>
    112c:	00801504 	movi	r2,84
    1130:	11001936 	bltu	r2,r4,1198 <_malloc_r+0x6f4>
    1134:	2804d33a 	srli	r2,r5,12
    1138:	11001b84 	addi	r4,r2,110
    113c:	200690fa 	slli	r3,r4,3
    1140:	003f8e06 	br	f7c <_malloc_r+0x4d8>
    1144:	480b883a 	mov	r5,r9
    1148:	6807883a 	mov	r3,r13
    114c:	288000cc 	andi	r2,r5,3
    1150:	18fffe04 	addi	r3,r3,-8
    1154:	297fffc4 	addi	r5,r5,-1
    1158:	10001526 	beq	r2,zero,11b0 <_malloc_r+0x70c>
    115c:	18800217 	ldw	r2,8(r3)
    1160:	10fffa26 	beq	r2,r3,114c <_malloc_r+0x6a8>
    1164:	2109883a 	add	r4,r4,r4
    1168:	393f1e36 	bltu	r7,r4,de4 <_malloc_r+0x340>
    116c:	203f1d26 	beq	r4,zero,de4 <_malloc_r+0x340>
    1170:	21c4703a 	and	r2,r4,r7
    1174:	10000226 	beq	r2,zero,1180 <_malloc_r+0x6dc>
    1178:	6013883a 	mov	r9,r12
    117c:	003ee106 	br	d04 <_malloc_r+0x260>
    1180:	2109883a 	add	r4,r4,r4
    1184:	3904703a 	and	r2,r7,r4
    1188:	63000104 	addi	r12,r12,4
    118c:	103ffc26 	beq	r2,zero,1180 <_malloc_r+0x6dc>
    1190:	6013883a 	mov	r9,r12
    1194:	003edb06 	br	d04 <_malloc_r+0x260>
    1198:	00805504 	movi	r2,340
    119c:	11000836 	bltu	r2,r4,11c0 <_malloc_r+0x71c>
    11a0:	2804d3fa 	srli	r2,r5,15
    11a4:	11001dc4 	addi	r4,r2,119
    11a8:	200690fa 	slli	r3,r4,3
    11ac:	003f7306 	br	f7c <_malloc_r+0x4d8>
    11b0:	0104303a 	nor	r2,zero,r4
    11b4:	388e703a 	and	r7,r7,r2
    11b8:	e1c00115 	stw	r7,4(fp)
    11bc:	003fe906 	br	1164 <_malloc_r+0x6c0>
    11c0:	00815504 	movi	r2,1364
    11c4:	1100032e 	bgeu	r2,r4,11d4 <_malloc_r+0x730>
    11c8:	01001f84 	movi	r4,126
    11cc:	00c0fc04 	movi	r3,1008
    11d0:	003f6a06 	br	f7c <_malloc_r+0x4d8>
    11d4:	2804d4ba 	srli	r2,r5,18
    11d8:	11001f04 	addi	r4,r2,124
    11dc:	200690fa 	slli	r3,r4,3
    11e0:	003f6606 	br	f7c <_malloc_r+0x4d8>

000011e4 <_sbrk_r>:
    11e4:	defffd04 	addi	sp,sp,-12
    11e8:	dc000015 	stw	r16,0(sp)
    11ec:	04000074 	movhi	r16,1
    11f0:	842f6604 	addi	r16,r16,-17000
    11f4:	dc400115 	stw	r17,4(sp)
    11f8:	80000015 	stw	zero,0(r16)
    11fc:	2023883a 	mov	r17,r4
    1200:	2809883a 	mov	r4,r5
    1204:	dfc00215 	stw	ra,8(sp)
    1208:	000720c0 	call	720c <sbrk>
    120c:	1007883a 	mov	r3,r2
    1210:	00bfffc4 	movi	r2,-1
    1214:	18800626 	beq	r3,r2,1230 <_sbrk_r+0x4c>
    1218:	1805883a 	mov	r2,r3
    121c:	dfc00217 	ldw	ra,8(sp)
    1220:	dc400117 	ldw	r17,4(sp)
    1224:	dc000017 	ldw	r16,0(sp)
    1228:	dec00304 	addi	sp,sp,12
    122c:	f800283a 	ret
    1230:	80800017 	ldw	r2,0(r16)
    1234:	103ff826 	beq	r2,zero,1218 <_sbrk_r+0x34>
    1238:	88800015 	stw	r2,0(r17)
    123c:	1805883a 	mov	r2,r3
    1240:	dfc00217 	ldw	ra,8(sp)
    1244:	dc400117 	ldw	r17,4(sp)
    1248:	dc000017 	ldw	r16,0(sp)
    124c:	dec00304 	addi	sp,sp,12
    1250:	f800283a 	ret

00001254 <critical_factorization>:
    1254:	03000044 	movi	r12,1
    1258:	6013883a 	mov	r9,r12
    125c:	037fffc4 	movi	r13,-1
    1260:	0011883a 	mov	r8,zero
    1264:	6905883a 	add	r2,r13,r4
    1268:	424f883a 	add	r7,r8,r9
    126c:	1245883a 	add	r2,r2,r9
    1270:	21c7883a 	add	r3,r4,r7
    1274:	39400b2e 	bgeu	r7,r5,12a4 <critical_factorization+0x50>
    1278:	18c00003 	ldbu	r3,0(r3)
    127c:	10800003 	ldbu	r2,0(r2)
    1280:	1880232e 	bgeu	r3,r2,1310 <critical_factorization+0xbc>
    1284:	3b59c83a 	sub	r12,r7,r13
    1288:	02400044 	movi	r9,1
    128c:	3811883a 	mov	r8,r7
    1290:	6905883a 	add	r2,r13,r4
    1294:	424f883a 	add	r7,r8,r9
    1298:	1245883a 	add	r2,r2,r9
    129c:	21c7883a 	add	r3,r4,r7
    12a0:	397ff536 	bltu	r7,r5,1278 <critical_factorization+0x24>
    12a4:	02c00044 	movi	r11,1
    12a8:	5815883a 	mov	r10,r11
    12ac:	027fffc4 	movi	r9,-1
    12b0:	0011883a 	mov	r8,zero
    12b4:	4905883a 	add	r2,r9,r4
    12b8:	428f883a 	add	r7,r8,r10
    12bc:	33000015 	stw	r12,0(r6)
    12c0:	1285883a 	add	r2,r2,r10
    12c4:	3907883a 	add	r3,r7,r4
    12c8:	39400b2e 	bgeu	r7,r5,12f8 <critical_factorization+0xa4>
    12cc:	18c00003 	ldbu	r3,0(r3)
    12d0:	10800003 	ldbu	r2,0(r2)
    12d4:	10c01a2e 	bgeu	r2,r3,1340 <critical_factorization+0xec>
    12d8:	3a57c83a 	sub	r11,r7,r9
    12dc:	02800044 	movi	r10,1
    12e0:	3811883a 	mov	r8,r7
    12e4:	4905883a 	add	r2,r9,r4
    12e8:	428f883a 	add	r7,r8,r10
    12ec:	1285883a 	add	r2,r2,r10
    12f0:	3907883a 	add	r3,r7,r4
    12f4:	397ff536 	bltu	r7,r5,12cc <critical_factorization+0x78>
    12f8:	48c00044 	addi	r3,r9,1
    12fc:	68800044 	addi	r2,r13,1
    1300:	18800236 	bltu	r3,r2,130c <critical_factorization+0xb8>
    1304:	32c00015 	stw	r11,0(r6)
    1308:	1805883a 	mov	r2,r3
    130c:	f800283a 	ret
    1310:	18800626 	beq	r3,r2,132c <critical_factorization+0xd8>
    1314:	03000044 	movi	r12,1
    1318:	430f883a 	add	r7,r8,r12
    131c:	401b883a 	mov	r13,r8
    1320:	6013883a 	mov	r9,r12
    1324:	3811883a 	mov	r8,r7
    1328:	003fd906 	br	1290 <critical_factorization+0x3c>
    132c:	4b001026 	beq	r9,r12,1370 <critical_factorization+0x11c>
    1330:	400f883a 	mov	r7,r8
    1334:	4a400044 	addi	r9,r9,1
    1338:	3811883a 	mov	r8,r7
    133c:	003fd406 	br	1290 <critical_factorization+0x3c>
    1340:	18800626 	beq	r3,r2,135c <critical_factorization+0x108>
    1344:	02c00044 	movi	r11,1
    1348:	42cf883a 	add	r7,r8,r11
    134c:	4013883a 	mov	r9,r8
    1350:	5815883a 	mov	r10,r11
    1354:	3811883a 	mov	r8,r7
    1358:	003fe206 	br	12e4 <critical_factorization+0x90>
    135c:	52c00726 	beq	r10,r11,137c <critical_factorization+0x128>
    1360:	400f883a 	mov	r7,r8
    1364:	52800044 	addi	r10,r10,1
    1368:	3811883a 	mov	r8,r7
    136c:	003fdd06 	br	12e4 <critical_factorization+0x90>
    1370:	02400044 	movi	r9,1
    1374:	3811883a 	mov	r8,r7
    1378:	003fc506 	br	1290 <critical_factorization+0x3c>
    137c:	02800044 	movi	r10,1
    1380:	3811883a 	mov	r8,r7
    1384:	003fd706 	br	12e4 <critical_factorization+0x90>

00001388 <strstr>:
    1388:	defef404 	addi	sp,sp,-1072
    138c:	dd810815 	stw	r22,1056(sp)
    1390:	dc410315 	stw	r17,1036(sp)
    1394:	dfc10b15 	stw	ra,1068(sp)
    1398:	df010a15 	stw	fp,1064(sp)
    139c:	ddc10915 	stw	r23,1060(sp)
    13a0:	dd410715 	stw	r21,1052(sp)
    13a4:	dd010615 	stw	r20,1048(sp)
    13a8:	dcc10515 	stw	r19,1044(sp)
    13ac:	dc810415 	stw	r18,1040(sp)
    13b0:	dc010215 	stw	r16,1032(sp)
    13b4:	2023883a 	mov	r17,r4
    13b8:	21000007 	ldb	r4,0(r4)
    13bc:	282d883a 	mov	r22,r5
    13c0:	2000d026 	beq	r4,zero,1704 <strstr+0x37c>
    13c4:	28800007 	ldb	r2,0(r5)
    13c8:	10001026 	beq	r2,zero,140c <strstr+0x84>
    13cc:	2821883a 	mov	r16,r5
    13d0:	8807883a 	mov	r3,r17
    13d4:	01400044 	movi	r5,1
    13d8:	00000206 	br	13e4 <strstr+0x5c>
    13dc:	80800007 	ldb	r2,0(r16)
    13e0:	10000826 	beq	r2,zero,1404 <strstr+0x7c>
    13e4:	18c00044 	addi	r3,r3,1
    13e8:	2085003a 	cmpeq	r2,r4,r2
    13ec:	19000007 	ldb	r4,0(r3)
    13f0:	288a703a 	and	r5,r5,r2
    13f4:	84000044 	addi	r16,r16,1
    13f8:	203ff81e 	bne	r4,zero,13dc <strstr+0x54>
    13fc:	80800007 	ldb	r2,0(r16)
    1400:	1000611e 	bne	r2,zero,1588 <strstr+0x200>
    1404:	2805003a 	cmpeq	r2,r5,zero
    1408:	10000e1e 	bne	r2,zero,1444 <strstr+0xbc>
    140c:	8825883a 	mov	r18,r17
    1410:	9005883a 	mov	r2,r18
    1414:	dfc10b17 	ldw	ra,1068(sp)
    1418:	df010a17 	ldw	fp,1064(sp)
    141c:	ddc10917 	ldw	r23,1060(sp)
    1420:	dd810817 	ldw	r22,1056(sp)
    1424:	dd410717 	ldw	r21,1052(sp)
    1428:	dd010617 	ldw	r20,1048(sp)
    142c:	dcc10517 	ldw	r19,1044(sp)
    1430:	dc810417 	ldw	r18,1040(sp)
    1434:	dc410317 	ldw	r17,1036(sp)
    1438:	dc010217 	ldw	r16,1032(sp)
    143c:	dec10c04 	addi	sp,sp,1072
    1440:	f800283a 	ret
    1444:	b1400007 	ldb	r5,0(r22)
    1448:	89000044 	addi	r4,r17,1
    144c:	04c00044 	movi	r19,1
    1450:	00053cc0 	call	53cc <strchr>
    1454:	1025883a 	mov	r18,r2
    1458:	103fed26 	beq	r2,zero,1410 <strstr+0x88>
    145c:	85a1c83a 	sub	r16,r16,r22
    1460:	84ffeb26 	beq	r16,r19,1410 <strstr+0x88>
    1464:	8c09883a 	add	r4,r17,r16
    1468:	2080492e 	bgeu	r4,r2,1590 <strstr+0x208>
    146c:	9829883a 	mov	r20,r19
    1470:	008007c4 	movi	r2,31
    1474:	14004836 	bltu	r2,r16,1598 <strstr+0x210>
    1478:	b009883a 	mov	r4,r22
    147c:	800b883a 	mov	r5,r16
    1480:	d80d883a 	mov	r6,sp
    1484:	00012540 	call	1254 <critical_factorization>
    1488:	d9400017 	ldw	r5,0(sp)
    148c:	b009883a 	mov	r4,r22
    1490:	100d883a 	mov	r6,r2
    1494:	b14b883a 	add	r5,r22,r5
    1498:	1027883a 	mov	r19,r2
    149c:	000422c0 	call	422c <memcmp>
    14a0:	1000b526 	beq	r2,zero,1778 <strstr+0x3f0>
    14a4:	84efc83a 	sub	r23,r16,r19
    14a8:	9805883a 	mov	r2,r19
    14ac:	9dc0012e 	bgeu	r19,r23,14b4 <strstr+0x12c>
    14b0:	b805883a 	mov	r2,r23
    14b4:	10800044 	addi	r2,r2,1
    14b8:	002b883a 	mov	r21,zero
    14bc:	d8800015 	stw	r2,0(sp)
    14c0:	ac23883a 	add	r17,r21,r16
    14c4:	8d0dc83a 	sub	r6,r17,r20
    14c8:	9509883a 	add	r4,r18,r20
    14cc:	000b883a 	mov	r5,zero
    14d0:	00041480 	call	4148 <memchr>
    14d4:	10002c1e 	bne	r2,zero,1588 <strstr+0x200>
    14d8:	88002b26 	beq	r17,zero,1588 <strstr+0x200>
    14dc:	9c00122e 	bgeu	r19,r16,1528 <strstr+0x1a0>
    14e0:	acc5883a 	add	r2,r21,r19
    14e4:	908b883a 	add	r5,r18,r2
    14e8:	b4c9883a 	add	r4,r22,r19
    14ec:	20c00003 	ldbu	r3,0(r4)
    14f0:	28800003 	ldbu	r2,0(r5)
    14f4:	1881331e 	bne	r3,r2,19c4 <strstr+0x63c>
    14f8:	200d883a 	mov	r6,r4
    14fc:	29400044 	addi	r5,r5,1
    1500:	9809883a 	mov	r4,r19
    1504:	9dcf883a 	add	r7,r19,r23
    1508:	00000506 	br	1520 <strstr+0x198>
    150c:	30c00043 	ldbu	r3,1(r6)
    1510:	28800003 	ldbu	r2,0(r5)
    1514:	31800044 	addi	r6,r6,1
    1518:	29400044 	addi	r5,r5,1
    151c:	10c1161e 	bne	r2,r3,1978 <strstr+0x5f0>
    1520:	21000044 	addi	r4,r4,1
    1524:	21fff91e 	bne	r4,r7,150c <strstr+0x184>
    1528:	01ffffc4 	movi	r7,-1
    152c:	99cd883a 	add	r6,r19,r7
    1530:	31c12726 	beq	r6,r7,19d0 <strstr+0x648>
    1534:	ac91883a 	add	r8,r21,r18
    1538:	b187883a 	add	r3,r22,r6
    153c:	4189883a 	add	r4,r8,r6
    1540:	19400003 	ldbu	r5,0(r3)
    1544:	20800003 	ldbu	r2,0(r4)
    1548:	2881141e 	bne	r5,r2,199c <strstr+0x614>
    154c:	acc5883a 	add	r2,r21,r19
    1550:	9085883a 	add	r2,r18,r2
    1554:	b4c7883a 	add	r3,r22,r19
    1558:	197fff84 	addi	r5,r3,-2
    155c:	113fff84 	addi	r4,r2,-2
    1560:	00000506 	br	1578 <strstr+0x1f0>
    1564:	28c00003 	ldbu	r3,0(r5)
    1568:	20800003 	ldbu	r2,0(r4)
    156c:	297fffc4 	addi	r5,r5,-1
    1570:	213fffc4 	addi	r4,r4,-1
    1574:	10c1091e 	bne	r2,r3,199c <strstr+0x614>
    1578:	31bfffc4 	addi	r6,r6,-1
    157c:	31fff91e 	bne	r6,r7,1564 <strstr+0x1dc>
    1580:	4025883a 	mov	r18,r8
    1584:	003fa206 	br	1410 <strstr+0x88>
    1588:	0025883a 	mov	r18,zero
    158c:	003fa006 	br	1410 <strstr+0x88>
    1590:	20a9c83a 	sub	r20,r4,r2
    1594:	003fb606 	br	1470 <strstr+0xe8>
    1598:	b009883a 	mov	r4,r22
    159c:	800b883a 	mov	r5,r16
    15a0:	d80d883a 	mov	r6,sp
    15a4:	00012540 	call	1254 <critical_factorization>
    15a8:	102b883a 	mov	r21,r2
    15ac:	d8c10104 	addi	r3,sp,1028
    15b0:	d8800104 	addi	r2,sp,4
    15b4:	14000015 	stw	r16,0(r2)
    15b8:	10800104 	addi	r2,r2,4
    15bc:	10fffd1e 	bne	r2,r3,15b4 <strstr+0x22c>
    15c0:	84ffffc4 	addi	r19,r16,-1
    15c4:	b009883a 	mov	r4,r22
    15c8:	9807883a 	mov	r3,r19
    15cc:	017fffc4 	movi	r5,-1
    15d0:	20800003 	ldbu	r2,0(r4)
    15d4:	21000044 	addi	r4,r4,1
    15d8:	1085883a 	add	r2,r2,r2
    15dc:	1085883a 	add	r2,r2,r2
    15e0:	16c5883a 	add	r2,r2,sp
    15e4:	10c00115 	stw	r3,4(r2)
    15e8:	18ffffc4 	addi	r3,r3,-1
    15ec:	197ff81e 	bne	r3,r5,15d0 <strstr+0x248>
    15f0:	d9400017 	ldw	r5,0(sp)
    15f4:	b009883a 	mov	r4,r22
    15f8:	a80d883a 	mov	r6,r21
    15fc:	b14b883a 	add	r5,r22,r5
    1600:	000422c0 	call	422c <memcmp>
    1604:	10004226 	beq	r2,zero,1710 <strstr+0x388>
    1608:	8547c83a 	sub	r3,r16,r21
    160c:	a805883a 	mov	r2,r21
    1610:	a8c0012e 	bgeu	r21,r3,1618 <strstr+0x290>
    1614:	1805883a 	mov	r2,r3
    1618:	10800044 	addi	r2,r2,1
    161c:	002f883a 	mov	r23,zero
    1620:	b579883a 	add	fp,r22,r21
    1624:	d8800015 	stw	r2,0(sp)
    1628:	bc23883a 	add	r17,r23,r16
    162c:	8d0dc83a 	sub	r6,r17,r20
    1630:	9509883a 	add	r4,r18,r20
    1634:	000b883a 	mov	r5,zero
    1638:	00041480 	call	4148 <memchr>
    163c:	103fd21e 	bne	r2,zero,1588 <strstr+0x200>
    1640:	883fd126 	beq	r17,zero,1588 <strstr+0x200>
    1644:	9447883a 	add	r3,r18,r17
    1648:	18bfffc3 	ldbu	r2,-1(r3)
    164c:	1085883a 	add	r2,r2,r2
    1650:	1085883a 	add	r2,r2,r2
    1654:	16c5883a 	add	r2,r2,sp
    1658:	10800117 	ldw	r2,4(r2)
    165c:	1000b61e 	bne	r2,zero,1938 <strstr+0x5b0>
    1660:	acc0102e 	bgeu	r21,r19,16a4 <strstr+0x31c>
    1664:	bd45883a 	add	r2,r23,r21
    1668:	9089883a 	add	r4,r18,r2
    166c:	20c00003 	ldbu	r3,0(r4)
    1670:	e0800003 	ldbu	r2,0(fp)
    1674:	1880af1e 	bne	r3,r2,1934 <strstr+0x5ac>
    1678:	21800044 	addi	r6,r4,1
    167c:	e00b883a 	mov	r5,fp
    1680:	a809883a 	mov	r4,r21
    1684:	00000506 	br	169c <strstr+0x314>
    1688:	28c00043 	ldbu	r3,1(r5)
    168c:	30800003 	ldbu	r2,0(r6)
    1690:	29400044 	addi	r5,r5,1
    1694:	31800044 	addi	r6,r6,1
    1698:	10c0bc1e 	bne	r2,r3,198c <strstr+0x604>
    169c:	21000044 	addi	r4,r4,1
    16a0:	24fff936 	bltu	r4,r19,1688 <strstr+0x300>
    16a4:	01ffffc4 	movi	r7,-1
    16a8:	a9cd883a 	add	r6,r21,r7
    16ac:	31c0cb26 	beq	r6,r7,19dc <strstr+0x654>
    16b0:	bc91883a 	add	r8,r23,r18
    16b4:	b187883a 	add	r3,r22,r6
    16b8:	4189883a 	add	r4,r8,r6
    16bc:	19400003 	ldbu	r5,0(r3)
    16c0:	20800003 	ldbu	r2,0(r4)
    16c4:	2880b91e 	bne	r5,r2,19ac <strstr+0x624>
    16c8:	bd45883a 	add	r2,r23,r21
    16cc:	9085883a 	add	r2,r18,r2
    16d0:	b547883a 	add	r3,r22,r21
    16d4:	197fff84 	addi	r5,r3,-2
    16d8:	113fff84 	addi	r4,r2,-2
    16dc:	00000506 	br	16f4 <strstr+0x36c>
    16e0:	28c00003 	ldbu	r3,0(r5)
    16e4:	20800003 	ldbu	r2,0(r4)
    16e8:	297fffc4 	addi	r5,r5,-1
    16ec:	213fffc4 	addi	r4,r4,-1
    16f0:	10c0ae1e 	bne	r2,r3,19ac <strstr+0x624>
    16f4:	31bfffc4 	addi	r6,r6,-1
    16f8:	31fff91e 	bne	r6,r7,16e0 <strstr+0x358>
    16fc:	4025883a 	mov	r18,r8
    1700:	003f4306 	br	1410 <strstr+0x88>
    1704:	2821883a 	mov	r16,r5
    1708:	01400044 	movi	r5,1
    170c:	003f3b06 	br	13fc <strstr+0x74>
    1710:	a8bfffc4 	addi	r2,r21,-1
    1714:	002f883a 	mov	r23,zero
    1718:	0039883a 	mov	fp,zero
    171c:	d8810115 	stw	r2,1028(sp)
    1720:	bc23883a 	add	r17,r23,r16
    1724:	8d0dc83a 	sub	r6,r17,r20
    1728:	9509883a 	add	r4,r18,r20
    172c:	000b883a 	mov	r5,zero
    1730:	00041480 	call	4148 <memchr>
    1734:	103f941e 	bne	r2,zero,1588 <strstr+0x200>
    1738:	883f9326 	beq	r17,zero,1588 <strstr+0x200>
    173c:	9447883a 	add	r3,r18,r17
    1740:	18bfffc3 	ldbu	r2,-1(r3)
    1744:	1085883a 	add	r2,r2,r2
    1748:	1085883a 	add	r2,r2,r2
    174c:	16c5883a 	add	r2,r2,sp
    1750:	10800117 	ldw	r2,4(r2)
    1754:	10004526 	beq	r2,zero,186c <strstr+0x4e4>
    1758:	e0000426 	beq	fp,zero,176c <strstr+0x3e4>
    175c:	d8c00017 	ldw	r3,0(sp)
    1760:	10c0022e 	bgeu	r2,r3,176c <strstr+0x3e4>
    1764:	80c5c83a 	sub	r2,r16,r3
    1768:	0039883a 	mov	fp,zero
    176c:	b8af883a 	add	r23,r23,r2
    1770:	8829883a 	mov	r20,r17
    1774:	003fea06 	br	1720 <strstr+0x398>
    1778:	002f883a 	mov	r23,zero
    177c:	0023883a 	mov	r17,zero
    1780:	9f3fffc4 	addi	fp,r19,-1
    1784:	bc2b883a 	add	r21,r23,r16
    1788:	ad0dc83a 	sub	r6,r21,r20
    178c:	9509883a 	add	r4,r18,r20
    1790:	000b883a 	mov	r5,zero
    1794:	00041480 	call	4148 <memchr>
    1798:	103f7b1e 	bne	r2,zero,1588 <strstr+0x200>
    179c:	a83f7a26 	beq	r21,zero,1588 <strstr+0x200>
    17a0:	880b883a 	mov	r5,r17
    17a4:	8cc0012e 	bgeu	r17,r19,17ac <strstr+0x424>
    17a8:	980b883a 	mov	r5,r19
    17ac:	2c00112e 	bgeu	r5,r16,17f4 <strstr+0x46c>
    17b0:	b945883a 	add	r2,r23,r5
    17b4:	908f883a 	add	r7,r18,r2
    17b8:	b149883a 	add	r4,r22,r5
    17bc:	20c00003 	ldbu	r3,0(r4)
    17c0:	38800003 	ldbu	r2,0(r7)
    17c4:	1880551e 	bne	r3,r2,191c <strstr+0x594>
    17c8:	200d883a 	mov	r6,r4
    17cc:	39000044 	addi	r4,r7,1
    17d0:	800f883a 	mov	r7,r16
    17d4:	00000506 	br	17ec <strstr+0x464>
    17d8:	30c00043 	ldbu	r3,1(r6)
    17dc:	20800003 	ldbu	r2,0(r4)
    17e0:	31800044 	addi	r6,r6,1
    17e4:	21000044 	addi	r4,r4,1
    17e8:	10c04c1e 	bne	r2,r3,191c <strstr+0x594>
    17ec:	29400044 	addi	r5,r5,1
    17f0:	29fff91e 	bne	r5,r7,17d8 <strstr+0x450>
    17f4:	980f883a 	mov	r7,r19
    17f8:	8cc0152e 	bgeu	r17,r19,1850 <strstr+0x4c8>
    17fc:	bc85883a 	add	r2,r23,r18
    1800:	1705883a 	add	r2,r2,fp
    1804:	b707883a 	add	r3,r22,fp
    1808:	19400003 	ldbu	r5,0(r3)
    180c:	11000003 	ldbu	r4,0(r2)
    1810:	29000f1e 	bne	r5,r4,1850 <strstr+0x4c8>
    1814:	bcc5883a 	add	r2,r23,r19
    1818:	9085883a 	add	r2,r18,r2
    181c:	9d87883a 	add	r3,r19,r22
    1820:	e00f883a 	mov	r7,fp
    1824:	19bfff84 	addi	r6,r3,-2
    1828:	117fff84 	addi	r5,r2,-2
    182c:	89c0082e 	bgeu	r17,r7,1850 <strstr+0x4c8>
    1830:	30c00003 	ldbu	r3,0(r6)
    1834:	28800003 	ldbu	r2,0(r5)
    1838:	31bfffc4 	addi	r6,r6,-1
    183c:	297fffc4 	addi	r5,r5,-1
    1840:	393fffc4 	addi	r4,r7,-1
    1844:	10c0021e 	bne	r2,r3,1850 <strstr+0x4c8>
    1848:	200f883a 	mov	r7,r4
    184c:	89fff836 	bltu	r17,r7,1830 <strstr+0x4a8>
    1850:	88800044 	addi	r2,r17,1
    1854:	38805936 	bltu	r7,r2,19bc <strstr+0x634>
    1858:	d8800017 	ldw	r2,0(sp)
    185c:	a829883a 	mov	r20,r21
    1860:	b8af883a 	add	r23,r23,r2
    1864:	80a3c83a 	sub	r17,r16,r2
    1868:	003fc606 	br	1784 <strstr+0x3fc>
    186c:	e00d883a 	mov	r6,fp
    1870:	e540012e 	bgeu	fp,r21,1878 <strstr+0x4f0>
    1874:	a80d883a 	mov	r6,r21
    1878:	34c0102e 	bgeu	r6,r19,18bc <strstr+0x534>
    187c:	b985883a 	add	r2,r23,r6
    1880:	908f883a 	add	r7,r18,r2
    1884:	b189883a 	add	r4,r22,r6
    1888:	20c00003 	ldbu	r3,0(r4)
    188c:	38800003 	ldbu	r2,0(r7)
    1890:	1880331e 	bne	r3,r2,1960 <strstr+0x5d8>
    1894:	200b883a 	mov	r5,r4
    1898:	39000044 	addi	r4,r7,1
    189c:	00000506 	br	18b4 <strstr+0x52c>
    18a0:	28c00043 	ldbu	r3,1(r5)
    18a4:	20800003 	ldbu	r2,0(r4)
    18a8:	29400044 	addi	r5,r5,1
    18ac:	21000044 	addi	r4,r4,1
    18b0:	10c02b1e 	bne	r2,r3,1960 <strstr+0x5d8>
    18b4:	31800044 	addi	r6,r6,1
    18b8:	34fff936 	bltu	r6,r19,18a0 <strstr+0x518>
    18bc:	a80f883a 	mov	r7,r21
    18c0:	e540202e 	bgeu	fp,r21,1944 <strstr+0x5bc>
    18c4:	d8c10117 	ldw	r3,1028(sp)
    18c8:	bc85883a 	add	r2,r23,r18
    18cc:	10c5883a 	add	r2,r2,r3
    18d0:	1d87883a 	add	r3,r3,r22
    18d4:	19400003 	ldbu	r5,0(r3)
    18d8:	11000003 	ldbu	r4,0(r2)
    18dc:	2900191e 	bne	r5,r4,1944 <strstr+0x5bc>
    18e0:	bd45883a 	add	r2,r23,r21
    18e4:	d9c10117 	ldw	r7,1028(sp)
    18e8:	9085883a 	add	r2,r18,r2
    18ec:	b547883a 	add	r3,r22,r21
    18f0:	19bfff84 	addi	r6,r3,-2
    18f4:	117fff84 	addi	r5,r2,-2
    18f8:	e1c0122e 	bgeu	fp,r7,1944 <strstr+0x5bc>
    18fc:	30c00003 	ldbu	r3,0(r6)
    1900:	28800003 	ldbu	r2,0(r5)
    1904:	31bfffc4 	addi	r6,r6,-1
    1908:	297fffc4 	addi	r5,r5,-1
    190c:	393fffc4 	addi	r4,r7,-1
    1910:	10c00c1e 	bne	r2,r3,1944 <strstr+0x5bc>
    1914:	200f883a 	mov	r7,r4
    1918:	003ff706 	br	18f8 <strstr+0x570>
    191c:	2cc5c83a 	sub	r2,r5,r19
    1920:	10800044 	addi	r2,r2,1
    1924:	b8af883a 	add	r23,r23,r2
    1928:	0023883a 	mov	r17,zero
    192c:	a829883a 	mov	r20,r21
    1930:	003f9406 	br	1784 <strstr+0x3fc>
    1934:	00800044 	movi	r2,1
    1938:	b8af883a 	add	r23,r23,r2
    193c:	8829883a 	mov	r20,r17
    1940:	003f3906 	br	1628 <strstr+0x2a0>
    1944:	e0800044 	addi	r2,fp,1
    1948:	38801c36 	bltu	r7,r2,19bc <strstr+0x634>
    194c:	d8800017 	ldw	r2,0(sp)
    1950:	8829883a 	mov	r20,r17
    1954:	b8af883a 	add	r23,r23,r2
    1958:	80b9c83a 	sub	fp,r16,r2
    195c:	003f7006 	br	1720 <strstr+0x398>
    1960:	3545c83a 	sub	r2,r6,r21
    1964:	10800044 	addi	r2,r2,1
    1968:	b8af883a 	add	r23,r23,r2
    196c:	0039883a 	mov	fp,zero
    1970:	8829883a 	mov	r20,r17
    1974:	003f6a06 	br	1720 <strstr+0x398>
    1978:	24c5c83a 	sub	r2,r4,r19
    197c:	10800044 	addi	r2,r2,1
    1980:	a8ab883a 	add	r21,r21,r2
    1984:	8829883a 	mov	r20,r17
    1988:	003ecd06 	br	14c0 <strstr+0x138>
    198c:	2545c83a 	sub	r2,r4,r21
    1990:	10800044 	addi	r2,r2,1
    1994:	b8af883a 	add	r23,r23,r2
    1998:	003fe806 	br	193c <strstr+0x5b4>
    199c:	d8800017 	ldw	r2,0(sp)
    19a0:	8829883a 	mov	r20,r17
    19a4:	a8ab883a 	add	r21,r21,r2
    19a8:	003ec506 	br	14c0 <strstr+0x138>
    19ac:	d8800017 	ldw	r2,0(sp)
    19b0:	8829883a 	mov	r20,r17
    19b4:	b8af883a 	add	r23,r23,r2
    19b8:	003f1b06 	br	1628 <strstr+0x2a0>
    19bc:	95e5883a 	add	r18,r18,r23
    19c0:	003e9306 	br	1410 <strstr+0x88>
    19c4:	00800044 	movi	r2,1
    19c8:	a8ab883a 	add	r21,r21,r2
    19cc:	003fed06 	br	1984 <strstr+0x5fc>
    19d0:	ac91883a 	add	r8,r21,r18
    19d4:	4025883a 	mov	r18,r8
    19d8:	003e8d06 	br	1410 <strstr+0x88>
    19dc:	bc91883a 	add	r8,r23,r18
    19e0:	4025883a 	mov	r18,r8
    19e4:	003e8a06 	br	1410 <strstr+0x88>

000019e8 <match>:
    19e8:	21800017 	ldw	r6,0(r4)
    19ec:	01c01004 	movi	r7,64
    19f0:	02001684 	movi	r8,90
    19f4:	28800007 	ldb	r2,0(r5)
    19f8:	29400044 	addi	r5,r5,1
    19fc:	10000826 	beq	r2,zero,1a20 <match+0x38>
    1a00:	31800044 	addi	r6,r6,1
    1a04:	30c00007 	ldb	r3,0(r6)
    1a08:	38c0020e 	bge	r7,r3,1a14 <match+0x2c>
    1a0c:	40c00116 	blt	r8,r3,1a14 <match+0x2c>
    1a10:	18c00804 	addi	r3,r3,32
    1a14:	18bff726 	beq	r3,r2,19f4 <match+0xc>
    1a18:	0005883a 	mov	r2,zero
    1a1c:	f800283a 	ret
    1a20:	30800044 	addi	r2,r6,1
    1a24:	20800015 	stw	r2,0(r4)
    1a28:	00800044 	movi	r2,1
    1a2c:	f800283a 	ret

00001a30 <_strtod_r>:
    1a30:	deffd504 	addi	sp,sp,-172
    1a34:	df002915 	stw	fp,164(sp)
    1a38:	dd402615 	stw	r21,152(sp)
    1a3c:	dd002515 	stw	r20,148(sp)
    1a40:	dfc02a15 	stw	ra,168(sp)
    1a44:	ddc02815 	stw	r23,160(sp)
    1a48:	dd802715 	stw	r22,156(sp)
    1a4c:	dcc02415 	stw	r19,144(sp)
    1a50:	dc802315 	stw	r18,140(sp)
    1a54:	dc402215 	stw	r17,136(sp)
    1a58:	dc002115 	stw	r16,132(sp)
    1a5c:	2829883a 	mov	r20,r5
    1a60:	202b883a 	mov	r21,r4
    1a64:	d9801d15 	stw	r6,116(sp)
    1a68:	d8000915 	stw	zero,36(sp)
    1a6c:	d8000a15 	stw	zero,40(sp)
    1a70:	d9400415 	stw	r5,16(sp)
    1a74:	df000904 	addi	fp,sp,36
    1a78:	dc000417 	ldw	r16,16(sp)
    1a7c:	00800b44 	movi	r2,45
    1a80:	80c00003 	ldbu	r3,0(r16)
    1a84:	10c03536 	bltu	r2,r3,1b5c <_strtod_r+0x12c>
    1a88:	18c5883a 	add	r2,r3,r3
    1a8c:	1085883a 	add	r2,r2,r2
    1a90:	00c00034 	movhi	r3,0
    1a94:	18c6a904 	addi	r3,r3,6820
    1a98:	10c5883a 	add	r2,r2,r3
    1a9c:	11000017 	ldw	r4,0(r2)
    1aa0:	2000683a 	jmp	r4
    1aa4:	00001cdc 	xori	zero,zero,115
    1aa8:	00001b5c 	xori	zero,zero,109
    1aac:	00001b5c 	xori	zero,zero,109
    1ab0:	00001b5c 	xori	zero,zero,109
    1ab4:	00001b5c 	xori	zero,zero,109
    1ab8:	00001b5c 	xori	zero,zero,109
    1abc:	00001b5c 	xori	zero,zero,109
    1ac0:	00001b5c 	xori	zero,zero,109
    1ac4:	00001b5c 	xori	zero,zero,109
    1ac8:	00002024 	muli	zero,zero,128
    1acc:	00002024 	muli	zero,zero,128
    1ad0:	00002024 	muli	zero,zero,128
    1ad4:	00002024 	muli	zero,zero,128
    1ad8:	00002024 	muli	zero,zero,128
    1adc:	00001b5c 	xori	zero,zero,109
    1ae0:	00001b5c 	xori	zero,zero,109
    1ae4:	00001b5c 	xori	zero,zero,109
    1ae8:	00001b5c 	xori	zero,zero,109
    1aec:	00001b5c 	xori	zero,zero,109
    1af0:	00001b5c 	xori	zero,zero,109
    1af4:	00001b5c 	xori	zero,zero,109
    1af8:	00001b5c 	xori	zero,zero,109
    1afc:	00001b5c 	xori	zero,zero,109
    1b00:	00001b5c 	xori	zero,zero,109
    1b04:	00001b5c 	xori	zero,zero,109
    1b08:	00001b5c 	xori	zero,zero,109
    1b0c:	00001b5c 	xori	zero,zero,109
    1b10:	00001b5c 	xori	zero,zero,109
    1b14:	00001b5c 	xori	zero,zero,109
    1b18:	00001b5c 	xori	zero,zero,109
    1b1c:	00001b5c 	xori	zero,zero,109
    1b20:	00001b5c 	xori	zero,zero,109
    1b24:	00002024 	muli	zero,zero,128
    1b28:	00001b5c 	xori	zero,zero,109
    1b2c:	00001b5c 	xori	zero,zero,109
    1b30:	00001b5c 	xori	zero,zero,109
    1b34:	00001b5c 	xori	zero,zero,109
    1b38:	00001b5c 	xori	zero,zero,109
    1b3c:	00001b5c 	xori	zero,zero,109
    1b40:	00001b5c 	xori	zero,zero,109
    1b44:	00001b5c 	xori	zero,zero,109
    1b48:	00001b5c 	xori	zero,zero,109
    1b4c:	00001b5c 	xori	zero,zero,109
    1b50:	00002004 	movi	zero,128
    1b54:	00001b5c 	xori	zero,zero,109
    1b58:	00002030 	cmpltui	zero,zero,128
    1b5c:	d8001515 	stw	zero,84(sp)
    1b60:	80c00007 	ldb	r3,0(r16)
    1b64:	00800c04 	movi	r2,48
    1b68:	1880e926 	beq	r3,r2,1f10 <_strtod_r+0x4e0>
    1b6c:	d8001615 	stw	zero,88(sp)
    1b70:	dc001415 	stw	r16,80(sp)
    1b74:	84400007 	ldb	r17,0(r16)
    1b78:	00800bc4 	movi	r2,47
    1b7c:	1443760e 	bge	r2,r17,2958 <_strtod_r+0xf28>
    1b80:	00800e44 	movi	r2,57
    1b84:	14437416 	blt	r2,r17,2958 <_strtod_r+0xf28>
    1b88:	8025883a 	mov	r18,r16
    1b8c:	0027883a 	mov	r19,zero
    1b90:	d8001215 	stw	zero,72(sp)
    1b94:	d8001115 	stw	zero,68(sp)
    1b98:	00000f06 	br	1bd8 <_strtod_r+0x1a8>
    1b9c:	d9001217 	ldw	r4,72(sp)
    1ba0:	01400284 	movi	r5,10
    1ba4:	0006a900 	call	6a90 <__mulsi3>
    1ba8:	1445883a 	add	r2,r2,r17
    1bac:	10bff404 	addi	r2,r2,-48
    1bb0:	d8801215 	stw	r2,72(sp)
    1bb4:	94000044 	addi	r16,r18,1
    1bb8:	dc000415 	stw	r16,16(sp)
    1bbc:	84400007 	ldb	r17,0(r16)
    1bc0:	00800bc4 	movi	r2,47
    1bc4:	9cc00044 	addi	r19,r19,1
    1bc8:	8025883a 	mov	r18,r16
    1bcc:	1440130e 	bge	r2,r17,1c1c <_strtod_r+0x1ec>
    1bd0:	00800e44 	movi	r2,57
    1bd4:	14401116 	blt	r2,r17,1c1c <_strtod_r+0x1ec>
    1bd8:	00800204 	movi	r2,8
    1bdc:	14ffef0e 	bge	r2,r19,1b9c <_strtod_r+0x16c>
    1be0:	008003c4 	movi	r2,15
    1be4:	14fff316 	blt	r2,r19,1bb4 <_strtod_r+0x184>
    1be8:	d9001117 	ldw	r4,68(sp)
    1bec:	01400284 	movi	r5,10
    1bf0:	94000044 	addi	r16,r18,1
    1bf4:	0006a900 	call	6a90 <__mulsi3>
    1bf8:	1445883a 	add	r2,r2,r17
    1bfc:	10bff404 	addi	r2,r2,-48
    1c00:	d8801115 	stw	r2,68(sp)
    1c04:	dc000415 	stw	r16,16(sp)
    1c08:	84400007 	ldb	r17,0(r16)
    1c0c:	00800bc4 	movi	r2,47
    1c10:	9cc00044 	addi	r19,r19,1
    1c14:	8025883a 	mov	r18,r16
    1c18:	147fed16 	blt	r2,r17,1bd0 <_strtod_r+0x1a0>
    1c1c:	00800b84 	movi	r2,46
    1c20:	8880c926 	beq	r17,r2,1f48 <_strtod_r+0x518>
    1c24:	dcc01815 	stw	r19,96(sp)
    1c28:	d8001b15 	stw	zero,108(sp)
    1c2c:	d8001715 	stw	zero,92(sp)
    1c30:	000d883a 	mov	r6,zero
    1c34:	00801944 	movi	r2,101
    1c38:	88802126 	beq	r17,r2,1cc0 <_strtod_r+0x290>
    1c3c:	00801144 	movi	r2,69
    1c40:	88801f26 	beq	r17,r2,1cc0 <_strtod_r+0x290>
    1c44:	d9001817 	ldw	r4,96(sp)
    1c48:	2024c03a 	cmpne	r18,r4,zero
    1c4c:	0009883a 	mov	r4,zero
    1c50:	9000651e 	bne	r18,zero,1de8 <_strtod_r+0x3b8>
    1c54:	3000c926 	beq	r6,zero,1f7c <_strtod_r+0x54c>
    1c58:	d8801d17 	ldw	r2,116(sp)
    1c5c:	10000326 	beq	r2,zero,1c6c <_strtod_r+0x23c>
    1c60:	d8800417 	ldw	r2,16(sp)
    1c64:	d8c01d17 	ldw	r3,116(sp)
    1c68:	18800015 	stw	r2,0(r3)
    1c6c:	d9001517 	ldw	r4,84(sp)
    1c70:	2005003a 	cmpeq	r2,r4,zero
    1c74:	10001c1e 	bne	r2,zero,1ce8 <_strtod_r+0x2b8>
    1c78:	e0800017 	ldw	r2,0(fp)
    1c7c:	e0c00117 	ldw	r3,4(fp)
    1c80:	1009883a 	mov	r4,r2
    1c84:	1960003c 	xorhi	r5,r3,32768
    1c88:	2005883a 	mov	r2,r4
    1c8c:	2807883a 	mov	r3,r5
    1c90:	dfc02a17 	ldw	ra,168(sp)
    1c94:	df002917 	ldw	fp,164(sp)
    1c98:	ddc02817 	ldw	r23,160(sp)
    1c9c:	dd802717 	ldw	r22,156(sp)
    1ca0:	dd402617 	ldw	r21,152(sp)
    1ca4:	dd002517 	ldw	r20,148(sp)
    1ca8:	dcc02417 	ldw	r19,144(sp)
    1cac:	dc802317 	ldw	r18,140(sp)
    1cb0:	dc402217 	ldw	r17,136(sp)
    1cb4:	dc002117 	ldw	r16,132(sp)
    1cb8:	dec02b04 	addi	sp,sp,172
    1cbc:	f800283a 	ret
    1cc0:	d8801817 	ldw	r2,96(sp)
    1cc4:	1024c03a 	cmpne	r18,r2,zero
    1cc8:	90000a1e 	bne	r18,zero,1cf4 <_strtod_r+0x2c4>
    1ccc:	3000091e 	bne	r6,zero,1cf4 <_strtod_r+0x2c4>
    1cd0:	d8c01617 	ldw	r3,88(sp)
    1cd4:	1805003a 	cmpeq	r2,r3,zero
    1cd8:	10000626 	beq	r2,zero,1cf4 <_strtod_r+0x2c4>
    1cdc:	d8001515 	stw	zero,84(sp)
    1ce0:	dd000415 	stw	r20,16(sp)
    1ce4:	003fdc06 	br	1c58 <_strtod_r+0x228>
    1ce8:	e1000017 	ldw	r4,0(fp)
    1cec:	e1400117 	ldw	r5,4(fp)
    1cf0:	003fe506 	br	1c88 <_strtod_r+0x258>
    1cf4:	dd000417 	ldw	r20,16(sp)
    1cf8:	00800ac4 	movi	r2,43
    1cfc:	a4000044 	addi	r16,r20,1
    1d00:	dc000415 	stw	r16,16(sp)
    1d04:	a0c00047 	ldb	r3,1(r20)
    1d08:	8009883a 	mov	r4,r16
    1d0c:	1880cb26 	beq	r3,r2,203c <_strtod_r+0x60c>
    1d10:	00800b44 	movi	r2,45
    1d14:	18838326 	beq	r3,r2,2b24 <_strtod_r+0x10f4>
    1d18:	1823883a 	mov	r17,r3
    1d1c:	88fff404 	addi	r3,r17,-48
    1d20:	00800244 	movi	r2,9
    1d24:	d8001915 	stw	zero,100(sp)
    1d28:	10c0cb36 	bltu	r2,r3,2058 <_strtod_r+0x628>
    1d2c:	00800c04 	movi	r2,48
    1d30:	8880061e 	bne	r17,r2,1d4c <_strtod_r+0x31c>
    1d34:	dc000417 	ldw	r16,16(sp)
    1d38:	8805883a 	mov	r2,r17
    1d3c:	84000044 	addi	r16,r16,1
    1d40:	dc000415 	stw	r16,16(sp)
    1d44:	84400007 	ldb	r17,0(r16)
    1d48:	88bffc26 	beq	r17,r2,1d3c <_strtod_r+0x30c>
    1d4c:	88fff3c4 	addi	r3,r17,-49
    1d50:	00800204 	movi	r2,8
    1d54:	10ffbd36 	bltu	r2,r3,1c4c <_strtod_r+0x21c>
    1d58:	dc000417 	ldw	r16,16(sp)
    1d5c:	893ff404 	addi	r4,r17,-48
    1d60:	00c00bc4 	movi	r3,47
    1d64:	dc001315 	stw	r16,76(sp)
    1d68:	84000044 	addi	r16,r16,1
    1d6c:	dc000415 	stw	r16,16(sp)
    1d70:	84400007 	ldb	r17,0(r16)
    1d74:	1c40100e 	bge	r3,r17,1db8 <_strtod_r+0x388>
    1d78:	00800e44 	movi	r2,57
    1d7c:	14400e16 	blt	r2,r17,1db8 <_strtod_r+0x388>
    1d80:	182f883a 	mov	r23,r3
    1d84:	102d883a 	mov	r22,r2
    1d88:	00000106 	br	1d90 <_strtod_r+0x360>
    1d8c:	b4400a16 	blt	r22,r17,1db8 <_strtod_r+0x388>
    1d90:	84000044 	addi	r16,r16,1
    1d94:	01400284 	movi	r5,10
    1d98:	d9802015 	stw	r6,128(sp)
    1d9c:	0006a900 	call	6a90 <__mulsi3>
    1da0:	dc000415 	stw	r16,16(sp)
    1da4:	8885883a 	add	r2,r17,r2
    1da8:	84400007 	ldb	r17,0(r16)
    1dac:	113ff404 	addi	r4,r2,-48
    1db0:	d9802017 	ldw	r6,128(sp)
    1db4:	bc7ff516 	blt	r23,r17,1d8c <_strtod_r+0x35c>
    1db8:	d8801317 	ldw	r2,76(sp)
    1dbc:	8087c83a 	sub	r3,r16,r2
    1dc0:	00800204 	movi	r2,8
    1dc4:	10c2ff16 	blt	r2,r3,29c4 <_strtod_r+0xf94>
    1dc8:	009387c4 	movi	r2,19999
    1dcc:	1100010e 	bge	r2,r4,1dd4 <_strtod_r+0x3a4>
    1dd0:	1009883a 	mov	r4,r2
    1dd4:	d8c01917 	ldw	r3,100(sp)
    1dd8:	1805003a 	cmpeq	r2,r3,zero
    1ddc:	103f9c1e 	bne	r2,zero,1c50 <_strtod_r+0x220>
    1de0:	0109c83a 	sub	r4,zero,r4
    1de4:	903f9b26 	beq	r18,zero,1c54 <_strtod_r+0x224>
    1de8:	d8801717 	ldw	r2,92(sp)
    1dec:	2089c83a 	sub	r4,r4,r2
    1df0:	d9000f15 	stw	r4,60(sp)
    1df4:	9800811e 	bne	r19,zero,1ffc <_strtod_r+0x5cc>
    1df8:	dd001817 	ldw	r20,96(sp)
    1dfc:	dc801817 	ldw	r18,96(sp)
    1e00:	00800404 	movi	r2,16
    1e04:	1480010e 	bge	r2,r18,1e0c <_strtod_r+0x3dc>
    1e08:	1025883a 	mov	r18,r2
    1e0c:	d9001217 	ldw	r4,72(sp)
    1e10:	00067b00 	call	67b0 <__floatunsidf>
    1e14:	100f883a 	mov	r7,r2
    1e18:	e0800015 	stw	r2,0(fp)
    1e1c:	00800244 	movi	r2,9
    1e20:	e0c00115 	stw	r3,4(fp)
    1e24:	1480160e 	bge	r2,r18,1e80 <_strtod_r+0x450>
    1e28:	900c90fa 	slli	r6,r18,3
    1e2c:	01000074 	movhi	r4,1
    1e30:	21214504 	addi	r4,r4,-31468
    1e34:	180b883a 	mov	r5,r3
    1e38:	310d883a 	add	r6,r6,r4
    1e3c:	30ffef17 	ldw	r3,-68(r6)
    1e40:	30bfee17 	ldw	r2,-72(r6)
    1e44:	3809883a 	mov	r4,r7
    1e48:	180f883a 	mov	r7,r3
    1e4c:	100d883a 	mov	r6,r2
    1e50:	0005d1c0 	call	5d1c <__muldf3>
    1e54:	d9001117 	ldw	r4,68(sp)
    1e58:	1021883a 	mov	r16,r2
    1e5c:	1823883a 	mov	r17,r3
    1e60:	00067b00 	call	67b0 <__floatunsidf>
    1e64:	880b883a 	mov	r5,r17
    1e68:	180f883a 	mov	r7,r3
    1e6c:	8009883a 	mov	r4,r16
    1e70:	100d883a 	mov	r6,r2
    1e74:	0005ca80 	call	5ca8 <__adddf3>
    1e78:	e0c00115 	stw	r3,4(fp)
    1e7c:	e0800015 	stw	r2,0(fp)
    1e80:	d8c01817 	ldw	r3,96(sp)
    1e84:	010003c4 	movi	r4,15
    1e88:	20c09e16 	blt	r4,r3,2104 <_strtod_r+0x6d4>
    1e8c:	d8800f17 	ldw	r2,60(sp)
    1e90:	103f7126 	beq	r2,zero,1c58 <_strtod_r+0x228>
    1e94:	0083d90e 	bge	zero,r2,2dfc <_strtod_r+0x13cc>
    1e98:	d8c00f17 	ldw	r3,60(sp)
    1e9c:	00800584 	movi	r2,22
    1ea0:	10c2ca0e 	bge	r2,r3,29cc <_strtod_r+0xf9c>
    1ea4:	d8801817 	ldw	r2,96(sp)
    1ea8:	d8c00f17 	ldw	r3,60(sp)
    1eac:	20a3c83a 	sub	r17,r4,r2
    1eb0:	88800584 	addi	r2,r17,22
    1eb4:	10c09316 	blt	r2,r3,2104 <_strtod_r+0x6d4>
    1eb8:	880890fa 	slli	r4,r17,3
    1ebc:	04000074 	movhi	r16,1
    1ec0:	84214504 	addi	r16,r16,-31468
    1ec4:	e0800017 	ldw	r2,0(fp)
    1ec8:	2409883a 	add	r4,r4,r16
    1ecc:	22000017 	ldw	r8,0(r4)
    1ed0:	22400117 	ldw	r9,4(r4)
    1ed4:	e0c00117 	ldw	r3,4(fp)
    1ed8:	1009883a 	mov	r4,r2
    1edc:	480f883a 	mov	r7,r9
    1ee0:	180b883a 	mov	r5,r3
    1ee4:	400d883a 	mov	r6,r8
    1ee8:	0005d1c0 	call	5d1c <__muldf3>
    1eec:	d9000f17 	ldw	r4,60(sp)
    1ef0:	180b883a 	mov	r5,r3
    1ef4:	2455c83a 	sub	r10,r4,r17
    1ef8:	501490fa 	slli	r10,r10,3
    1efc:	1009883a 	mov	r4,r2
    1f00:	5415883a 	add	r10,r10,r16
    1f04:	52000017 	ldw	r8,0(r10)
    1f08:	52400117 	ldw	r9,4(r10)
    1f0c:	0002b906 	br	29f4 <_strtod_r+0xfc4>
    1f10:	80c00047 	ldb	r3,1(r16)
    1f14:	00801604 	movi	r2,88
    1f18:	18805226 	beq	r3,r2,2064 <_strtod_r+0x634>
    1f1c:	00801e04 	movi	r2,120
    1f20:	18805026 	beq	r3,r2,2064 <_strtod_r+0x634>
    1f24:	84000044 	addi	r16,r16,1
    1f28:	dc000415 	stw	r16,16(sp)
    1f2c:	80c00007 	ldb	r3,0(r16)
    1f30:	00800c04 	movi	r2,48
    1f34:	18bffb26 	beq	r3,r2,1f24 <_strtod_r+0x4f4>
    1f38:	183f4726 	beq	r3,zero,1c58 <_strtod_r+0x228>
    1f3c:	01000044 	movi	r4,1
    1f40:	d9001615 	stw	r4,88(sp)
    1f44:	003f0a06 	br	1b70 <_strtod_r+0x140>
    1f48:	84000044 	addi	r16,r16,1
    1f4c:	dc000415 	stw	r16,16(sp)
    1f50:	94400047 	ldb	r17,1(r18)
    1f54:	9800ba26 	beq	r19,zero,2240 <_strtod_r+0x810>
    1f58:	dcc01815 	stw	r19,96(sp)
    1f5c:	d8001715 	stw	zero,92(sp)
    1f60:	000d883a 	mov	r6,zero
    1f64:	8dbff404 	addi	r22,r17,-48
    1f68:	00800244 	movi	r2,9
    1f6c:	15826e2e 	bgeu	r2,r22,2928 <_strtod_r+0xef8>
    1f70:	01000044 	movi	r4,1
    1f74:	d9001b15 	stw	r4,108(sp)
    1f78:	003f2e06 	br	1c34 <_strtod_r+0x204>
    1f7c:	d8c01617 	ldw	r3,88(sp)
    1f80:	1804c03a 	cmpne	r2,r3,zero
    1f84:	103f341e 	bne	r2,zero,1c58 <_strtod_r+0x228>
    1f88:	d9001b17 	ldw	r4,108(sp)
    1f8c:	2004c03a 	cmpne	r2,r4,zero
    1f90:	103f521e 	bne	r2,zero,1cdc <_strtod_r+0x2ac>
    1f94:	00801384 	movi	r2,78
    1f98:	8883b526 	beq	r17,r2,2e70 <_strtod_r+0x1440>
    1f9c:	1443b016 	blt	r2,r17,2e60 <_strtod_r+0x1430>
    1fa0:	00801244 	movi	r2,73
    1fa4:	88bf4d1e 	bne	r17,r2,1cdc <_strtod_r+0x2ac>
    1fa8:	dc000404 	addi	r16,sp,16
    1fac:	8009883a 	mov	r4,r16
    1fb0:	01400074 	movhi	r5,1
    1fb4:	29612f04 	addi	r5,r5,-31556
    1fb8:	00019e80 	call	19e8 <match>
    1fbc:	103f4726 	beq	r2,zero,1cdc <_strtod_r+0x2ac>
    1fc0:	d8800417 	ldw	r2,16(sp)
    1fc4:	8009883a 	mov	r4,r16
    1fc8:	01400074 	movhi	r5,1
    1fcc:	29613004 	addi	r5,r5,-31552
    1fd0:	143fffc4 	addi	r16,r2,-1
    1fd4:	dc000415 	stw	r16,16(sp)
    1fd8:	00019e80 	call	19e8 <match>
    1fdc:	1000031e 	bne	r2,zero,1fec <_strtod_r+0x5bc>
    1fe0:	d8800417 	ldw	r2,16(sp)
    1fe4:	14000044 	addi	r16,r2,1
    1fe8:	dc000415 	stw	r16,16(sp)
    1fec:	019ffc34 	movhi	r6,32752
    1ff0:	e1800115 	stw	r6,4(fp)
    1ff4:	e0000015 	stw	zero,0(fp)
    1ff8:	003f1706 	br	1c58 <_strtod_r+0x228>
    1ffc:	9829883a 	mov	r20,r19
    2000:	003f7e06 	br	1dfc <_strtod_r+0x3cc>
    2004:	d8001515 	stw	zero,84(sp)
    2008:	84000044 	addi	r16,r16,1
    200c:	dc000415 	stw	r16,16(sp)
    2010:	80800007 	ldb	r2,0(r16)
    2014:	103ed21e 	bne	r2,zero,1b60 <_strtod_r+0x130>
    2018:	d8001515 	stw	zero,84(sp)
    201c:	dd000415 	stw	r20,16(sp)
    2020:	003f0d06 	br	1c58 <_strtod_r+0x228>
    2024:	84000044 	addi	r16,r16,1
    2028:	dc000415 	stw	r16,16(sp)
    202c:	003e9206 	br	1a78 <_strtod_r+0x48>
    2030:	00800044 	movi	r2,1
    2034:	d8801515 	stw	r2,84(sp)
    2038:	003ff306 	br	2008 <_strtod_r+0x5d8>
    203c:	d8001915 	stw	zero,100(sp)
    2040:	84000044 	addi	r16,r16,1
    2044:	dc000415 	stw	r16,16(sp)
    2048:	24400047 	ldb	r17,1(r4)
    204c:	00800244 	movi	r2,9
    2050:	88fff404 	addi	r3,r17,-48
    2054:	10ff352e 	bgeu	r2,r3,1d2c <_strtod_r+0x2fc>
    2058:	0009883a 	mov	r4,zero
    205c:	dd000415 	stw	r20,16(sp)
    2060:	003efb06 	br	1c50 <_strtod_r+0x220>
    2064:	d8c01517 	ldw	r3,84(sp)
    2068:	04400074 	movhi	r17,1
    206c:	8c62ee04 	addi	r17,r17,-29768
    2070:	d8800504 	addi	r2,sp,20
    2074:	a809883a 	mov	r4,r21
    2078:	d9400404 	addi	r5,sp,16
    207c:	880d883a 	mov	r6,r17
    2080:	d9c00604 	addi	r7,sp,24
    2084:	d8800015 	stw	r2,0(sp)
    2088:	d8c00115 	stw	r3,4(sp)
    208c:	00036b80 	call	36b8 <__gethex>
    2090:	140001cc 	andi	r16,r2,7
    2094:	1025883a 	mov	r18,r2
    2098:	803eef26 	beq	r16,zero,1c58 <_strtod_r+0x228>
    209c:	04c00184 	movi	r19,6
    20a0:	84ff0e26 	beq	r16,r19,1cdc <_strtod_r+0x2ac>
    20a4:	d9800517 	ldw	r6,20(sp)
    20a8:	30000626 	beq	r6,zero,20c4 <_strtod_r+0x694>
    20ac:	89400017 	ldw	r5,0(r17)
    20b0:	d9000d04 	addi	r4,sp,52
    20b4:	00047e00 	call	47e0 <__copybits>
    20b8:	d9400517 	ldw	r5,20(sp)
    20bc:	a809883a 	mov	r4,r21
    20c0:	00043400 	call	4340 <_Bfree>
    20c4:	d9400617 	ldw	r5,24(sp)
    20c8:	9c025436 	bltu	r19,r16,2a1c <_strtod_r+0xfec>
    20cc:	8405883a 	add	r2,r16,r16
    20d0:	1085883a 	add	r2,r2,r2
    20d4:	00c00034 	movhi	r3,0
    20d8:	18c83a04 	addi	r3,r3,8424
    20dc:	10c5883a 	add	r2,r2,r3
    20e0:	11000017 	ldw	r4,0(r2)
    20e4:	2000683a 	jmp	r4
    20e8:	00002a5c 	xori	zero,zero,169
    20ec:	00002a68 	cmpgeui	zero,zero,169
    20f0:	00002a0c 	andi	zero,zero,168
    20f4:	00002a34 	movhi	zero,168
    20f8:	00002a44 	movi	zero,169
    20fc:	00002a68 	cmpgeui	zero,zero,169
    2100:	00002a5c 	xori	zero,zero,169
    2104:	d9001817 	ldw	r4,96(sp)
    2108:	d8c00f17 	ldw	r3,60(sp)
    210c:	2485c83a 	sub	r2,r4,r18
    2110:	18a1883a 	add	r16,r3,r2
    2114:	0402e80e 	bge	zero,r16,2cb8 <_strtod_r+0x1288>
    2118:	814003cc 	andi	r5,r16,15
    211c:	28000f26 	beq	r5,zero,215c <_strtod_r+0x72c>
    2120:	280a90fa 	slli	r5,r5,3
    2124:	01000074 	movhi	r4,1
    2128:	21214504 	addi	r4,r4,-31468
    212c:	e0800017 	ldw	r2,0(fp)
    2130:	290b883a 	add	r5,r5,r4
    2134:	2a000017 	ldw	r8,0(r5)
    2138:	e0c00117 	ldw	r3,4(fp)
    213c:	2a400117 	ldw	r9,4(r5)
    2140:	1009883a 	mov	r4,r2
    2144:	180b883a 	mov	r5,r3
    2148:	480f883a 	mov	r7,r9
    214c:	400d883a 	mov	r6,r8
    2150:	0005d1c0 	call	5d1c <__muldf3>
    2154:	e0c00115 	stw	r3,4(fp)
    2158:	e0800015 	stw	r2,0(fp)
    215c:	00bffc04 	movi	r2,-16
    2160:	808c703a 	and	r6,r16,r2
    2164:	30006726 	beq	r6,zero,2304 <_strtod_r+0x8d4>
    2168:	00804d04 	movi	r2,308
    216c:	11820f16 	blt	r2,r6,29ac <_strtod_r+0xf7c>
    2170:	3021d13a 	srai	r16,r6,4
    2174:	00800044 	movi	r2,1
    2178:	14037f0e 	bge	r2,r16,2f78 <_strtod_r+0x1548>
    217c:	05800074 	movhi	r22,1
    2180:	b5a17704 	addi	r22,r22,-31268
    2184:	1027883a 	mov	r19,r2
    2188:	0025883a 	mov	r18,zero
    218c:	b023883a 	mov	r17,r22
    2190:	8080004c 	andi	r2,r16,1
    2194:	1005003a 	cmpeq	r2,r2,zero
    2198:	1000091e 	bne	r2,zero,21c0 <_strtod_r+0x790>
    219c:	e0800017 	ldw	r2,0(fp)
    21a0:	e0c00117 	ldw	r3,4(fp)
    21a4:	89800017 	ldw	r6,0(r17)
    21a8:	89c00117 	ldw	r7,4(r17)
    21ac:	180b883a 	mov	r5,r3
    21b0:	1009883a 	mov	r4,r2
    21b4:	0005d1c0 	call	5d1c <__muldf3>
    21b8:	e0c00115 	stw	r3,4(fp)
    21bc:	e0800015 	stw	r2,0(fp)
    21c0:	8021d07a 	srai	r16,r16,1
    21c4:	94800044 	addi	r18,r18,1
    21c8:	8c400204 	addi	r17,r17,8
    21cc:	9c3ff016 	blt	r19,r16,2190 <_strtod_r+0x760>
    21d0:	900e90fa 	slli	r7,r18,3
    21d4:	e2000117 	ldw	r8,4(fp)
    21d8:	e1000017 	ldw	r4,0(fp)
    21dc:	3d8f883a 	add	r7,r7,r22
    21e0:	38800017 	ldw	r2,0(r7)
    21e4:	38c00117 	ldw	r3,4(r7)
    21e8:	01bf2c34 	movhi	r6,64688
    21ec:	418d883a 	add	r6,r8,r6
    21f0:	300b883a 	mov	r5,r6
    21f4:	180f883a 	mov	r7,r3
    21f8:	100d883a 	mov	r6,r2
    21fc:	0005d1c0 	call	5d1c <__muldf3>
    2200:	1009883a 	mov	r4,r2
    2204:	180b883a 	mov	r5,r3
    2208:	199ffc2c 	andhi	r6,r3,32752
    220c:	009f2834 	movhi	r2,31904
    2210:	e1000015 	stw	r4,0(fp)
    2214:	e1400115 	stw	r5,4(fp)
    2218:	1181e436 	bltu	r2,r6,29ac <_strtod_r+0xf7c>
    221c:	009f2434 	movhi	r2,31888
    2220:	11833f2e 	bgeu	r2,r6,2f20 <_strtod_r+0x14f0>
    2224:	d8001c15 	stw	zero,112(sp)
    2228:	019ffc34 	movhi	r6,32752
    222c:	31bfffc4 	addi	r6,r6,-1
    2230:	01ffffc4 	movi	r7,-1
    2234:	e1800115 	stw	r6,4(fp)
    2238:	e1c00015 	stw	r7,0(fp)
    223c:	00003206 	br	2308 <_strtod_r+0x8d8>
    2240:	00800c04 	movi	r2,48
    2244:	8883221e 	bne	r17,r2,2ed0 <_strtod_r+0x14a0>
    2248:	8805883a 	mov	r2,r17
    224c:	000d883a 	mov	r6,zero
    2250:	84000044 	addi	r16,r16,1
    2254:	dc000415 	stw	r16,16(sp)
    2258:	84400007 	ldb	r17,0(r16)
    225c:	31800044 	addi	r6,r6,1
    2260:	88bffb26 	beq	r17,r2,2250 <_strtod_r+0x820>
    2264:	88fff3c4 	addi	r3,r17,-49
    2268:	00800204 	movi	r2,8
    226c:	10c1ca36 	bltu	r2,r3,2998 <_strtod_r+0xf68>
    2270:	d8c00417 	ldw	r3,16(sp)
    2274:	d9801715 	stw	r6,92(sp)
    2278:	8dbff404 	addi	r22,r17,-48
    227c:	d8c01415 	stw	r3,80(sp)
    2280:	1821883a 	mov	r16,r3
    2284:	d8001815 	stw	zero,96(sp)
    2288:	01800044 	movi	r6,1
    228c:	b0023526 	beq	r22,zero,2b64 <_strtod_r+0x1134>
    2290:	d9001717 	ldw	r4,92(sp)
    2294:	00800044 	movi	r2,1
    2298:	2189883a 	add	r4,r4,r6
    229c:	d9001715 	stw	r4,92(sp)
    22a0:	1183390e 	bge	r2,r6,2f88 <_strtod_r+0x1558>
    22a4:	dc401817 	ldw	r17,96(sp)
    22a8:	1025883a 	mov	r18,r2
    22ac:	05c00204 	movi	r23,8
    22b0:	00000806 	br	22d4 <_strtod_r+0x8a4>
    22b4:	d9001217 	ldw	r4,72(sp)
    22b8:	01400284 	movi	r5,10
    22bc:	d9802015 	stw	r6,128(sp)
    22c0:	0006a900 	call	6a90 <__mulsi3>
    22c4:	d9802017 	ldw	r6,128(sp)
    22c8:	d8801215 	stw	r2,72(sp)
    22cc:	94800044 	addi	r18,r18,1
    22d0:	91821726 	beq	r18,r6,2b30 <_strtod_r+0x1100>
    22d4:	8c400044 	addi	r17,r17,1
    22d8:	88bfffc4 	addi	r2,r17,-1
    22dc:	b8bff50e 	bge	r23,r2,22b4 <_strtod_r+0x884>
    22e0:	00800404 	movi	r2,16
    22e4:	147ff916 	blt	r2,r17,22cc <_strtod_r+0x89c>
    22e8:	d9001117 	ldw	r4,68(sp)
    22ec:	01400284 	movi	r5,10
    22f0:	d9802015 	stw	r6,128(sp)
    22f4:	0006a900 	call	6a90 <__mulsi3>
    22f8:	d9802017 	ldw	r6,128(sp)
    22fc:	d8801115 	stw	r2,68(sp)
    2300:	003ff206 	br	22cc <_strtod_r+0x89c>
    2304:	d8001c15 	stw	zero,112(sp)
    2308:	d8c01217 	ldw	r3,72(sp)
    230c:	d9401417 	ldw	r5,80(sp)
    2310:	d9c01817 	ldw	r7,96(sp)
    2314:	a809883a 	mov	r4,r21
    2318:	a00d883a 	mov	r6,r20
    231c:	d8c00015 	stw	r3,0(sp)
    2320:	00052ac0 	call	52ac <__s2b>
    2324:	11000304 	addi	r4,r2,12
    2328:	d8801015 	stw	r2,64(sp)
    232c:	d8800f17 	ldw	r2,60(sp)
    2330:	d9001f15 	stw	r4,124(sp)
    2334:	1004803a 	cmplt	r2,r2,zero
    2338:	d8801e15 	stw	r2,120(sp)
    233c:	d8c01017 	ldw	r3,64(sp)
    2340:	a809883a 	mov	r4,r21
    2344:	19400117 	ldw	r5,4(r3)
    2348:	00048c00 	call	48c0 <_Balloc>
    234c:	d9001017 	ldw	r4,64(sp)
    2350:	d9401f17 	ldw	r5,124(sp)
    2354:	102f883a 	mov	r23,r2
    2358:	21800417 	ldw	r6,16(r4)
    235c:	11000304 	addi	r4,r2,12
    2360:	318d883a 	add	r6,r6,r6
    2364:	318d883a 	add	r6,r6,r6
    2368:	31800204 	addi	r6,r6,8
    236c:	00042a00 	call	42a0 <memcpy>
    2370:	e2000017 	ldw	r8,0(fp)
    2374:	e2400117 	ldw	r9,4(fp)
    2378:	a809883a 	mov	r4,r21
    237c:	400b883a 	mov	r5,r8
    2380:	d9c00204 	addi	r7,sp,8
    2384:	d8800304 	addi	r2,sp,12
    2388:	480d883a 	mov	r6,r9
    238c:	d8800015 	stw	r2,0(sp)
    2390:	000497c0 	call	497c <__d2b>
    2394:	a809883a 	mov	r4,r21
    2398:	01400044 	movi	r5,1
    239c:	d8800515 	stw	r2,20(sp)
    23a0:	00050240 	call	5024 <__i2b>
    23a4:	d8c01e17 	ldw	r3,120(sp)
    23a8:	102d883a 	mov	r22,r2
    23ac:	1801091e 	bne	r3,zero,27d4 <_strtod_r+0xda4>
    23b0:	dd000f17 	ldw	r20,60(sp)
    23b4:	000f883a 	mov	r7,zero
    23b8:	0013883a 	mov	r9,zero
    23bc:	a011883a 	mov	r8,r20
    23c0:	d8800217 	ldw	r2,8(sp)
    23c4:	10010116 	blt	r2,zero,27cc <_strtod_r+0xd9c>
    23c8:	388f883a 	add	r7,r7,r2
    23cc:	d8c01c17 	ldw	r3,112(sp)
    23d0:	d9400317 	ldw	r5,12(sp)
    23d4:	10c9c83a 	sub	r4,r2,r3
    23d8:	2145883a 	add	r2,r4,r5
    23dc:	10bfffc4 	addi	r2,r2,-1
    23e0:	00ff0084 	movi	r3,-1022
    23e4:	10c09f0e 	bge	r2,r3,2664 <_strtod_r+0xc34>
    23e8:	21810cc4 	addi	r6,r4,1075
    23ec:	d9001c17 	ldw	r4,112(sp)
    23f0:	4185883a 	add	r2,r8,r6
    23f4:	39a1883a 	add	r16,r7,r6
    23f8:	20a5883a 	add	r18,r4,r2
    23fc:	3807883a 	mov	r3,r7
    2400:	81c0010e 	bge	r16,r7,2408 <_strtod_r+0x9d8>
    2404:	8007883a 	mov	r3,r16
    2408:	9005883a 	mov	r2,r18
    240c:	1c80010e 	bge	r3,r18,2414 <_strtod_r+0x9e4>
    2410:	1805883a 	mov	r2,r3
    2414:	0080eb0e 	bge	zero,r2,27c4 <_strtod_r+0xd94>
    2418:	38a7c83a 	sub	r19,r7,r2
    241c:	80a1c83a 	sub	r16,r16,r2
    2420:	90a5c83a 	sub	r18,r18,r2
    2424:	02400e0e 	bge	zero,r9,2460 <_strtod_r+0xa30>
    2428:	480d883a 	mov	r6,r9
    242c:	b00b883a 	mov	r5,r22
    2430:	a809883a 	mov	r4,r21
    2434:	000518c0 	call	518c <__pow5mult>
    2438:	d9800517 	ldw	r6,20(sp)
    243c:	a809883a 	mov	r4,r21
    2440:	100b883a 	mov	r5,r2
    2444:	102d883a 	mov	r22,r2
    2448:	0004dd00 	call	4dd0 <__multiply>
    244c:	d9400517 	ldw	r5,20(sp)
    2450:	1023883a 	mov	r17,r2
    2454:	a809883a 	mov	r4,r21
    2458:	00043400 	call	4340 <_Bfree>
    245c:	dc400515 	stw	r17,20(sp)
    2460:	0400050e 	bge	zero,r16,2478 <_strtod_r+0xa48>
    2464:	d9400517 	ldw	r5,20(sp)
    2468:	800d883a 	mov	r6,r16
    246c:	a809883a 	mov	r4,r21
    2470:	0004c840 	call	4c84 <__lshift>
    2474:	d8800515 	stw	r2,20(sp)
    2478:	a000741e 	bne	r20,zero,264c <_strtod_r+0xc1c>
    247c:	0480050e 	bge	zero,r18,2494 <_strtod_r+0xa64>
    2480:	b80b883a 	mov	r5,r23
    2484:	900d883a 	mov	r6,r18
    2488:	a809883a 	mov	r4,r21
    248c:	0004c840 	call	4c84 <__lshift>
    2490:	102f883a 	mov	r23,r2
    2494:	04c0050e 	bge	zero,r19,24ac <_strtod_r+0xa7c>
    2498:	b00b883a 	mov	r5,r22
    249c:	980d883a 	mov	r6,r19
    24a0:	a809883a 	mov	r4,r21
    24a4:	0004c840 	call	4c84 <__lshift>
    24a8:	102d883a 	mov	r22,r2
    24ac:	d9400517 	ldw	r5,20(sp)
    24b0:	a809883a 	mov	r4,r21
    24b4:	b80d883a 	mov	r6,r23
    24b8:	0004af80 	call	4af8 <__mdiff>
    24bc:	1029883a 	mov	r20,r2
    24c0:	10800317 	ldw	r2,12(r2)
    24c4:	a009883a 	mov	r4,r20
    24c8:	a0000315 	stw	zero,12(r20)
    24cc:	b00b883a 	mov	r5,r22
    24d0:	d8801a15 	stw	r2,104(sp)
    24d4:	000449c0 	call	449c <__mcmp>
    24d8:	1001a616 	blt	r2,zero,2b74 <_strtod_r+0x1144>
    24dc:	10016d26 	beq	r2,zero,2a94 <_strtod_r+0x1064>
    24e0:	a009883a 	mov	r4,r20
    24e4:	b00b883a 	mov	r5,r22
    24e8:	000469c0 	call	469c <__ratio>
    24ec:	0011883a 	mov	r8,zero
    24f0:	02500034 	movhi	r9,16384
    24f4:	480f883a 	mov	r7,r9
    24f8:	1009883a 	mov	r4,r2
    24fc:	180b883a 	mov	r5,r3
    2500:	400d883a 	mov	r6,r8
    2504:	1021883a 	mov	r16,r2
    2508:	1823883a 	mov	r17,r3
    250c:	00065580 	call	6558 <__ledf2>
    2510:	00805716 	blt	zero,r2,2670 <_strtod_r+0xc40>
    2514:	d8801a17 	ldw	r2,104(sp)
    2518:	1025003a 	cmpeq	r18,r2,zero
    251c:	90008c1e 	bne	r18,zero,2750 <_strtod_r+0xd20>
    2520:	008ffc34 	movhi	r2,16368
    2524:	0021883a 	mov	r16,zero
    2528:	1023883a 	mov	r17,r2
    252c:	d8000715 	stw	zero,28(sp)
    2530:	d8800815 	stw	r2,32(sp)
    2534:	e1c00117 	ldw	r7,4(fp)
    2538:	009ff834 	movhi	r2,32736
    253c:	3cdffc2c 	andhi	r19,r7,32752
    2540:	98805f26 	beq	r19,r2,26c0 <_strtod_r+0xc90>
    2544:	d8c01c17 	ldw	r3,112(sp)
    2548:	18001b26 	beq	r3,zero,25b8 <_strtod_r+0xb88>
    254c:	0081a834 	movhi	r2,1696
    2550:	14c01936 	bltu	r2,r19,25b8 <_strtod_r+0xb88>
    2554:	00bff034 	movhi	r2,65472
    2558:	00d07834 	movhi	r3,16864
    255c:	18ffffc4 	addi	r3,r3,-1
    2560:	180f883a 	mov	r7,r3
    2564:	8009883a 	mov	r4,r16
    2568:	880b883a 	mov	r5,r17
    256c:	100d883a 	mov	r6,r2
    2570:	00065580 	call	6558 <__ledf2>
    2574:	00800b16 	blt	zero,r2,25a4 <_strtod_r+0xb74>
    2578:	880b883a 	mov	r5,r17
    257c:	8009883a 	mov	r4,r16
    2580:	000560c0 	call	560c <__fixunsdfsi>
    2584:	1000e31e 	bne	r2,zero,2914 <_strtod_r+0xee4>
    2588:	0021883a 	mov	r16,zero
    258c:	044ffc34 	movhi	r17,16368
    2590:	9000dd1e 	bne	r18,zero,2908 <_strtod_r+0xed8>
    2594:	8005883a 	mov	r2,r16
    2598:	8807883a 	mov	r3,r17
    259c:	d8c00815 	stw	r3,32(sp)
    25a0:	d8800715 	stw	r2,28(sp)
    25a4:	d8800817 	ldw	r2,32(sp)
    25a8:	00c1ac34 	movhi	r3,1712
    25ac:	14c5c83a 	sub	r2,r2,r19
    25b0:	10c5883a 	add	r2,r2,r3
    25b4:	d8800815 	stw	r2,32(sp)
    25b8:	e0800017 	ldw	r2,0(fp)
    25bc:	e0c00117 	ldw	r3,4(fp)
    25c0:	1009883a 	mov	r4,r2
    25c4:	180b883a 	mov	r5,r3
    25c8:	00044fc0 	call	44fc <__ulp>
    25cc:	d9800717 	ldw	r6,28(sp)
    25d0:	d9c00817 	ldw	r7,32(sp)
    25d4:	180b883a 	mov	r5,r3
    25d8:	1009883a 	mov	r4,r2
    25dc:	0005d1c0 	call	5d1c <__muldf3>
    25e0:	e2000017 	ldw	r8,0(fp)
    25e4:	e2400117 	ldw	r9,4(fp)
    25e8:	180b883a 	mov	r5,r3
    25ec:	1009883a 	mov	r4,r2
    25f0:	480f883a 	mov	r7,r9
    25f4:	400d883a 	mov	r6,r8
    25f8:	0005ca80 	call	5ca8 <__adddf3>
    25fc:	e0c00115 	stw	r3,4(fp)
    2600:	e0800015 	stw	r2,0(fp)
    2604:	d9001c17 	ldw	r4,112(sp)
    2608:	e4800117 	ldw	r18,4(fp)
    260c:	2000021e 	bne	r4,zero,2618 <_strtod_r+0xbe8>
    2610:	909ffc2c 	andhi	r2,r18,32752
    2614:	98807f26 	beq	r19,r2,2814 <_strtod_r+0xde4>
    2618:	d9400517 	ldw	r5,20(sp)
    261c:	a809883a 	mov	r4,r21
    2620:	00043400 	call	4340 <_Bfree>
    2624:	a809883a 	mov	r4,r21
    2628:	b80b883a 	mov	r5,r23
    262c:	00043400 	call	4340 <_Bfree>
    2630:	a809883a 	mov	r4,r21
    2634:	b00b883a 	mov	r5,r22
    2638:	00043400 	call	4340 <_Bfree>
    263c:	a809883a 	mov	r4,r21
    2640:	a00b883a 	mov	r5,r20
    2644:	00043400 	call	4340 <_Bfree>
    2648:	003f3c06 	br	233c <_strtod_r+0x90c>
    264c:	b80b883a 	mov	r5,r23
    2650:	a00d883a 	mov	r6,r20
    2654:	a809883a 	mov	r4,r21
    2658:	000518c0 	call	518c <__pow5mult>
    265c:	102f883a 	mov	r23,r2
    2660:	003f8606 	br	247c <_strtod_r+0xa4c>
    2664:	00800d84 	movi	r2,54
    2668:	114dc83a 	sub	r6,r2,r5
    266c:	003f5f06 	br	23ec <_strtod_r+0x9bc>
    2670:	0005883a 	mov	r2,zero
    2674:	00cff834 	movhi	r3,16352
    2678:	8009883a 	mov	r4,r16
    267c:	880b883a 	mov	r5,r17
    2680:	180f883a 	mov	r7,r3
    2684:	100d883a 	mov	r6,r2
    2688:	0005d1c0 	call	5d1c <__muldf3>
    268c:	1009883a 	mov	r4,r2
    2690:	d8801a17 	ldw	r2,104(sp)
    2694:	2021883a 	mov	r16,r4
    2698:	1823883a 	mov	r17,r3
    269c:	1025003a 	cmpeq	r18,r2,zero
    26a0:	9000451e 	bne	r18,zero,27b8 <_strtod_r+0xd88>
    26a4:	2005883a 	mov	r2,r4
    26a8:	d8800715 	stw	r2,28(sp)
    26ac:	d8c00815 	stw	r3,32(sp)
    26b0:	e1c00117 	ldw	r7,4(fp)
    26b4:	009ff834 	movhi	r2,32736
    26b8:	3cdffc2c 	andhi	r19,r7,32752
    26bc:	98bfa11e 	bne	r19,r2,2544 <_strtod_r+0xb14>
    26c0:	e1000017 	ldw	r4,0(fp)
    26c4:	01bf2c34 	movhi	r6,64688
    26c8:	398d883a 	add	r6,r7,r6
    26cc:	d9000b15 	stw	r4,44(sp)
    26d0:	d9c00c15 	stw	r7,48(sp)
    26d4:	300b883a 	mov	r5,r6
    26d8:	e1800115 	stw	r6,4(fp)
    26dc:	00044fc0 	call	44fc <__ulp>
    26e0:	d9800717 	ldw	r6,28(sp)
    26e4:	d9c00817 	ldw	r7,32(sp)
    26e8:	180b883a 	mov	r5,r3
    26ec:	1009883a 	mov	r4,r2
    26f0:	0005d1c0 	call	5d1c <__muldf3>
    26f4:	e2000017 	ldw	r8,0(fp)
    26f8:	e2400117 	ldw	r9,4(fp)
    26fc:	180b883a 	mov	r5,r3
    2700:	1009883a 	mov	r4,r2
    2704:	480f883a 	mov	r7,r9
    2708:	400d883a 	mov	r6,r8
    270c:	0005ca80 	call	5ca8 <__adddf3>
    2710:	1009883a 	mov	r4,r2
    2714:	180b883a 	mov	r5,r3
    2718:	009f2834 	movhi	r2,31904
    271c:	10bfffc4 	addi	r2,r2,-1
    2720:	18dffc2c 	andhi	r3,r3,32752
    2724:	e1000015 	stw	r4,0(fp)
    2728:	e1400115 	stw	r5,4(fp)
    272c:	10c0722e 	bgeu	r2,r3,28f8 <_strtod_r+0xec8>
    2730:	d8800c17 	ldw	r2,48(sp)
    2734:	011ffc34 	movhi	r4,32752
    2738:	213fffc4 	addi	r4,r4,-1
    273c:	11007d26 	beq	r2,r4,2934 <_strtod_r+0xf04>
    2740:	01ffffc4 	movi	r7,-1
    2744:	e1000115 	stw	r4,4(fp)
    2748:	e1c00015 	stw	r7,0(fp)
    274c:	003fb206 	br	2618 <_strtod_r+0xbe8>
    2750:	e0c00017 	ldw	r3,0(fp)
    2754:	1800251e 	bne	r3,zero,27ec <_strtod_r+0xdbc>
    2758:	e0800117 	ldw	r2,4(fp)
    275c:	00c00434 	movhi	r3,16
    2760:	18ffffc4 	addi	r3,r3,-1
    2764:	10c4703a 	and	r2,r2,r3
    2768:	1000241e 	bne	r2,zero,27fc <_strtod_r+0xdcc>
    276c:	0005883a 	mov	r2,zero
    2770:	00cffc34 	movhi	r3,16368
    2774:	180f883a 	mov	r7,r3
    2778:	8009883a 	mov	r4,r16
    277c:	880b883a 	mov	r5,r17
    2780:	100d883a 	mov	r6,r2
    2784:	00064d00 	call	64d0 <__ltdf2>
    2788:	10014616 	blt	r2,zero,2ca4 <_strtod_r+0x1274>
    278c:	0005883a 	mov	r2,zero
    2790:	00cff834 	movhi	r3,16352
    2794:	880b883a 	mov	r5,r17
    2798:	8009883a 	mov	r4,r16
    279c:	180f883a 	mov	r7,r3
    27a0:	100d883a 	mov	r6,r2
    27a4:	0005d1c0 	call	5d1c <__muldf3>
    27a8:	1823883a 	mov	r17,r3
    27ac:	1021883a 	mov	r16,r2
    27b0:	18e0003c 	xorhi	r3,r3,32768
    27b4:	003fbc06 	br	26a8 <_strtod_r+0xc78>
    27b8:	2005883a 	mov	r2,r4
    27bc:	18e0003c 	xorhi	r3,r3,32768
    27c0:	003fb906 	br	26a8 <_strtod_r+0xc78>
    27c4:	3827883a 	mov	r19,r7
    27c8:	003f1606 	br	2424 <_strtod_r+0x9f4>
    27cc:	4091c83a 	sub	r8,r8,r2
    27d0:	003efe06 	br	23cc <_strtod_r+0x99c>
    27d4:	d9000f17 	ldw	r4,60(sp)
    27d8:	0011883a 	mov	r8,zero
    27dc:	0029883a 	mov	r20,zero
    27e0:	0113c83a 	sub	r9,zero,r4
    27e4:	480f883a 	mov	r7,r9
    27e8:	003ef506 	br	23c0 <_strtod_r+0x990>
    27ec:	00800044 	movi	r2,1
    27f0:	1880021e 	bne	r3,r2,27fc <_strtod_r+0xdcc>
    27f4:	e0800117 	ldw	r2,4(fp)
    27f8:	1000c526 	beq	r2,zero,2b10 <_strtod_r+0x10e0>
    27fc:	00affc34 	movhi	r2,49136
    2800:	0021883a 	mov	r16,zero
    2804:	044ffc34 	movhi	r17,16368
    2808:	d8800815 	stw	r2,32(sp)
    280c:	d8000715 	stw	zero,28(sp)
    2810:	003f4806 	br	2534 <_strtod_r+0xb04>
    2814:	880b883a 	mov	r5,r17
    2818:	8009883a 	mov	r4,r16
    281c:	00066d80 	call	66d8 <__fixdfsi>
    2820:	1009883a 	mov	r4,r2
    2824:	00065e00 	call	65e0 <__floatsidf>
    2828:	880b883a 	mov	r5,r17
    282c:	8009883a 	mov	r4,r16
    2830:	100d883a 	mov	r6,r2
    2834:	180f883a 	mov	r7,r3
    2838:	0005c280 	call	5c28 <__subdf3>
    283c:	100b883a 	mov	r5,r2
    2840:	1021883a 	mov	r16,r2
    2844:	d8801a17 	ldw	r2,104(sp)
    2848:	180d883a 	mov	r6,r3
    284c:	1823883a 	mov	r17,r3
    2850:	1000061e 	bne	r2,zero,286c <_strtod_r+0xe3c>
    2854:	e0800017 	ldw	r2,0(fp)
    2858:	1000041e 	bne	r2,zero,286c <_strtod_r+0xe3c>
    285c:	00c00434 	movhi	r3,16
    2860:	18ffffc4 	addi	r3,r3,-1
    2864:	90c4703a 	and	r2,r18,r3
    2868:	10004026 	beq	r2,zero,296c <_strtod_r+0xf3c>
    286c:	00a52834 	movhi	r2,38048
    2870:	108d6544 	addi	r2,r2,13717
    2874:	00cff834 	movhi	r3,16352
    2878:	18ffffc4 	addi	r3,r3,-1
    287c:	180f883a 	mov	r7,r3
    2880:	8009883a 	mov	r4,r16
    2884:	880b883a 	mov	r5,r17
    2888:	100d883a 	mov	r6,r2
    288c:	00064d00 	call	64d0 <__ltdf2>
    2890:	10000916 	blt	r2,zero,28b8 <_strtod_r+0xe88>
    2894:	008d6c34 	movhi	r2,13744
    2898:	10b94d44 	addi	r2,r2,-6859
    289c:	00cff834 	movhi	r3,16352
    28a0:	880b883a 	mov	r5,r17
    28a4:	180f883a 	mov	r7,r3
    28a8:	8009883a 	mov	r4,r16
    28ac:	100d883a 	mov	r6,r2
    28b0:	00063c00 	call	63c0 <__gtdf2>
    28b4:	00bf580e 	bge	zero,r2,2618 <_strtod_r+0xbe8>
    28b8:	d9400517 	ldw	r5,20(sp)
    28bc:	a809883a 	mov	r4,r21
    28c0:	00043400 	call	4340 <_Bfree>
    28c4:	a809883a 	mov	r4,r21
    28c8:	b80b883a 	mov	r5,r23
    28cc:	00043400 	call	4340 <_Bfree>
    28d0:	a809883a 	mov	r4,r21
    28d4:	b00b883a 	mov	r5,r22
    28d8:	00043400 	call	4340 <_Bfree>
    28dc:	d9401017 	ldw	r5,64(sp)
    28e0:	a809883a 	mov	r4,r21
    28e4:	00043400 	call	4340 <_Bfree>
    28e8:	a809883a 	mov	r4,r21
    28ec:	a00b883a 	mov	r5,r20
    28f0:	00043400 	call	4340 <_Bfree>
    28f4:	003cd806 	br	1c58 <_strtod_r+0x228>
    28f8:	0080d434 	movhi	r2,848
    28fc:	288d883a 	add	r6,r5,r2
    2900:	e1800115 	stw	r6,4(fp)
    2904:	003f3f06 	br	2604 <_strtod_r+0xbd4>
    2908:	8005883a 	mov	r2,r16
    290c:	88e0003c 	xorhi	r3,r17,32768
    2910:	003f2206 	br	259c <_strtod_r+0xb6c>
    2914:	1009883a 	mov	r4,r2
    2918:	00067b00 	call	67b0 <__floatunsidf>
    291c:	1021883a 	mov	r16,r2
    2920:	1823883a 	mov	r17,r3
    2924:	003f1a06 	br	2590 <_strtod_r+0xb60>
    2928:	dc000417 	ldw	r16,16(sp)
    292c:	31800044 	addi	r6,r6,1
    2930:	003e5606 	br	228c <_strtod_r+0x85c>
    2934:	d8c00b17 	ldw	r3,44(sp)
    2938:	00bfffc4 	movi	r2,-1
    293c:	18bf801e 	bne	r3,r2,2740 <_strtod_r+0xd10>
    2940:	00c00884 	movi	r3,34
    2944:	a8c00015 	stw	r3,0(r21)
    2948:	009ffc34 	movhi	r2,32752
    294c:	e0800115 	stw	r2,4(fp)
    2950:	e0000015 	stw	zero,0(fp)
    2954:	003fd806 	br	28b8 <_strtod_r+0xe88>
    2958:	8025883a 	mov	r18,r16
    295c:	0027883a 	mov	r19,zero
    2960:	d8001215 	stw	zero,72(sp)
    2964:	d8001115 	stw	zero,68(sp)
    2968:	003cac06 	br	1c1c <_strtod_r+0x1ec>
    296c:	00a52834 	movhi	r2,38048
    2970:	108d6544 	addi	r2,r2,13717
    2974:	00cff434 	movhi	r3,16336
    2978:	18ffffc4 	addi	r3,r3,-1
    297c:	2809883a 	mov	r4,r5
    2980:	180f883a 	mov	r7,r3
    2984:	300b883a 	mov	r5,r6
    2988:	100d883a 	mov	r6,r2
    298c:	00064d00 	call	64d0 <__ltdf2>
    2990:	103f210e 	bge	r2,zero,2618 <_strtod_r+0xbe8>
    2994:	003fc806 	br	28b8 <_strtod_r+0xe88>
    2998:	00800044 	movi	r2,1
    299c:	d8001815 	stw	zero,96(sp)
    29a0:	d8801b15 	stw	r2,108(sp)
    29a4:	d8001715 	stw	zero,92(sp)
    29a8:	003ca206 	br	1c34 <_strtod_r+0x204>
    29ac:	00800884 	movi	r2,34
    29b0:	a8800015 	stw	r2,0(r21)
    29b4:	019ffc34 	movhi	r6,32752
    29b8:	e1800115 	stw	r6,4(fp)
    29bc:	e0000015 	stw	zero,0(fp)
    29c0:	003ca506 	br	1c58 <_strtod_r+0x228>
    29c4:	011387c4 	movi	r4,19999
    29c8:	003d0206 	br	1dd4 <_strtod_r+0x3a4>
    29cc:	180a90fa 	slli	r5,r3,3
    29d0:	e0800017 	ldw	r2,0(fp)
    29d4:	e0c00117 	ldw	r3,4(fp)
    29d8:	01000074 	movhi	r4,1
    29dc:	21214504 	addi	r4,r4,-31468
    29e0:	290b883a 	add	r5,r5,r4
    29e4:	2a000017 	ldw	r8,0(r5)
    29e8:	2a400117 	ldw	r9,4(r5)
    29ec:	1009883a 	mov	r4,r2
    29f0:	180b883a 	mov	r5,r3
    29f4:	480f883a 	mov	r7,r9
    29f8:	400d883a 	mov	r6,r8
    29fc:	0005d1c0 	call	5d1c <__muldf3>
    2a00:	e0c00115 	stw	r3,4(fp)
    2a04:	e0800015 	stw	r2,0(fp)
    2a08:	003c9306 	br	1c58 <_strtod_r+0x228>
    2a0c:	d8800d17 	ldw	r2,52(sp)
    2a10:	e0800015 	stw	r2,0(fp)
    2a14:	d8c00e17 	ldw	r3,56(sp)
    2a18:	e0c00115 	stw	r3,4(fp)
    2a1c:	9080020c 	andi	r2,r18,8
    2a20:	103c8d26 	beq	r2,zero,1c58 <_strtod_r+0x228>
    2a24:	e0800117 	ldw	r2,4(fp)
    2a28:	10a00034 	orhi	r2,r2,32768
    2a2c:	e0800115 	stw	r2,4(fp)
    2a30:	003c8906 	br	1c58 <_strtod_r+0x228>
    2a34:	009ffc34 	movhi	r2,32752
    2a38:	e0800115 	stw	r2,4(fp)
    2a3c:	e0000015 	stw	zero,0(fp)
    2a40:	003ff606 	br	2a1c <_strtod_r+0xfec>
    2a44:	00a00034 	movhi	r2,32768
    2a48:	10bfffc4 	addi	r2,r2,-1
    2a4c:	00ffffc4 	movi	r3,-1
    2a50:	e0800115 	stw	r2,4(fp)
    2a54:	e0c00015 	stw	r3,0(fp)
    2a58:	003ff006 	br	2a1c <_strtod_r+0xfec>
    2a5c:	e0000115 	stw	zero,4(fp)
    2a60:	e0000015 	stw	zero,0(fp)
    2a64:	003fed06 	br	2a1c <_strtod_r+0xfec>
    2a68:	d8800e17 	ldw	r2,56(sp)
    2a6c:	29010cc4 	addi	r4,r5,1075
    2a70:	00fffc34 	movhi	r3,65520
    2a74:	18ffffc4 	addi	r3,r3,-1
    2a78:	2008953a 	slli	r4,r4,20
    2a7c:	10c4703a 	and	r2,r2,r3
    2a80:	d8c00d17 	ldw	r3,52(sp)
    2a84:	1104b03a 	or	r2,r2,r4
    2a88:	e0800115 	stw	r2,4(fp)
    2a8c:	e0c00015 	stw	r3,0(fp)
    2a90:	003fe206 	br	2a1c <_strtod_r+0xfec>
    2a94:	d8c01a17 	ldw	r3,104(sp)
    2a98:	1825003a 	cmpeq	r18,r3,zero
    2a9c:	9000cf1e 	bne	r18,zero,2ddc <_strtod_r+0x13ac>
    2aa0:	e1400117 	ldw	r5,4(fp)
    2aa4:	01000434 	movhi	r4,16
    2aa8:	213fffc4 	addi	r4,r4,-1
    2aac:	2904703a 	and	r2,r5,r4
    2ab0:	11006826 	beq	r2,r4,2c54 <_strtod_r+0x1224>
    2ab4:	e1c00017 	ldw	r7,0(fp)
    2ab8:	3880004c 	andi	r2,r7,1
    2abc:	1005003a 	cmpeq	r2,r2,zero
    2ac0:	1000601e 	bne	r2,zero,2c44 <_strtod_r+0x1214>
    2ac4:	90010426 	beq	r18,zero,2ed8 <_strtod_r+0x14a8>
    2ac8:	e4400117 	ldw	r17,4(fp)
    2acc:	3809883a 	mov	r4,r7
    2ad0:	3821883a 	mov	r16,r7
    2ad4:	880b883a 	mov	r5,r17
    2ad8:	00044fc0 	call	44fc <__ulp>
    2adc:	180f883a 	mov	r7,r3
    2ae0:	880b883a 	mov	r5,r17
    2ae4:	8009883a 	mov	r4,r16
    2ae8:	100d883a 	mov	r6,r2
    2aec:	0005c280 	call	5c28 <__subdf3>
    2af0:	1009883a 	mov	r4,r2
    2af4:	000d883a 	mov	r6,zero
    2af8:	000f883a 	mov	r7,zero
    2afc:	180b883a 	mov	r5,r3
    2b00:	e0800015 	stw	r2,0(fp)
    2b04:	e0c00115 	stw	r3,4(fp)
    2b08:	00063380 	call	6338 <__nedf2>
    2b0c:	10004d1e 	bne	r2,zero,2c44 <_strtod_r+0x1214>
    2b10:	00800884 	movi	r2,34
    2b14:	a8800015 	stw	r2,0(r21)
    2b18:	e0000015 	stw	zero,0(fp)
    2b1c:	e0000115 	stw	zero,4(fp)
    2b20:	003f6506 	br	28b8 <_strtod_r+0xe88>
    2b24:	00800044 	movi	r2,1
    2b28:	d8801915 	stw	r2,100(sp)
    2b2c:	003d4406 	br	2040 <_strtod_r+0x610>
    2b30:	d8c01817 	ldw	r3,96(sp)
    2b34:	1985883a 	add	r2,r3,r6
    2b38:	11ffffc4 	addi	r7,r2,-1
    2b3c:	39000044 	addi	r4,r7,1
    2b40:	00800204 	movi	r2,8
    2b44:	d9001815 	stw	r4,96(sp)
    2b48:	11c0d716 	blt	r2,r7,2ea8 <_strtod_r+0x1478>
    2b4c:	d9001217 	ldw	r4,72(sp)
    2b50:	01400284 	movi	r5,10
    2b54:	0006a900 	call	6a90 <__mulsi3>
    2b58:	1585883a 	add	r2,r2,r22
    2b5c:	d8801215 	stw	r2,72(sp)
    2b60:	000d883a 	mov	r6,zero
    2b64:	84000044 	addi	r16,r16,1
    2b68:	dc000415 	stw	r16,16(sp)
    2b6c:	84400007 	ldb	r17,0(r16)
    2b70:	003cfc06 	br	1f64 <_strtod_r+0x534>
    2b74:	d8c01a17 	ldw	r3,104(sp)
    2b78:	1800321e 	bne	r3,zero,2c44 <_strtod_r+0x1214>
    2b7c:	e0800017 	ldw	r2,0(fp)
    2b80:	1000b31e 	bne	r2,zero,2e50 <_strtod_r+0x1420>
    2b84:	e0c00117 	ldw	r3,4(fp)
    2b88:	01000434 	movhi	r4,16
    2b8c:	213fffc4 	addi	r4,r4,-1
    2b90:	1904703a 	and	r2,r3,r4
    2b94:	1000e71e 	bne	r2,zero,2f34 <_strtod_r+0x1504>
    2b98:	18dffc2c 	andhi	r3,r3,32752
    2b9c:	0081ac34 	movhi	r2,1712
    2ba0:	10c0282e 	bgeu	r2,r3,2c44 <_strtod_r+0x1214>
    2ba4:	a0800517 	ldw	r2,20(r20)
    2ba8:	1000031e 	bne	r2,zero,2bb8 <_strtod_r+0x1188>
    2bac:	a0c00417 	ldw	r3,16(r20)
    2bb0:	00800044 	movi	r2,1
    2bb4:	10c0a60e 	bge	r2,r3,2e50 <_strtod_r+0x1420>
    2bb8:	a00b883a 	mov	r5,r20
    2bbc:	a809883a 	mov	r4,r21
    2bc0:	01800044 	movi	r6,1
    2bc4:	0004c840 	call	4c84 <__lshift>
    2bc8:	1009883a 	mov	r4,r2
    2bcc:	b00b883a 	mov	r5,r22
    2bd0:	1029883a 	mov	r20,r2
    2bd4:	000449c0 	call	449c <__mcmp>
    2bd8:	00809d0e 	bge	zero,r2,2e50 <_strtod_r+0x1420>
    2bdc:	e1800117 	ldw	r6,4(fp)
    2be0:	d9001c17 	ldw	r4,112(sp)
    2be4:	2013003a 	cmpeq	r9,r4,zero
    2be8:	4800d61e 	bne	r9,zero,2f44 <_strtod_r+0x1514>
    2bec:	30dffc2c 	andhi	r3,r6,32752
    2bf0:	0081ac34 	movhi	r2,1712
    2bf4:	10c0d336 	bltu	r2,r3,2f44 <_strtod_r+0x1514>
    2bf8:	0080dc34 	movhi	r2,880
    2bfc:	10ffc42e 	bgeu	r2,r3,2b10 <_strtod_r+0x10e0>
    2c00:	e0800017 	ldw	r2,0(fp)
    2c04:	e0c00117 	ldw	r3,4(fp)
    2c08:	020e5434 	movhi	r8,14672
    2c0c:	000d883a 	mov	r6,zero
    2c10:	400f883a 	mov	r7,r8
    2c14:	180b883a 	mov	r5,r3
    2c18:	1009883a 	mov	r4,r2
    2c1c:	da000c15 	stw	r8,48(sp)
    2c20:	d8000b15 	stw	zero,44(sp)
    2c24:	0005d1c0 	call	5d1c <__muldf3>
    2c28:	e0800015 	stw	r2,0(fp)
    2c2c:	e0c00115 	stw	r3,4(fp)
    2c30:	183f211e 	bne	r3,zero,28b8 <_strtod_r+0xe88>
    2c34:	103f201e 	bne	r2,zero,28b8 <_strtod_r+0xe88>
    2c38:	00800884 	movi	r2,34
    2c3c:	a8800015 	stw	r2,0(r21)
    2c40:	003f1d06 	br	28b8 <_strtod_r+0xe88>
    2c44:	d9001c17 	ldw	r4,112(sp)
    2c48:	2013003a 	cmpeq	r9,r4,zero
    2c4c:	483f1a1e 	bne	r9,zero,28b8 <_strtod_r+0xe88>
    2c50:	003feb06 	br	2c00 <_strtod_r+0x11d0>
    2c54:	d8801c17 	ldw	r2,112(sp)
    2c58:	e1c00017 	ldw	r7,0(fp)
    2c5c:	1013003a 	cmpeq	r9,r2,zero
    2c60:	4800c31e 	bne	r9,zero,2f70 <_strtod_r+0x1540>
    2c64:	28dffc2c 	andhi	r3,r5,32752
    2c68:	0081a834 	movhi	r2,1696
    2c6c:	10c0c036 	bltu	r2,r3,2f70 <_strtod_r+0x1540>
    2c70:	1804d53a 	srli	r2,r3,20
    2c74:	00c01ac4 	movi	r3,107
    2c78:	013fffc4 	movi	r4,-1
    2c7c:	1887c83a 	sub	r3,r3,r2
    2c80:	20c4983a 	sll	r2,r4,r3
    2c84:	11ff8c1e 	bne	r2,r7,2ab8 <_strtod_r+0x1088>
    2c88:	28dffc2c 	andhi	r3,r5,32752
    2c8c:	00800434 	movhi	r2,16
    2c90:	188d883a 	add	r6,r3,r2
    2c94:	e1800115 	stw	r6,4(fp)
    2c98:	e0000015 	stw	zero,0(fp)
    2c9c:	483f061e 	bne	r9,zero,28b8 <_strtod_r+0xe88>
    2ca0:	003fd706 	br	2c00 <_strtod_r+0x11d0>
    2ca4:	0021883a 	mov	r16,zero
    2ca8:	0005883a 	mov	r2,zero
    2cac:	044ff834 	movhi	r17,16352
    2cb0:	00eff834 	movhi	r3,49120
    2cb4:	003e7c06 	br	26a8 <_strtod_r+0xc78>
    2cb8:	803d9226 	beq	r16,zero,2304 <_strtod_r+0x8d4>
    2cbc:	0421c83a 	sub	r16,zero,r16
    2cc0:	814003cc 	andi	r5,r16,15
    2cc4:	28000f26 	beq	r5,zero,2d04 <_strtod_r+0x12d4>
    2cc8:	280a90fa 	slli	r5,r5,3
    2ccc:	01000074 	movhi	r4,1
    2cd0:	21214504 	addi	r4,r4,-31468
    2cd4:	e0800017 	ldw	r2,0(fp)
    2cd8:	290b883a 	add	r5,r5,r4
    2cdc:	2a000017 	ldw	r8,0(r5)
    2ce0:	e0c00117 	ldw	r3,4(fp)
    2ce4:	2a400117 	ldw	r9,4(r5)
    2ce8:	1009883a 	mov	r4,r2
    2cec:	180b883a 	mov	r5,r3
    2cf0:	480f883a 	mov	r7,r9
    2cf4:	400d883a 	mov	r6,r8
    2cf8:	00060e00 	call	60e0 <__divdf3>
    2cfc:	e0c00115 	stw	r3,4(fp)
    2d00:	e0800015 	stw	r2,0(fp)
    2d04:	8021d13a 	srai	r16,r16,4
    2d08:	803d7e26 	beq	r16,zero,2304 <_strtod_r+0x8d4>
    2d0c:	008007c4 	movi	r2,31
    2d10:	14002d16 	blt	r2,r16,2dc8 <_strtod_r+0x1398>
    2d14:	8080040c 	andi	r2,r16,16
    2d18:	10009d26 	beq	r2,zero,2f90 <_strtod_r+0x1560>
    2d1c:	01001a84 	movi	r4,106
    2d20:	d9001c15 	stw	r4,112(sp)
    2d24:	0400110e 	bge	zero,r16,2d6c <_strtod_r+0x133c>
    2d28:	04400074 	movhi	r17,1
    2d2c:	8c613304 	addi	r17,r17,-31540
    2d30:	8080004c 	andi	r2,r16,1
    2d34:	1005003a 	cmpeq	r2,r2,zero
    2d38:	1000091e 	bne	r2,zero,2d60 <_strtod_r+0x1330>
    2d3c:	e0800017 	ldw	r2,0(fp)
    2d40:	e0c00117 	ldw	r3,4(fp)
    2d44:	89800017 	ldw	r6,0(r17)
    2d48:	89c00117 	ldw	r7,4(r17)
    2d4c:	180b883a 	mov	r5,r3
    2d50:	1009883a 	mov	r4,r2
    2d54:	0005d1c0 	call	5d1c <__muldf3>
    2d58:	e0c00115 	stw	r3,4(fp)
    2d5c:	e0800015 	stw	r2,0(fp)
    2d60:	8021d07a 	srai	r16,r16,1
    2d64:	8c400204 	addi	r17,r17,8
    2d68:	043ff116 	blt	zero,r16,2d30 <_strtod_r+0x1300>
    2d6c:	d8801c17 	ldw	r2,112(sp)
    2d70:	10000d26 	beq	r2,zero,2da8 <_strtod_r+0x1378>
    2d74:	e1000117 	ldw	r4,4(fp)
    2d78:	00c01ac4 	movi	r3,107
    2d7c:	209ffc2c 	andhi	r2,r4,32752
    2d80:	1004d53a 	srli	r2,r2,20
    2d84:	1887c83a 	sub	r3,r3,r2
    2d88:	00c0070e 	bge	zero,r3,2da8 <_strtod_r+0x1378>
    2d8c:	008007c4 	movi	r2,31
    2d90:	10c0940e 	bge	r2,r3,2fe4 <_strtod_r+0x15b4>
    2d94:	00800d04 	movi	r2,52
    2d98:	e0000015 	stw	zero,0(fp)
    2d9c:	10c08b0e 	bge	r2,r3,2fcc <_strtod_r+0x159c>
    2da0:	0180dc34 	movhi	r6,880
    2da4:	e1800115 	stw	r6,4(fp)
    2da8:	e0800017 	ldw	r2,0(fp)
    2dac:	e0c00117 	ldw	r3,4(fp)
    2db0:	000d883a 	mov	r6,zero
    2db4:	000f883a 	mov	r7,zero
    2db8:	180b883a 	mov	r5,r3
    2dbc:	1009883a 	mov	r4,r2
    2dc0:	00063380 	call	6338 <__nedf2>
    2dc4:	103d501e 	bne	r2,zero,2308 <_strtod_r+0x8d8>
    2dc8:	00800884 	movi	r2,34
    2dcc:	a8800015 	stw	r2,0(r21)
    2dd0:	e0000015 	stw	zero,0(fp)
    2dd4:	e0000115 	stw	zero,4(fp)
    2dd8:	003b9f06 	br	1c58 <_strtod_r+0x228>
    2ddc:	e1800117 	ldw	r6,4(fp)
    2de0:	00c00434 	movhi	r3,16
    2de4:	18ffffc4 	addi	r3,r3,-1
    2de8:	30c4703a 	and	r2,r6,r3
    2dec:	103f311e 	bne	r2,zero,2ab4 <_strtod_r+0x1084>
    2df0:	e1c00017 	ldw	r7,0(fp)
    2df4:	383f301e 	bne	r7,zero,2ab8 <_strtod_r+0x1088>
    2df8:	003f7906 	br	2be0 <_strtod_r+0x11b0>
    2dfc:	d8c00f17 	ldw	r3,60(sp)
    2e00:	00bffa84 	movi	r2,-22
    2e04:	18bcbf16 	blt	r3,r2,2104 <_strtod_r+0x6d4>
    2e08:	1809883a 	mov	r4,r3
    2e0c:	017ffe04 	movi	r5,-8
    2e10:	0006a900 	call	6a90 <__mulsi3>
    2e14:	00c00074 	movhi	r3,1
    2e18:	18e14504 	addi	r3,r3,-31468
    2e1c:	10c5883a 	add	r2,r2,r3
    2e20:	e2000017 	ldw	r8,0(fp)
    2e24:	e2400117 	ldw	r9,4(fp)
    2e28:	12800017 	ldw	r10,0(r2)
    2e2c:	12c00117 	ldw	r11,4(r2)
    2e30:	480b883a 	mov	r5,r9
    2e34:	4009883a 	mov	r4,r8
    2e38:	580f883a 	mov	r7,r11
    2e3c:	500d883a 	mov	r6,r10
    2e40:	00060e00 	call	60e0 <__divdf3>
    2e44:	e0c00115 	stw	r3,4(fp)
    2e48:	e0800015 	stw	r2,0(fp)
    2e4c:	003b8206 	br	1c58 <_strtod_r+0x228>
    2e50:	d8801c17 	ldw	r2,112(sp)
    2e54:	1013003a 	cmpeq	r9,r2,zero
    2e58:	483e971e 	bne	r9,zero,28b8 <_strtod_r+0xe88>
    2e5c:	003f6806 	br	2c00 <_strtod_r+0x11d0>
    2e60:	00801a44 	movi	r2,105
    2e64:	88bc5026 	beq	r17,r2,1fa8 <_strtod_r+0x578>
    2e68:	00801b84 	movi	r2,110
    2e6c:	88bb9b1e 	bne	r17,r2,1cdc <_strtod_r+0x2ac>
    2e70:	dc000404 	addi	r16,sp,16
    2e74:	8009883a 	mov	r4,r16
    2e78:	01400074 	movhi	r5,1
    2e7c:	29613204 	addi	r5,r5,-31544
    2e80:	00019e80 	call	19e8 <match>
    2e84:	103b9526 	beq	r2,zero,1cdc <_strtod_r+0x2ac>
    2e88:	d8800417 	ldw	r2,16(sp)
    2e8c:	00c00a04 	movi	r3,40
    2e90:	11000007 	ldb	r4,0(r2)
    2e94:	20c04026 	beq	r4,r3,2f98 <_strtod_r+0x1568>
    2e98:	01bffe34 	movhi	r6,65528
    2e9c:	e1800115 	stw	r6,4(fp)
    2ea0:	e0000015 	stw	zero,0(fp)
    2ea4:	003b6c06 	br	1c58 <_strtod_r+0x228>
    2ea8:	d8c01817 	ldw	r3,96(sp)
    2eac:	00800404 	movi	r2,16
    2eb0:	10c00516 	blt	r2,r3,2ec8 <_strtod_r+0x1498>
    2eb4:	d9001117 	ldw	r4,68(sp)
    2eb8:	01400284 	movi	r5,10
    2ebc:	0006a900 	call	6a90 <__mulsi3>
    2ec0:	1585883a 	add	r2,r2,r22
    2ec4:	d8801115 	stw	r2,68(sp)
    2ec8:	000d883a 	mov	r6,zero
    2ecc:	003f2506 	br	2b64 <_strtod_r+0x1134>
    2ed0:	000d883a 	mov	r6,zero
    2ed4:	003ce306 	br	2264 <_strtod_r+0x834>
    2ed8:	e4400117 	ldw	r17,4(fp)
    2edc:	3809883a 	mov	r4,r7
    2ee0:	3821883a 	mov	r16,r7
    2ee4:	880b883a 	mov	r5,r17
    2ee8:	00044fc0 	call	44fc <__ulp>
    2eec:	180f883a 	mov	r7,r3
    2ef0:	880b883a 	mov	r5,r17
    2ef4:	8009883a 	mov	r4,r16
    2ef8:	100d883a 	mov	r6,r2
    2efc:	0005ca80 	call	5ca8 <__adddf3>
    2f00:	180b883a 	mov	r5,r3
    2f04:	d8c01c17 	ldw	r3,112(sp)
    2f08:	1009883a 	mov	r4,r2
    2f0c:	e1400115 	stw	r5,4(fp)
    2f10:	1813003a 	cmpeq	r9,r3,zero
    2f14:	e1000015 	stw	r4,0(fp)
    2f18:	483e671e 	bne	r9,zero,28b8 <_strtod_r+0xe88>
    2f1c:	003f3806 	br	2c00 <_strtod_r+0x11d0>
    2f20:	0080d434 	movhi	r2,848
    2f24:	188d883a 	add	r6,r3,r2
    2f28:	d8001c15 	stw	zero,112(sp)
    2f2c:	e1800115 	stw	r6,4(fp)
    2f30:	003cf506 	br	2308 <_strtod_r+0x8d8>
    2f34:	d8c01c17 	ldw	r3,112(sp)
    2f38:	1813003a 	cmpeq	r9,r3,zero
    2f3c:	483e5e1e 	bne	r9,zero,28b8 <_strtod_r+0xe88>
    2f40:	003f2f06 	br	2c00 <_strtod_r+0x11d0>
    2f44:	309ffc2c 	andhi	r2,r6,32752
    2f48:	00fffc34 	movhi	r3,65520
    2f4c:	10c5883a 	add	r2,r2,r3
    2f50:	00c00434 	movhi	r3,16
    2f54:	18ffffc4 	addi	r3,r3,-1
    2f58:	10ccb03a 	or	r6,r2,r3
    2f5c:	01ffffc4 	movi	r7,-1
    2f60:	e1800115 	stw	r6,4(fp)
    2f64:	e1c00015 	stw	r7,0(fp)
    2f68:	483e531e 	bne	r9,zero,28b8 <_strtod_r+0xe88>
    2f6c:	003f2406 	br	2c00 <_strtod_r+0x11d0>
    2f70:	00bfffc4 	movi	r2,-1
    2f74:	003f4306 	br	2c84 <_strtod_r+0x1254>
    2f78:	0025883a 	mov	r18,zero
    2f7c:	05800074 	movhi	r22,1
    2f80:	b5a17704 	addi	r22,r22,-31268
    2f84:	003c9206 	br	21d0 <_strtod_r+0x7a0>
    2f88:	d9c01817 	ldw	r7,96(sp)
    2f8c:	003eeb06 	br	2b3c <_strtod_r+0x110c>
    2f90:	d8001c15 	stw	zero,112(sp)
    2f94:	003f6306 	br	2d24 <_strtod_r+0x12f4>
    2f98:	8009883a 	mov	r4,r16
    2f9c:	01400074 	movhi	r5,1
    2fa0:	2962e904 	addi	r5,r5,-29788
    2fa4:	d9800d04 	addi	r6,sp,52
    2fa8:	0003f000 	call	3f00 <__hexnan>
    2fac:	00c00144 	movi	r3,5
    2fb0:	10ffb91e 	bne	r2,r3,2e98 <_strtod_r+0x1468>
    2fb4:	d8800e17 	ldw	r2,56(sp)
    2fb8:	d9c00d17 	ldw	r7,52(sp)
    2fbc:	119ffc34 	orhi	r6,r2,32752
    2fc0:	e1800115 	stw	r6,4(fp)
    2fc4:	e1c00015 	stw	r7,0(fp)
    2fc8:	003b2306 	br	1c58 <_strtod_r+0x228>
    2fcc:	18fff804 	addi	r3,r3,-32
    2fd0:	00bfffc4 	movi	r2,-1
    2fd4:	10c4983a 	sll	r2,r2,r3
    2fd8:	208c703a 	and	r6,r4,r2
    2fdc:	e1800115 	stw	r6,4(fp)
    2fe0:	003f7106 	br	2da8 <_strtod_r+0x1378>
    2fe4:	00bfffc4 	movi	r2,-1
    2fe8:	10c4983a 	sll	r2,r2,r3
    2fec:	e0c00017 	ldw	r3,0(fp)
    2ff0:	188e703a 	and	r7,r3,r2
    2ff4:	e1c00015 	stw	r7,0(fp)
    2ff8:	003f6b06 	br	2da8 <_strtod_r+0x1378>

00002ffc <strtof>:
    2ffc:	defffa04 	addi	sp,sp,-24
    3000:	dd000415 	stw	r20,16(sp)
    3004:	05000074 	movhi	r20,1
    3008:	a5289904 	addi	r20,r20,-23964
    300c:	2007883a 	mov	r3,r4
    3010:	a1000017 	ldw	r4,0(r20)
    3014:	280d883a 	mov	r6,r5
    3018:	180b883a 	mov	r5,r3
    301c:	dfc00515 	stw	ra,20(sp)
    3020:	dcc00315 	stw	r19,12(sp)
    3024:	dc800215 	stw	r18,8(sp)
    3028:	dc400115 	stw	r17,4(sp)
    302c:	dc000015 	stw	r16,0(sp)
    3030:	0001a300 	call	1a30 <_strtod_r>
    3034:	180b883a 	mov	r5,r3
    3038:	1009883a 	mov	r4,r2
    303c:	1823883a 	mov	r17,r3
    3040:	1021883a 	mov	r16,r2
    3044:	00006740 	call	674 <__truncdfsf2>
    3048:	1009883a 	mov	r4,r2
    304c:	000b883a 	mov	r5,zero
    3050:	1025883a 	mov	r18,r2
    3054:	1027883a 	mov	r19,r2
    3058:	00056b00 	call	56b0 <__nesf2>
    305c:	000d883a 	mov	r6,zero
    3060:	000f883a 	mov	r7,zero
    3064:	8009883a 	mov	r4,r16
    3068:	880b883a 	mov	r5,r17
    306c:	10000e1e 	bne	r2,zero,30a8 <strtof+0xac>
    3070:	00063380 	call	6338 <__nedf2>
    3074:	10000c26 	beq	r2,zero,30a8 <strtof+0xac>
    3078:	a0c00017 	ldw	r3,0(r20)
    307c:	00800884 	movi	r2,34
    3080:	18800015 	stw	r2,0(r3)
    3084:	9805883a 	mov	r2,r19
    3088:	dfc00517 	ldw	ra,20(sp)
    308c:	dd000417 	ldw	r20,16(sp)
    3090:	dcc00317 	ldw	r19,12(sp)
    3094:	dc800217 	ldw	r18,8(sp)
    3098:	dc400117 	ldw	r17,4(sp)
    309c:	dc000017 	ldw	r16,0(sp)
    30a0:	dec00604 	addi	sp,sp,24
    30a4:	f800283a 	ret
    30a8:	9009883a 	mov	r4,r18
    30ac:	015fe034 	movhi	r5,32640
    30b0:	297fffc4 	addi	r5,r5,-1
    30b4:	00057280 	call	5728 <__gtsf2>
    30b8:	00ffffc4 	movi	r3,-1
    30bc:	011ffc34 	movhi	r4,32752
    30c0:	213fffc4 	addi	r4,r4,-1
    30c4:	200f883a 	mov	r7,r4
    30c8:	180d883a 	mov	r6,r3
    30cc:	8009883a 	mov	r4,r16
    30d0:	880b883a 	mov	r5,r17
    30d4:	00800f16 	blt	zero,r2,3114 <strtof+0x118>
    30d8:	9009883a 	mov	r4,r18
    30dc:	017fe034 	movhi	r5,65408
    30e0:	297fffc4 	addi	r5,r5,-1
    30e4:	00057a00 	call	57a0 <__ltsf2>
    30e8:	023fffc4 	movi	r8,-1
    30ec:	027ffc34 	movhi	r9,65520
    30f0:	4a7fffc4 	addi	r9,r9,-1
    30f4:	880b883a 	mov	r5,r17
    30f8:	480f883a 	mov	r7,r9
    30fc:	8009883a 	mov	r4,r16
    3100:	400d883a 	mov	r6,r8
    3104:	103fdf0e 	bge	r2,zero,3084 <strtof+0x88>
    3108:	00064d00 	call	64d0 <__ltdf2>
    310c:	103fda0e 	bge	r2,zero,3078 <strtof+0x7c>
    3110:	003fdc06 	br	3084 <strtof+0x88>
    3114:	00063c00 	call	63c0 <__gtdf2>
    3118:	00bfd70e 	bge	zero,r2,3078 <strtof+0x7c>
    311c:	003fee06 	br	30d8 <strtof+0xdc>

00003120 <strtod>:
    3120:	01800074 	movhi	r6,1
    3124:	31a89904 	addi	r6,r6,-23964
    3128:	2007883a 	mov	r3,r4
    312c:	31000017 	ldw	r4,0(r6)
    3130:	280d883a 	mov	r6,r5
    3134:	180b883a 	mov	r5,r3
    3138:	0001a301 	jmpi	1a30 <_strtod_r>

0000313c <_malloc_trim_r>:
    313c:	defffb04 	addi	sp,sp,-20
    3140:	dcc00315 	stw	r19,12(sp)
    3144:	04c00074 	movhi	r19,1
    3148:	9ce1e704 	addi	r19,r19,-30820
    314c:	dc800215 	stw	r18,8(sp)
    3150:	dc400115 	stw	r17,4(sp)
    3154:	dc000015 	stw	r16,0(sp)
    3158:	2823883a 	mov	r17,r5
    315c:	2025883a 	mov	r18,r4
    3160:	dfc00415 	stw	ra,16(sp)
    3164:	00072040 	call	7204 <__malloc_lock>
    3168:	98800217 	ldw	r2,8(r19)
    316c:	9009883a 	mov	r4,r18
    3170:	000b883a 	mov	r5,zero
    3174:	10c00117 	ldw	r3,4(r2)
    3178:	00bfff04 	movi	r2,-4
    317c:	18a0703a 	and	r16,r3,r2
    3180:	8463c83a 	sub	r17,r16,r17
    3184:	8c43fbc4 	addi	r17,r17,4079
    3188:	8822d33a 	srli	r17,r17,12
    318c:	0083ffc4 	movi	r2,4095
    3190:	8c7fffc4 	addi	r17,r17,-1
    3194:	8822933a 	slli	r17,r17,12
    3198:	1440060e 	bge	r2,r17,31b4 <_malloc_trim_r+0x78>
    319c:	00011e40 	call	11e4 <_sbrk_r>
    31a0:	98c00217 	ldw	r3,8(r19)
    31a4:	9009883a 	mov	r4,r18
    31a8:	044bc83a 	sub	r5,zero,r17
    31ac:	80c7883a 	add	r3,r16,r3
    31b0:	10c00926 	beq	r2,r3,31d8 <_malloc_trim_r+0x9c>
    31b4:	00072080 	call	7208 <__malloc_unlock>
    31b8:	0005883a 	mov	r2,zero
    31bc:	dfc00417 	ldw	ra,16(sp)
    31c0:	dcc00317 	ldw	r19,12(sp)
    31c4:	dc800217 	ldw	r18,8(sp)
    31c8:	dc400117 	ldw	r17,4(sp)
    31cc:	dc000017 	ldw	r16,0(sp)
    31d0:	dec00504 	addi	sp,sp,20
    31d4:	f800283a 	ret
    31d8:	9009883a 	mov	r4,r18
    31dc:	00011e40 	call	11e4 <_sbrk_r>
    31e0:	844dc83a 	sub	r6,r16,r17
    31e4:	00ffffc4 	movi	r3,-1
    31e8:	9009883a 	mov	r4,r18
    31ec:	000b883a 	mov	r5,zero
    31f0:	01c00074 	movhi	r7,1
    31f4:	39ef6d04 	addi	r7,r7,-16972
    31f8:	31800054 	ori	r6,r6,1
    31fc:	10c00926 	beq	r2,r3,3224 <_malloc_trim_r+0xe8>
    3200:	38800017 	ldw	r2,0(r7)
    3204:	98c00217 	ldw	r3,8(r19)
    3208:	9009883a 	mov	r4,r18
    320c:	1445c83a 	sub	r2,r2,r17
    3210:	38800015 	stw	r2,0(r7)
    3214:	19800115 	stw	r6,4(r3)
    3218:	00072080 	call	7208 <__malloc_unlock>
    321c:	00800044 	movi	r2,1
    3220:	003fe606 	br	31bc <_malloc_trim_r+0x80>
    3224:	00011e40 	call	11e4 <_sbrk_r>
    3228:	99800217 	ldw	r6,8(r19)
    322c:	100f883a 	mov	r7,r2
    3230:	9009883a 	mov	r4,r18
    3234:	1187c83a 	sub	r3,r2,r6
    3238:	008003c4 	movi	r2,15
    323c:	19400054 	ori	r5,r3,1
    3240:	10ffdc0e 	bge	r2,r3,31b4 <_malloc_trim_r+0x78>
    3244:	00800074 	movhi	r2,1
    3248:	10a89804 	addi	r2,r2,-23968
    324c:	10c00017 	ldw	r3,0(r2)
    3250:	00800074 	movhi	r2,1
    3254:	10af6d04 	addi	r2,r2,-16972
    3258:	31400115 	stw	r5,4(r6)
    325c:	38c7c83a 	sub	r3,r7,r3
    3260:	10c00015 	stw	r3,0(r2)
    3264:	003fd306 	br	31b4 <_malloc_trim_r+0x78>

00003268 <_free_r>:
    3268:	defffd04 	addi	sp,sp,-12
    326c:	dc400115 	stw	r17,4(sp)
    3270:	dc000015 	stw	r16,0(sp)
    3274:	dfc00215 	stw	ra,8(sp)
    3278:	2821883a 	mov	r16,r5
    327c:	2023883a 	mov	r17,r4
    3280:	28005a26 	beq	r5,zero,33ec <_free_r+0x184>
    3284:	00072040 	call	7204 <__malloc_lock>
    3288:	823ffe04 	addi	r8,r16,-8
    328c:	41400117 	ldw	r5,4(r8)
    3290:	00bfff84 	movi	r2,-2
    3294:	02800074 	movhi	r10,1
    3298:	52a1e704 	addi	r10,r10,-30820
    329c:	288e703a 	and	r7,r5,r2
    32a0:	41cd883a 	add	r6,r8,r7
    32a4:	30c00117 	ldw	r3,4(r6)
    32a8:	51000217 	ldw	r4,8(r10)
    32ac:	00bfff04 	movi	r2,-4
    32b0:	1892703a 	and	r9,r3,r2
    32b4:	5017883a 	mov	r11,r10
    32b8:	31006726 	beq	r6,r4,3458 <_free_r+0x1f0>
    32bc:	2880004c 	andi	r2,r5,1
    32c0:	1005003a 	cmpeq	r2,r2,zero
    32c4:	32400115 	stw	r9,4(r6)
    32c8:	10001a1e 	bne	r2,zero,3334 <_free_r+0xcc>
    32cc:	000b883a 	mov	r5,zero
    32d0:	3247883a 	add	r3,r6,r9
    32d4:	18800117 	ldw	r2,4(r3)
    32d8:	1080004c 	andi	r2,r2,1
    32dc:	1000231e 	bne	r2,zero,336c <_free_r+0x104>
    32e0:	280ac03a 	cmpne	r5,r5,zero
    32e4:	3a4f883a 	add	r7,r7,r9
    32e8:	2800451e 	bne	r5,zero,3400 <_free_r+0x198>
    32ec:	31000217 	ldw	r4,8(r6)
    32f0:	00800074 	movhi	r2,1
    32f4:	10a1e904 	addi	r2,r2,-30812
    32f8:	20807b26 	beq	r4,r2,34e8 <_free_r+0x280>
    32fc:	30800317 	ldw	r2,12(r6)
    3300:	3a07883a 	add	r3,r7,r8
    3304:	19c00015 	stw	r7,0(r3)
    3308:	11000215 	stw	r4,8(r2)
    330c:	20800315 	stw	r2,12(r4)
    3310:	38800054 	ori	r2,r7,1
    3314:	40800115 	stw	r2,4(r8)
    3318:	28001a26 	beq	r5,zero,3384 <_free_r+0x11c>
    331c:	8809883a 	mov	r4,r17
    3320:	dfc00217 	ldw	ra,8(sp)
    3324:	dc400117 	ldw	r17,4(sp)
    3328:	dc000017 	ldw	r16,0(sp)
    332c:	dec00304 	addi	sp,sp,12
    3330:	00072081 	jmpi	7208 <__malloc_unlock>
    3334:	80bffe17 	ldw	r2,-8(r16)
    3338:	50c00204 	addi	r3,r10,8
    333c:	4091c83a 	sub	r8,r8,r2
    3340:	41000217 	ldw	r4,8(r8)
    3344:	388f883a 	add	r7,r7,r2
    3348:	20c06126 	beq	r4,r3,34d0 <_free_r+0x268>
    334c:	40800317 	ldw	r2,12(r8)
    3350:	3247883a 	add	r3,r6,r9
    3354:	000b883a 	mov	r5,zero
    3358:	11000215 	stw	r4,8(r2)
    335c:	20800315 	stw	r2,12(r4)
    3360:	18800117 	ldw	r2,4(r3)
    3364:	1080004c 	andi	r2,r2,1
    3368:	103fdd26 	beq	r2,zero,32e0 <_free_r+0x78>
    336c:	38800054 	ori	r2,r7,1
    3370:	3a07883a 	add	r3,r7,r8
    3374:	280ac03a 	cmpne	r5,r5,zero
    3378:	40800115 	stw	r2,4(r8)
    337c:	19c00015 	stw	r7,0(r3)
    3380:	283fe61e 	bne	r5,zero,331c <_free_r+0xb4>
    3384:	00807fc4 	movi	r2,511
    3388:	11c01f2e 	bgeu	r2,r7,3408 <_free_r+0x1a0>
    338c:	3806d27a 	srli	r3,r7,9
    3390:	1800481e 	bne	r3,zero,34b4 <_free_r+0x24c>
    3394:	3804d0fa 	srli	r2,r7,3
    3398:	100690fa 	slli	r3,r2,3
    339c:	1acd883a 	add	r6,r3,r11
    33a0:	31400217 	ldw	r5,8(r6)
    33a4:	31405926 	beq	r6,r5,350c <_free_r+0x2a4>
    33a8:	28800117 	ldw	r2,4(r5)
    33ac:	00ffff04 	movi	r3,-4
    33b0:	10c4703a 	and	r2,r2,r3
    33b4:	3880022e 	bgeu	r7,r2,33c0 <_free_r+0x158>
    33b8:	29400217 	ldw	r5,8(r5)
    33bc:	317ffa1e 	bne	r6,r5,33a8 <_free_r+0x140>
    33c0:	29800317 	ldw	r6,12(r5)
    33c4:	41800315 	stw	r6,12(r8)
    33c8:	41400215 	stw	r5,8(r8)
    33cc:	8809883a 	mov	r4,r17
    33d0:	2a000315 	stw	r8,12(r5)
    33d4:	32000215 	stw	r8,8(r6)
    33d8:	dfc00217 	ldw	ra,8(sp)
    33dc:	dc400117 	ldw	r17,4(sp)
    33e0:	dc000017 	ldw	r16,0(sp)
    33e4:	dec00304 	addi	sp,sp,12
    33e8:	00072081 	jmpi	7208 <__malloc_unlock>
    33ec:	dfc00217 	ldw	ra,8(sp)
    33f0:	dc400117 	ldw	r17,4(sp)
    33f4:	dc000017 	ldw	r16,0(sp)
    33f8:	dec00304 	addi	sp,sp,12
    33fc:	f800283a 	ret
    3400:	31000217 	ldw	r4,8(r6)
    3404:	003fbd06 	br	32fc <_free_r+0x94>
    3408:	3806d0fa 	srli	r3,r7,3
    340c:	00800044 	movi	r2,1
    3410:	51400117 	ldw	r5,4(r10)
    3414:	180890fa 	slli	r4,r3,3
    3418:	1807d0ba 	srai	r3,r3,2
    341c:	22c9883a 	add	r4,r4,r11
    3420:	21800217 	ldw	r6,8(r4)
    3424:	10c4983a 	sll	r2,r2,r3
    3428:	41000315 	stw	r4,12(r8)
    342c:	41800215 	stw	r6,8(r8)
    3430:	288ab03a 	or	r5,r5,r2
    3434:	22000215 	stw	r8,8(r4)
    3438:	8809883a 	mov	r4,r17
    343c:	51400115 	stw	r5,4(r10)
    3440:	32000315 	stw	r8,12(r6)
    3444:	dfc00217 	ldw	ra,8(sp)
    3448:	dc400117 	ldw	r17,4(sp)
    344c:	dc000017 	ldw	r16,0(sp)
    3450:	dec00304 	addi	sp,sp,12
    3454:	00072081 	jmpi	7208 <__malloc_unlock>
    3458:	2880004c 	andi	r2,r5,1
    345c:	3a4d883a 	add	r6,r7,r9
    3460:	1000071e 	bne	r2,zero,3480 <_free_r+0x218>
    3464:	80bffe17 	ldw	r2,-8(r16)
    3468:	4091c83a 	sub	r8,r8,r2
    346c:	41000317 	ldw	r4,12(r8)
    3470:	40c00217 	ldw	r3,8(r8)
    3474:	308d883a 	add	r6,r6,r2
    3478:	20c00215 	stw	r3,8(r4)
    347c:	19000315 	stw	r4,12(r3)
    3480:	00800074 	movhi	r2,1
    3484:	10a89704 	addi	r2,r2,-23972
    3488:	11000017 	ldw	r4,0(r2)
    348c:	30c00054 	ori	r3,r6,1
    3490:	52000215 	stw	r8,8(r10)
    3494:	40c00115 	stw	r3,4(r8)
    3498:	313fa036 	bltu	r6,r4,331c <_free_r+0xb4>
    349c:	00800074 	movhi	r2,1
    34a0:	10af6304 	addi	r2,r2,-17012
    34a4:	11400017 	ldw	r5,0(r2)
    34a8:	8809883a 	mov	r4,r17
    34ac:	000313c0 	call	313c <_malloc_trim_r>
    34b0:	003f9a06 	br	331c <_free_r+0xb4>
    34b4:	00800104 	movi	r2,4
    34b8:	10c0072e 	bgeu	r2,r3,34d8 <_free_r+0x270>
    34bc:	00800504 	movi	r2,20
    34c0:	10c01936 	bltu	r2,r3,3528 <_free_r+0x2c0>
    34c4:	188016c4 	addi	r2,r3,91
    34c8:	100690fa 	slli	r3,r2,3
    34cc:	003fb306 	br	339c <_free_r+0x134>
    34d0:	01400044 	movi	r5,1
    34d4:	003f7e06 	br	32d0 <_free_r+0x68>
    34d8:	3804d1ba 	srli	r2,r7,6
    34dc:	10800e04 	addi	r2,r2,56
    34e0:	100690fa 	slli	r3,r2,3
    34e4:	003fad06 	br	339c <_free_r+0x134>
    34e8:	22000315 	stw	r8,12(r4)
    34ec:	22000215 	stw	r8,8(r4)
    34f0:	3a05883a 	add	r2,r7,r8
    34f4:	38c00054 	ori	r3,r7,1
    34f8:	11c00015 	stw	r7,0(r2)
    34fc:	41000215 	stw	r4,8(r8)
    3500:	40c00115 	stw	r3,4(r8)
    3504:	41000315 	stw	r4,12(r8)
    3508:	003f8406 	br	331c <_free_r+0xb4>
    350c:	1005d0ba 	srai	r2,r2,2
    3510:	00c00044 	movi	r3,1
    3514:	51000117 	ldw	r4,4(r10)
    3518:	1886983a 	sll	r3,r3,r2
    351c:	20c8b03a 	or	r4,r4,r3
    3520:	51000115 	stw	r4,4(r10)
    3524:	003fa706 	br	33c4 <_free_r+0x15c>
    3528:	00801504 	movi	r2,84
    352c:	10c00436 	bltu	r2,r3,3540 <_free_r+0x2d8>
    3530:	3804d33a 	srli	r2,r7,12
    3534:	10801b84 	addi	r2,r2,110
    3538:	100690fa 	slli	r3,r2,3
    353c:	003f9706 	br	339c <_free_r+0x134>
    3540:	00805504 	movi	r2,340
    3544:	10c00436 	bltu	r2,r3,3558 <_free_r+0x2f0>
    3548:	3804d3fa 	srli	r2,r7,15
    354c:	10801dc4 	addi	r2,r2,119
    3550:	100690fa 	slli	r3,r2,3
    3554:	003f9106 	br	339c <_free_r+0x134>
    3558:	00815504 	movi	r2,1364
    355c:	10c0032e 	bgeu	r2,r3,356c <_free_r+0x304>
    3560:	00801f84 	movi	r2,126
    3564:	00c0fc04 	movi	r3,1008
    3568:	003f8c06 	br	339c <_free_r+0x134>
    356c:	3804d4ba 	srli	r2,r7,18
    3570:	10801f04 	addi	r2,r2,124
    3574:	100690fa 	slli	r3,r2,3
    3578:	003f8806 	br	339c <_free_r+0x134>

0000357c <htinit>:
    357c:	28800003 	ldbu	r2,0(r5)
    3580:	10000626 	beq	r2,zero,359c <htinit+0x20>
    3584:	1105883a 	add	r2,r2,r4
    3588:	11800005 	stb	r6,0(r2)
    358c:	28800043 	ldbu	r2,1(r5)
    3590:	31800044 	addi	r6,r6,1
    3594:	29400044 	addi	r5,r5,1
    3598:	103ffa1e 	bne	r2,zero,3584 <htinit+0x8>
    359c:	f800283a 	ret

000035a0 <__hexdig_init>:
    35a0:	defffd04 	addi	sp,sp,-12
    35a4:	dc400015 	stw	r17,0(sp)
    35a8:	04400074 	movhi	r17,1
    35ac:	8c6f7704 	addi	r17,r17,-16932
    35b0:	dcc00115 	stw	r19,4(sp)
    35b4:	8809883a 	mov	r4,r17
    35b8:	04c00684 	movi	r19,26
    35bc:	01400074 	movhi	r5,1
    35c0:	29613d04 	addi	r5,r5,-31500
    35c4:	01800404 	movi	r6,16
    35c8:	dfc00215 	stw	ra,8(sp)
    35cc:	000357c0 	call	357c <htinit>
    35d0:	980d883a 	mov	r6,r19
    35d4:	8809883a 	mov	r4,r17
    35d8:	01400074 	movhi	r5,1
    35dc:	29614004 	addi	r5,r5,-31488
    35e0:	000357c0 	call	357c <htinit>
    35e4:	8809883a 	mov	r4,r17
    35e8:	980d883a 	mov	r6,r19
    35ec:	01400074 	movhi	r5,1
    35f0:	29614204 	addi	r5,r5,-31480
    35f4:	dfc00217 	ldw	ra,8(sp)
    35f8:	dcc00117 	ldw	r19,4(sp)
    35fc:	dc400017 	ldw	r17,0(sp)
    3600:	dec00304 	addi	sp,sp,12
    3604:	000357c1 	jmpi	357c <htinit>

00003608 <rshift>:
    3608:	2807d17a 	srai	r3,r5,5
    360c:	20800417 	ldw	r2,16(r4)
    3610:	22400504 	addi	r9,r4,20
    3614:	480f883a 	mov	r7,r9
    3618:	1880190e 	bge	r3,r2,3680 <rshift+0x78>
    361c:	1085883a 	add	r2,r2,r2
    3620:	18c7883a 	add	r3,r3,r3
    3624:	1085883a 	add	r2,r2,r2
    3628:	18c7883a 	add	r3,r3,r3
    362c:	294007cc 	andi	r5,r5,31
    3630:	4891883a 	add	r8,r9,r2
    3634:	48cd883a 	add	r6,r9,r3
    3638:	28001726 	beq	r5,zero,3698 <rshift+0x90>
    363c:	30c00017 	ldw	r3,0(r6)
    3640:	00800804 	movi	r2,32
    3644:	31800104 	addi	r6,r6,4
    3648:	1155c83a 	sub	r10,r2,r5
    364c:	1946d83a 	srl	r3,r3,r5
    3650:	3200092e 	bgeu	r6,r8,3678 <rshift+0x70>
    3654:	30800017 	ldw	r2,0(r6)
    3658:	1284983a 	sll	r2,r2,r10
    365c:	10c4b03a 	or	r2,r2,r3
    3660:	38800015 	stw	r2,0(r7)
    3664:	30c00017 	ldw	r3,0(r6)
    3668:	31800104 	addi	r6,r6,4
    366c:	39c00104 	addi	r7,r7,4
    3670:	1946d83a 	srl	r3,r3,r5
    3674:	323ff736 	bltu	r6,r8,3654 <rshift+0x4c>
    3678:	38c00015 	stw	r3,0(r7)
    367c:	18000c1e 	bne	r3,zero,36b0 <rshift+0xa8>
    3680:	3a45c83a 	sub	r2,r7,r9
    3684:	1005d0ba 	srai	r2,r2,2
    3688:	20800415 	stw	r2,16(r4)
    368c:	1000011e 	bne	r2,zero,3694 <rshift+0x8c>
    3690:	20000515 	stw	zero,20(r4)
    3694:	f800283a 	ret
    3698:	323ff92e 	bgeu	r6,r8,3680 <rshift+0x78>
    369c:	30800017 	ldw	r2,0(r6)
    36a0:	31800104 	addi	r6,r6,4
    36a4:	38800015 	stw	r2,0(r7)
    36a8:	39c00104 	addi	r7,r7,4
    36ac:	003ffa06 	br	3698 <rshift+0x90>
    36b0:	39c00104 	addi	r7,r7,4
    36b4:	003ff206 	br	3680 <rshift+0x78>

000036b8 <__gethex>:
    36b8:	defff104 	addi	sp,sp,-60
    36bc:	df000d15 	stw	fp,52(sp)
    36c0:	dcc00815 	stw	r19,32(sp)
    36c4:	dfc00e15 	stw	ra,56(sp)
    36c8:	ddc00c15 	stw	r23,48(sp)
    36cc:	dd800b15 	stw	r22,44(sp)
    36d0:	dd400a15 	stw	r21,40(sp)
    36d4:	dd000915 	stw	r20,36(sp)
    36d8:	dc800715 	stw	r18,28(sp)
    36dc:	dc400615 	stw	r17,24(sp)
    36e0:	dc000515 	stw	r16,20(sp)
    36e4:	04c00074 	movhi	r19,1
    36e8:	9cef7704 	addi	r19,r19,-16932
    36ec:	98800c03 	ldbu	r2,48(r19)
    36f0:	d9000115 	stw	r4,4(sp)
    36f4:	2839883a 	mov	fp,r5
    36f8:	d9800215 	stw	r6,8(sp)
    36fc:	d9c00315 	stw	r7,12(sp)
    3700:	10007526 	beq	r2,zero,38d8 <__gethex+0x220>
    3704:	e1800017 	ldw	r6,0(fp)
    3708:	00800c04 	movi	r2,48
    370c:	31000083 	ldbu	r4,2(r6)
    3710:	30c00084 	addi	r3,r6,2
    3714:	2080761e 	bne	r4,r2,38f0 <__gethex+0x238>
    3718:	200b883a 	mov	r5,r4
    371c:	3007883a 	mov	r3,r6
    3720:	188000c3 	ldbu	r2,3(r3)
    3724:	18c00044 	addi	r3,r3,1
    3728:	1009883a 	mov	r4,r2
    372c:	117ffc26 	beq	r2,r5,3720 <__gethex+0x68>
    3730:	198fc83a 	sub	r7,r3,r6
    3734:	19400084 	addi	r5,r3,2
    3738:	24c5883a 	add	r2,r4,r19
    373c:	10c00003 	ldbu	r3,0(r2)
    3740:	18002e26 	beq	r3,zero,37fc <__gethex+0x144>
    3744:	29000003 	ldbu	r4,0(r5)
    3748:	282b883a 	mov	r21,r5
    374c:	000d883a 	mov	r6,zero
    3750:	002d883a 	mov	r22,zero
    3754:	21003fcc 	andi	r4,r4,255
    3758:	24c5883a 	add	r2,r4,r19
    375c:	10c00003 	ldbu	r3,0(r2)
    3760:	18000526 	beq	r3,zero,3778 <__gethex+0xc0>
    3764:	29400044 	addi	r5,r5,1
    3768:	29000003 	ldbu	r4,0(r5)
    376c:	24c5883a 	add	r2,r4,r19
    3770:	10c00003 	ldbu	r3,0(r2)
    3774:	183ffb1e 	bne	r3,zero,3764 <__gethex+0xac>
    3778:	00800b84 	movi	r2,46
    377c:	20805f26 	beq	r4,r2,38fc <__gethex+0x244>
    3780:	30008226 	beq	r6,zero,398c <__gethex+0x2d4>
    3784:	2985c83a 	sub	r2,r5,r6
    3788:	1085883a 	add	r2,r2,r2
    378c:	1085883a 	add	r2,r2,r2
    3790:	0085c83a 	sub	r2,zero,r2
    3794:	d8800015 	stw	r2,0(sp)
    3798:	2825883a 	mov	r18,r5
    379c:	90c00003 	ldbu	r3,0(r18)
    37a0:	00801404 	movi	r2,80
    37a4:	18801e26 	beq	r3,r2,3820 <__gethex+0x168>
    37a8:	00801c04 	movi	r2,112
    37ac:	18801c26 	beq	r3,r2,3820 <__gethex+0x168>
    37b0:	9023883a 	mov	r17,r18
    37b4:	b005003a 	cmpeq	r2,r22,zero
    37b8:	e4400015 	stw	r17,0(fp)
    37bc:	10008d1e 	bne	r2,zero,39f4 <__gethex+0x33c>
    37c0:	38004326 	beq	r7,zero,38d0 <__gethex+0x218>
    37c4:	0025883a 	mov	r18,zero
    37c8:	9005883a 	mov	r2,r18
    37cc:	dfc00e17 	ldw	ra,56(sp)
    37d0:	df000d17 	ldw	fp,52(sp)
    37d4:	ddc00c17 	ldw	r23,48(sp)
    37d8:	dd800b17 	ldw	r22,44(sp)
    37dc:	dd400a17 	ldw	r21,40(sp)
    37e0:	dd000917 	ldw	r20,36(sp)
    37e4:	dcc00817 	ldw	r19,32(sp)
    37e8:	dc800717 	ldw	r18,28(sp)
    37ec:	dc400617 	ldw	r17,24(sp)
    37f0:	dc000517 	ldw	r16,20(sp)
    37f4:	dec00f04 	addi	sp,sp,60
    37f8:	f800283a 	ret
    37fc:	00800b84 	movi	r2,46
    3800:	20805126 	beq	r4,r2,3948 <__gethex+0x290>
    3804:	2825883a 	mov	r18,r5
    3808:	d8000015 	stw	zero,0(sp)
    380c:	90c00003 	ldbu	r3,0(r18)
    3810:	00801404 	movi	r2,80
    3814:	282b883a 	mov	r21,r5
    3818:	05800044 	movi	r22,1
    381c:	18bfe21e 	bne	r3,r2,37a8 <__gethex+0xf0>
    3820:	90c00043 	ldbu	r3,1(r18)
    3824:	00800ac4 	movi	r2,43
    3828:	91400044 	addi	r5,r18,1
    382c:	18805126 	beq	r3,r2,3974 <__gethex+0x2bc>
    3830:	00800b44 	movi	r2,45
    3834:	18805326 	beq	r3,r2,3984 <__gethex+0x2cc>
    3838:	002f883a 	mov	r23,zero
    383c:	1cc5883a 	add	r2,r3,r19
    3840:	10800003 	ldbu	r2,0(r2)
    3844:	103fda26 	beq	r2,zero,37b0 <__gethex+0xf8>
    3848:	01800644 	movi	r6,25
    384c:	30bfd816 	blt	r6,r2,37b0 <__gethex+0xf8>
    3850:	28c00043 	ldbu	r3,1(r5)
    3854:	113ffc04 	addi	r4,r2,-16
    3858:	00800074 	movhi	r2,1
    385c:	10af7704 	addi	r2,r2,-16932
    3860:	1887883a 	add	r3,r3,r2
    3864:	18800003 	ldbu	r2,0(r3)
    3868:	2c400044 	addi	r17,r5,1
    386c:	10001126 	beq	r2,zero,38b4 <__gethex+0x1fc>
    3870:	1021883a 	mov	r16,r2
    3874:	30800f16 	blt	r6,r2,38b4 <__gethex+0x1fc>
    3878:	3029883a 	mov	r20,r6
    387c:	00000106 	br	3884 <__gethex+0x1cc>
    3880:	a0800c16 	blt	r20,r2,38b4 <__gethex+0x1fc>
    3884:	8c400044 	addi	r17,r17,1
    3888:	01400284 	movi	r5,10
    388c:	d9c00415 	stw	r7,16(sp)
    3890:	0006a900 	call	6a90 <__mulsi3>
    3894:	88c00003 	ldbu	r3,0(r17)
    3898:	1405883a 	add	r2,r2,r16
    389c:	113ffc04 	addi	r4,r2,-16
    38a0:	1cc7883a 	add	r3,r3,r19
    38a4:	18800003 	ldbu	r2,0(r3)
    38a8:	d9c00417 	ldw	r7,16(sp)
    38ac:	1021883a 	mov	r16,r2
    38b0:	103ff31e 	bne	r2,zero,3880 <__gethex+0x1c8>
    38b4:	b805003a 	cmpeq	r2,r23,zero
    38b8:	1000011e 	bne	r2,zero,38c0 <__gethex+0x208>
    38bc:	0109c83a 	sub	r4,zero,r4
    38c0:	d8800017 	ldw	r2,0(sp)
    38c4:	1105883a 	add	r2,r2,r4
    38c8:	d8800015 	stw	r2,0(sp)
    38cc:	003fb906 	br	37b4 <__gethex+0xfc>
    38d0:	04800184 	movi	r18,6
    38d4:	003fbc06 	br	37c8 <__gethex+0x110>
    38d8:	00035a00 	call	35a0 <__hexdig_init>
    38dc:	e1800017 	ldw	r6,0(fp)
    38e0:	00800c04 	movi	r2,48
    38e4:	31000083 	ldbu	r4,2(r6)
    38e8:	30c00084 	addi	r3,r6,2
    38ec:	20bf8a26 	beq	r4,r2,3718 <__gethex+0x60>
    38f0:	180b883a 	mov	r5,r3
    38f4:	000f883a 	mov	r7,zero
    38f8:	003f8f06 	br	3738 <__gethex+0x80>
    38fc:	303fa11e 	bne	r6,zero,3784 <__gethex+0xcc>
    3900:	29400044 	addi	r5,r5,1
    3904:	28800003 	ldbu	r2,0(r5)
    3908:	14c5883a 	add	r2,r2,r19
    390c:	10c00003 	ldbu	r3,0(r2)
    3910:	1800b526 	beq	r3,zero,3be8 <__gethex+0x530>
    3914:	2809883a 	mov	r4,r5
    3918:	21000044 	addi	r4,r4,1
    391c:	20800003 	ldbu	r2,0(r4)
    3920:	14c5883a 	add	r2,r2,r19
    3924:	10c00003 	ldbu	r3,0(r2)
    3928:	183ffb1e 	bne	r3,zero,3918 <__gethex+0x260>
    392c:	2145c83a 	sub	r2,r4,r5
    3930:	1085883a 	add	r2,r2,r2
    3934:	1085883a 	add	r2,r2,r2
    3938:	0085c83a 	sub	r2,zero,r2
    393c:	200b883a 	mov	r5,r4
    3940:	d8800015 	stw	r2,0(sp)
    3944:	003f9406 	br	3798 <__gethex+0xe0>
    3948:	29000043 	ldbu	r4,1(r5)
    394c:	00800074 	movhi	r2,1
    3950:	10af7704 	addi	r2,r2,-16932
    3954:	2c800044 	addi	r18,r5,1
    3958:	2085883a 	add	r2,r4,r2
    395c:	10c00003 	ldbu	r3,0(r2)
    3960:	18000d1e 	bne	r3,zero,3998 <__gethex+0x2e0>
    3964:	282b883a 	mov	r21,r5
    3968:	05800044 	movi	r22,1
    396c:	d8000015 	stw	zero,0(sp)
    3970:	003f8a06 	br	379c <__gethex+0xe4>
    3974:	002f883a 	mov	r23,zero
    3978:	29400044 	addi	r5,r5,1
    397c:	28c00003 	ldbu	r3,0(r5)
    3980:	003fae06 	br	383c <__gethex+0x184>
    3984:	05c00044 	movi	r23,1
    3988:	003ffb06 	br	3978 <__gethex+0x2c0>
    398c:	2825883a 	mov	r18,r5
    3990:	d8000015 	stw	zero,0(sp)
    3994:	003f8106 	br	379c <__gethex+0xe4>
    3998:	00800c04 	movi	r2,48
    399c:	20800e1e 	bne	r4,r2,39d8 <__gethex+0x320>
    39a0:	2007883a 	mov	r3,r4
    39a4:	900b883a 	mov	r5,r18
    39a8:	29400044 	addi	r5,r5,1
    39ac:	29000003 	ldbu	r4,0(r5)
    39b0:	20803fcc 	andi	r2,r4,255
    39b4:	10fffc26 	beq	r2,r3,39a8 <__gethex+0x2f0>
    39b8:	14c5883a 	add	r2,r2,r19
    39bc:	10c00003 	ldbu	r3,0(r2)
    39c0:	1800071e 	bne	r3,zero,39e0 <__gethex+0x328>
    39c4:	01c00044 	movi	r7,1
    39c8:	900d883a 	mov	r6,r18
    39cc:	282b883a 	mov	r21,r5
    39d0:	382d883a 	mov	r22,r7
    39d4:	003f5f06 	br	3754 <__gethex+0x9c>
    39d8:	91000003 	ldbu	r4,0(r18)
    39dc:	900b883a 	mov	r5,r18
    39e0:	900d883a 	mov	r6,r18
    39e4:	282b883a 	mov	r21,r5
    39e8:	01c00044 	movi	r7,1
    39ec:	002d883a 	mov	r22,zero
    39f0:	003f5806 	br	3754 <__gethex+0x9c>
    39f4:	9545c83a 	sub	r2,r18,r21
    39f8:	10bfffc4 	addi	r2,r2,-1
    39fc:	00c001c4 	movi	r3,7
    3a00:	1880770e 	bge	r3,r2,3be0 <__gethex+0x528>
    3a04:	000b883a 	mov	r5,zero
    3a08:	1005d07a 	srai	r2,r2,1
    3a0c:	29400044 	addi	r5,r5,1
    3a10:	18bffd16 	blt	r3,r2,3a08 <__gethex+0x350>
    3a14:	d9000117 	ldw	r4,4(sp)
    3a18:	00048c00 	call	48c0 <_Balloc>
    3a1c:	1029883a 	mov	r20,r2
    3a20:	15800504 	addi	r22,r2,20
    3a24:	ac80562e 	bgeu	r21,r18,3b80 <__gethex+0x4c8>
    3a28:	900b883a 	mov	r5,r18
    3a2c:	b011883a 	mov	r8,r22
    3a30:	000f883a 	mov	r7,zero
    3a34:	0009883a 	mov	r4,zero
    3a38:	02400b84 	movi	r9,46
    3a3c:	02800804 	movi	r10,32
    3a40:	297fffc4 	addi	r5,r5,-1
    3a44:	28c00003 	ldbu	r3,0(r5)
    3a48:	1a400826 	beq	r3,r9,3a6c <__gethex+0x3b4>
    3a4c:	380d883a 	mov	r6,r7
    3a50:	3a802a26 	beq	r7,r10,3afc <__gethex+0x444>
    3a54:	39c00104 	addi	r7,r7,4
    3a58:	1cc7883a 	add	r3,r3,r19
    3a5c:	18800003 	ldbu	r2,0(r3)
    3a60:	108003cc 	andi	r2,r2,15
    3a64:	1184983a 	sll	r2,r2,r6
    3a68:	2088b03a 	or	r4,r4,r2
    3a6c:	a97ff436 	bltu	r21,r5,3a40 <__gethex+0x388>
    3a70:	40800104 	addi	r2,r8,4
    3a74:	1585c83a 	sub	r2,r2,r22
    3a78:	1021d0ba 	srai	r16,r2,2
    3a7c:	41000015 	stw	r4,0(r8)
    3a80:	a4000415 	stw	r16,16(r20)
    3a84:	00043680 	call	4368 <__hi0bits>
    3a88:	d9000217 	ldw	r4,8(sp)
    3a8c:	8006917a 	slli	r3,r16,5
    3a90:	24c00017 	ldw	r19,0(r4)
    3a94:	1885c83a 	sub	r2,r3,r2
    3a98:	98801f16 	blt	r19,r2,3b18 <__gethex+0x460>
    3a9c:	14c00c16 	blt	r2,r19,3ad0 <__gethex+0x418>
    3aa0:	002b883a 	mov	r21,zero
    3aa4:	d9000217 	ldw	r4,8(sp)
    3aa8:	d8c00017 	ldw	r3,0(sp)
    3aac:	20800217 	ldw	r2,8(r4)
    3ab0:	10c0360e 	bge	r2,r3,3b8c <__gethex+0x4d4>
    3ab4:	d9000117 	ldw	r4,4(sp)
    3ab8:	a00b883a 	mov	r5,r20
    3abc:	048028c4 	movi	r18,163
    3ac0:	00043400 	call	4340 <_Bfree>
    3ac4:	d9000f17 	ldw	r4,60(sp)
    3ac8:	20000015 	stw	zero,0(r4)
    3acc:	003f3e06 	br	37c8 <__gethex+0x110>
    3ad0:	d9000117 	ldw	r4,4(sp)
    3ad4:	98a1c83a 	sub	r16,r19,r2
    3ad8:	a00b883a 	mov	r5,r20
    3adc:	800d883a 	mov	r6,r16
    3ae0:	0004c840 	call	4c84 <__lshift>
    3ae4:	d8c00017 	ldw	r3,0(sp)
    3ae8:	1029883a 	mov	r20,r2
    3aec:	15800504 	addi	r22,r2,20
    3af0:	1c07c83a 	sub	r3,r3,r16
    3af4:	d8c00015 	stw	r3,0(sp)
    3af8:	003fe906 	br	3aa0 <__gethex+0x3e8>
    3afc:	41000015 	stw	r4,0(r8)
    3b00:	28c00003 	ldbu	r3,0(r5)
    3b04:	01c00104 	movi	r7,4
    3b08:	000d883a 	mov	r6,zero
    3b0c:	41d1883a 	add	r8,r8,r7
    3b10:	0009883a 	mov	r4,zero
    3b14:	003fd006 	br	3a58 <__gethex+0x3a0>
    3b18:	14e1c83a 	sub	r16,r2,r19
    3b1c:	a009883a 	mov	r4,r20
    3b20:	800b883a 	mov	r5,r16
    3b24:	00048380 	call	4838 <__any_on>
    3b28:	1000081e 	bne	r2,zero,3b4c <__gethex+0x494>
    3b2c:	002b883a 	mov	r21,zero
    3b30:	a009883a 	mov	r4,r20
    3b34:	800b883a 	mov	r5,r16
    3b38:	00036080 	call	3608 <rshift>
    3b3c:	d8800017 	ldw	r2,0(sp)
    3b40:	1405883a 	add	r2,r2,r16
    3b44:	d8800015 	stw	r2,0(sp)
    3b48:	003fd606 	br	3aa4 <__gethex+0x3ec>
    3b4c:	817fffc4 	addi	r5,r16,-1
    3b50:	2805d17a 	srai	r2,r5,5
    3b54:	290007cc 	andi	r4,r5,31
    3b58:	01800044 	movi	r6,1
    3b5c:	1085883a 	add	r2,r2,r2
    3b60:	1085883a 	add	r2,r2,r2
    3b64:	1585883a 	add	r2,r2,r22
    3b68:	3108983a 	sll	r4,r6,r4
    3b6c:	10c00017 	ldw	r3,0(r2)
    3b70:	20c8703a 	and	r4,r4,r3
    3b74:	20001e1e 	bne	r4,zero,3bf0 <__gethex+0x538>
    3b78:	302b883a 	mov	r21,r6
    3b7c:	003fec06 	br	3b30 <__gethex+0x478>
    3b80:	b011883a 	mov	r8,r22
    3b84:	0009883a 	mov	r4,zero
    3b88:	003fb906 	br	3a70 <__gethex+0x3b8>
    3b8c:	d8800217 	ldw	r2,8(sp)
    3b90:	d8c00017 	ldw	r3,0(sp)
    3b94:	11000117 	ldw	r4,4(r2)
    3b98:	19001c16 	blt	r3,r4,3c0c <__gethex+0x554>
    3b9c:	04800044 	movi	r18,1
    3ba0:	a8000926 	beq	r21,zero,3bc8 <__gethex+0x510>
    3ba4:	d8c00217 	ldw	r3,8(sp)
    3ba8:	00800084 	movi	r2,2
    3bac:	19000317 	ldw	r4,12(r3)
    3bb0:	20809826 	beq	r4,r2,3e14 <__gethex+0x75c>
    3bb4:	008000c4 	movi	r2,3
    3bb8:	20805b26 	beq	r4,r2,3d28 <__gethex+0x670>
    3bbc:	00800044 	movi	r2,1
    3bc0:	20804326 	beq	r4,r2,3cd0 <__gethex+0x618>
    3bc4:	94800414 	ori	r18,r18,16
    3bc8:	d9000f17 	ldw	r4,60(sp)
    3bcc:	d8800017 	ldw	r2,0(sp)
    3bd0:	d8c00317 	ldw	r3,12(sp)
    3bd4:	25000015 	stw	r20,0(r4)
    3bd8:	18800015 	stw	r2,0(r3)
    3bdc:	003efa06 	br	37c8 <__gethex+0x110>
    3be0:	000b883a 	mov	r5,zero
    3be4:	003f8b06 	br	3a14 <__gethex+0x35c>
    3be8:	d8000015 	stw	zero,0(sp)
    3bec:	003eea06 	br	3798 <__gethex+0xe0>
    3bf0:	3140180e 	bge	r6,r5,3c54 <__gethex+0x59c>
    3bf4:	a009883a 	mov	r4,r20
    3bf8:	817fff84 	addi	r5,r16,-2
    3bfc:	00048380 	call	4838 <__any_on>
    3c00:	10001426 	beq	r2,zero,3c54 <__gethex+0x59c>
    3c04:	054000c4 	movi	r21,3
    3c08:	003fc906 	br	3b30 <__gethex+0x478>
    3c0c:	d8800017 	ldw	r2,0(sp)
    3c10:	20a3c83a 	sub	r17,r4,r2
    3c14:	8cc01116 	blt	r17,r19,3c5c <__gethex+0x5a4>
    3c18:	d8800217 	ldw	r2,8(sp)
    3c1c:	10c00317 	ldw	r3,12(r2)
    3c20:	00800084 	movi	r2,2
    3c24:	18809426 	beq	r3,r2,3e78 <__gethex+0x7c0>
    3c28:	008000c4 	movi	r2,3
    3c2c:	18808f26 	beq	r3,r2,3e6c <__gethex+0x7b4>
    3c30:	00800044 	movi	r2,1
    3c34:	18807c26 	beq	r3,r2,3e28 <__gethex+0x770>
    3c38:	d9000117 	ldw	r4,4(sp)
    3c3c:	a00b883a 	mov	r5,r20
    3c40:	04801404 	movi	r18,80
    3c44:	00043400 	call	4340 <_Bfree>
    3c48:	d9000f17 	ldw	r4,60(sp)
    3c4c:	20000015 	stw	zero,0(r4)
    3c50:	003edd06 	br	37c8 <__gethex+0x110>
    3c54:	05400084 	movi	r21,2
    3c58:	003fb506 	br	3b30 <__gethex+0x478>
    3c5c:	8c3fffc4 	addi	r16,r17,-1
    3c60:	a8001526 	beq	r21,zero,3cb8 <__gethex+0x600>
    3c64:	05400044 	movi	r21,1
    3c68:	8005d17a 	srai	r2,r16,5
    3c6c:	814007cc 	andi	r5,r16,31
    3c70:	00c00044 	movi	r3,1
    3c74:	1085883a 	add	r2,r2,r2
    3c78:	1085883a 	add	r2,r2,r2
    3c7c:	1585883a 	add	r2,r2,r22
    3c80:	1946983a 	sll	r3,r3,r5
    3c84:	11000017 	ldw	r4,0(r2)
    3c88:	1906703a 	and	r3,r3,r4
    3c8c:	18000126 	beq	r3,zero,3c94 <__gethex+0x5dc>
    3c90:	ad400094 	ori	r21,r21,2
    3c94:	880b883a 	mov	r5,r17
    3c98:	a009883a 	mov	r4,r20
    3c9c:	00036080 	call	3608 <rshift>
    3ca0:	d8800217 	ldw	r2,8(sp)
    3ca4:	9c67c83a 	sub	r19,r19,r17
    3ca8:	04800084 	movi	r18,2
    3cac:	10800117 	ldw	r2,4(r2)
    3cb0:	d8800015 	stw	r2,0(sp)
    3cb4:	003fba06 	br	3ba0 <__gethex+0x4e8>
    3cb8:	043feb0e 	bge	zero,r16,3c68 <__gethex+0x5b0>
    3cbc:	a009883a 	mov	r4,r20
    3cc0:	800b883a 	mov	r5,r16
    3cc4:	00048380 	call	4838 <__any_on>
    3cc8:	102b883a 	mov	r21,r2
    3ccc:	003fe606 	br	3c68 <__gethex+0x5b0>
    3cd0:	a880008c 	andi	r2,r21,2
    3cd4:	103fbb26 	beq	r2,zero,3bc4 <__gethex+0x50c>
    3cd8:	b0800017 	ldw	r2,0(r22)
    3cdc:	a884b03a 	or	r2,r21,r2
    3ce0:	1104703a 	and	r2,r2,r4
    3ce4:	103fb726 	beq	r2,zero,3bc4 <__gethex+0x50c>
    3ce8:	a4000417 	ldw	r16,16(r20)
    3cec:	b007883a 	mov	r3,r22
    3cf0:	017fffc4 	movi	r5,-1
    3cf4:	8405883a 	add	r2,r16,r16
    3cf8:	10ab883a 	add	r21,r2,r2
    3cfc:	802f883a 	mov	r23,r16
    3d00:	b549883a 	add	r4,r22,r21
    3d04:	00000306 	br	3d14 <__gethex+0x65c>
    3d08:	18000015 	stw	zero,0(r3)
    3d0c:	18c00104 	addi	r3,r3,4
    3d10:	1900082e 	bgeu	r3,r4,3d34 <__gethex+0x67c>
    3d14:	18800017 	ldw	r2,0(r3)
    3d18:	117ffb26 	beq	r2,r5,3d08 <__gethex+0x650>
    3d1c:	10800044 	addi	r2,r2,1
    3d20:	18800015 	stw	r2,0(r3)
    3d24:	00001e06 	br	3da0 <__gethex+0x6e8>
    3d28:	d8801017 	ldw	r2,64(sp)
    3d2c:	103fa526 	beq	r2,zero,3bc4 <__gethex+0x50c>
    3d30:	003fed06 	br	3ce8 <__gethex+0x630>
    3d34:	a0800217 	ldw	r2,8(r20)
    3d38:	80801216 	blt	r16,r2,3d84 <__gethex+0x6cc>
    3d3c:	a1400117 	ldw	r5,4(r20)
    3d40:	d9000117 	ldw	r4,4(sp)
    3d44:	29400044 	addi	r5,r5,1
    3d48:	00048c00 	call	48c0 <_Balloc>
    3d4c:	a1800417 	ldw	r6,16(r20)
    3d50:	a1400304 	addi	r5,r20,12
    3d54:	11000304 	addi	r4,r2,12
    3d58:	318d883a 	add	r6,r6,r6
    3d5c:	318d883a 	add	r6,r6,r6
    3d60:	31800204 	addi	r6,r6,8
    3d64:	1023883a 	mov	r17,r2
    3d68:	00042a00 	call	42a0 <memcpy>
    3d6c:	d9000117 	ldw	r4,4(sp)
    3d70:	a00b883a 	mov	r5,r20
    3d74:	8d800504 	addi	r22,r17,20
    3d78:	00043400 	call	4340 <_Bfree>
    3d7c:	8c000417 	ldw	r16,16(r17)
    3d80:	8829883a 	mov	r20,r17
    3d84:	8405883a 	add	r2,r16,r16
    3d88:	1085883a 	add	r2,r2,r2
    3d8c:	1505883a 	add	r2,r2,r20
    3d90:	84000044 	addi	r16,r16,1
    3d94:	00c00044 	movi	r3,1
    3d98:	10c00515 	stw	r3,20(r2)
    3d9c:	a4000415 	stw	r16,16(r20)
    3da0:	00800084 	movi	r2,2
    3da4:	90801526 	beq	r18,r2,3dfc <__gethex+0x744>
    3da8:	bc000a16 	blt	r23,r16,3dd4 <__gethex+0x71c>
    3dac:	9c0007cc 	andi	r16,r19,31
    3db0:	8000021e 	bne	r16,zero,3dbc <__gethex+0x704>
    3db4:	94800814 	ori	r18,r18,32
    3db8:	003f8306 	br	3bc8 <__gethex+0x510>
    3dbc:	b545883a 	add	r2,r22,r21
    3dc0:	113fff17 	ldw	r4,-4(r2)
    3dc4:	00043680 	call	4368 <__hi0bits>
    3dc8:	00c00804 	movi	r3,32
    3dcc:	1c07c83a 	sub	r3,r3,r16
    3dd0:	10fff80e 	bge	r2,r3,3db4 <__gethex+0x6fc>
    3dd4:	a009883a 	mov	r4,r20
    3dd8:	01400044 	movi	r5,1
    3ddc:	00036080 	call	3608 <rshift>
    3de0:	d9000217 	ldw	r4,8(sp)
    3de4:	d8c00017 	ldw	r3,0(sp)
    3de8:	20800217 	ldw	r2,8(r4)
    3dec:	18c00044 	addi	r3,r3,1
    3df0:	d8c00015 	stw	r3,0(sp)
    3df4:	10ff2f16 	blt	r2,r3,3ab4 <__gethex+0x3fc>
    3df8:	003fee06 	br	3db4 <__gethex+0x6fc>
    3dfc:	d8c00217 	ldw	r3,8(sp)
    3e00:	18800017 	ldw	r2,0(r3)
    3e04:	10bfffc4 	addi	r2,r2,-1
    3e08:	98801e26 	beq	r19,r2,3e84 <__gethex+0x7cc>
    3e0c:	04800884 	movi	r18,34
    3e10:	003f6d06 	br	3bc8 <__gethex+0x510>
    3e14:	d9001017 	ldw	r4,64(sp)
    3e18:	00800044 	movi	r2,1
    3e1c:	1105c83a 	sub	r2,r2,r4
    3e20:	103f6826 	beq	r2,zero,3bc4 <__gethex+0x50c>
    3e24:	003fb006 	br	3ce8 <__gethex+0x630>
    3e28:	9c7f831e 	bne	r19,r17,3c38 <__gethex+0x580>
    3e2c:	1cc0060e 	bge	r3,r19,3e48 <__gethex+0x790>
    3e30:	98cbc83a 	sub	r5,r19,r3
    3e34:	a009883a 	mov	r4,r20
    3e38:	00048380 	call	4838 <__any_on>
    3e3c:	103f7e26 	beq	r2,zero,3c38 <__gethex+0x580>
    3e40:	d8c00217 	ldw	r3,8(sp)
    3e44:	19000117 	ldw	r4,4(r3)
    3e48:	d8800317 	ldw	r2,12(sp)
    3e4c:	d8c00f17 	ldw	r3,60(sp)
    3e50:	04000044 	movi	r16,1
    3e54:	11000015 	stw	r4,0(r2)
    3e58:	04801884 	movi	r18,98
    3e5c:	b4000015 	stw	r16,0(r22)
    3e60:	1d000015 	stw	r20,0(r3)
    3e64:	a4000415 	stw	r16,16(r20)
    3e68:	003e5706 	br	37c8 <__gethex+0x110>
    3e6c:	d8801017 	ldw	r2,64(sp)
    3e70:	103f7126 	beq	r2,zero,3c38 <__gethex+0x580>
    3e74:	003ff406 	br	3e48 <__gethex+0x790>
    3e78:	d8c01017 	ldw	r3,64(sp)
    3e7c:	183ff226 	beq	r3,zero,3e48 <__gethex+0x790>
    3e80:	003f6d06 	br	3c38 <__gethex+0x580>
    3e84:	9805d17a 	srai	r2,r19,5
    3e88:	994007cc 	andi	r5,r19,31
    3e8c:	00c00044 	movi	r3,1
    3e90:	1085883a 	add	r2,r2,r2
    3e94:	1085883a 	add	r2,r2,r2
    3e98:	1585883a 	add	r2,r2,r22
    3e9c:	1946983a 	sll	r3,r3,r5
    3ea0:	11000017 	ldw	r4,0(r2)
    3ea4:	1906703a 	and	r3,r3,r4
    3ea8:	183fd826 	beq	r3,zero,3e0c <__gethex+0x754>
    3eac:	04800844 	movi	r18,33
    3eb0:	003f4506 	br	3bc8 <__gethex+0x510>

00003eb4 <L_shift>:
    3eb4:	00800204 	movi	r2,8
    3eb8:	1185c83a 	sub	r2,r2,r6
    3ebc:	1085883a 	add	r2,r2,r2
    3ec0:	21c00017 	ldw	r7,0(r4)
    3ec4:	1093883a 	add	r9,r2,r2
    3ec8:	00800804 	movi	r2,32
    3ecc:	200d883a 	mov	r6,r4
    3ed0:	1251c83a 	sub	r8,r2,r9
    3ed4:	31800104 	addi	r6,r6,4
    3ed8:	3805883a 	mov	r2,r7
    3edc:	31c00017 	ldw	r7,0(r6)
    3ee0:	3a08983a 	sll	r4,r7,r8
    3ee4:	3a46d83a 	srl	r3,r7,r9
    3ee8:	1104b03a 	or	r2,r2,r4
    3eec:	180f883a 	mov	r7,r3
    3ef0:	30bfff15 	stw	r2,-4(r6)
    3ef4:	30c00015 	stw	r3,0(r6)
    3ef8:	317ff636 	bltu	r6,r5,3ed4 <L_shift+0x20>
    3efc:	f800283a 	ret

00003f00 <__hexnan>:
    3f00:	defff404 	addi	sp,sp,-48
    3f04:	dd800815 	stw	r22,32(sp)
    3f08:	05800074 	movhi	r22,1
    3f0c:	b5af7704 	addi	r22,r22,-16932
    3f10:	b0800c03 	ldbu	r2,48(r22)
    3f14:	dcc00515 	stw	r19,20(sp)
    3f18:	dc000215 	stw	r16,8(sp)
    3f1c:	dfc00b15 	stw	ra,44(sp)
    3f20:	df000a15 	stw	fp,40(sp)
    3f24:	ddc00915 	stw	r23,36(sp)
    3f28:	dd400715 	stw	r21,28(sp)
    3f2c:	dd000615 	stw	r20,24(sp)
    3f30:	dc800415 	stw	r18,16(sp)
    3f34:	dc400315 	stw	r17,12(sp)
    3f38:	d9000115 	stw	r4,4(sp)
    3f3c:	2821883a 	mov	r16,r5
    3f40:	3027883a 	mov	r19,r6
    3f44:	10007426 	beq	r2,zero,4118 <__hexnan+0x218>
    3f48:	80c00017 	ldw	r3,0(r16)
    3f4c:	1805d17a 	srai	r2,r3,5
    3f50:	18c007cc 	andi	r3,r3,31
    3f54:	1839003a 	cmpeq	fp,r3,zero
    3f58:	1085883a 	add	r2,r2,r2
    3f5c:	1085883a 	add	r2,r2,r2
    3f60:	d8c00015 	stw	r3,0(sp)
    3f64:	14c5883a 	add	r2,r2,r19
    3f68:	e000011e 	bne	fp,zero,3f70 <__hexnan+0x70>
    3f6c:	10800104 	addi	r2,r2,4
    3f70:	d8c00117 	ldw	r3,4(sp)
    3f74:	153fff04 	addi	r20,r2,-4
    3f78:	a021883a 	mov	r16,r20
    3f7c:	1c400017 	ldw	r17,0(r3)
    3f80:	a02b883a 	mov	r21,r20
    3f84:	0025883a 	mov	r18,zero
    3f88:	002f883a 	mov	r23,zero
    3f8c:	000d883a 	mov	r6,zero
    3f90:	103fff15 	stw	zero,-4(r2)
    3f94:	8c400044 	addi	r17,r17,1
    3f98:	89000003 	ldbu	r4,0(r17)
    3f9c:	20000e26 	beq	r4,zero,3fd8 <__hexnan+0xd8>
    3fa0:	2585883a 	add	r2,r4,r22
    3fa4:	10c00003 	ldbu	r3,0(r2)
    3fa8:	18002e1e 	bne	r3,zero,4064 <__hexnan+0x164>
    3fac:	00800804 	movi	r2,32
    3fb0:	11005536 	bltu	r2,r4,4108 <__hexnan+0x208>
    3fb4:	bcbff70e 	bge	r23,r18,3f94 <__hexnan+0x94>
    3fb8:	8540022e 	bgeu	r16,r21,3fc4 <__hexnan+0xc4>
    3fbc:	008001c4 	movi	r2,7
    3fc0:	11803c0e 	bge	r2,r6,40b4 <__hexnan+0x1b4>
    3fc4:	9c003536 	bltu	r19,r16,409c <__hexnan+0x19c>
    3fc8:	8c400044 	addi	r17,r17,1
    3fcc:	89000003 	ldbu	r4,0(r17)
    3fd0:	01800204 	movi	r6,8
    3fd4:	203ff21e 	bne	r4,zero,3fa0 <__hexnan+0xa0>
    3fd8:	90004d26 	beq	r18,zero,4110 <__hexnan+0x210>
    3fdc:	85404336 	bltu	r16,r21,40ec <__hexnan+0x1ec>
    3fe0:	9c00382e 	bgeu	r19,r16,40c4 <__hexnan+0x1c4>
    3fe4:	9807883a 	mov	r3,r19
    3fe8:	80800017 	ldw	r2,0(r16)
    3fec:	84000104 	addi	r16,r16,4
    3ff0:	18800015 	stw	r2,0(r3)
    3ff4:	18c00104 	addi	r3,r3,4
    3ff8:	a43ffb2e 	bgeu	r20,r16,3fe8 <__hexnan+0xe8>
    3ffc:	18000015 	stw	zero,0(r3)
    4000:	18c00104 	addi	r3,r3,4
    4004:	a0fffd2e 	bgeu	r20,r3,3ffc <__hexnan+0xfc>
    4008:	a0800017 	ldw	r2,0(r20)
    400c:	1000071e 	bne	r2,zero,402c <__hexnan+0x12c>
    4010:	9d004326 	beq	r19,r20,4120 <__hexnan+0x220>
    4014:	a007883a 	mov	r3,r20
    4018:	00000106 	br	4020 <__hexnan+0x120>
    401c:	98c04026 	beq	r19,r3,4120 <__hexnan+0x220>
    4020:	18ffff04 	addi	r3,r3,-4
    4024:	18800017 	ldw	r2,0(r3)
    4028:	103ffc26 	beq	r2,zero,401c <__hexnan+0x11c>
    402c:	00c00144 	movi	r3,5
    4030:	1805883a 	mov	r2,r3
    4034:	dfc00b17 	ldw	ra,44(sp)
    4038:	df000a17 	ldw	fp,40(sp)
    403c:	ddc00917 	ldw	r23,36(sp)
    4040:	dd800817 	ldw	r22,32(sp)
    4044:	dd400717 	ldw	r21,28(sp)
    4048:	dd000617 	ldw	r20,24(sp)
    404c:	dcc00517 	ldw	r19,20(sp)
    4050:	dc800417 	ldw	r18,16(sp)
    4054:	dc400317 	ldw	r17,12(sp)
    4058:	dc000217 	ldw	r16,8(sp)
    405c:	dec00c04 	addi	sp,sp,48
    4060:	f800283a 	ret
    4064:	31800044 	addi	r6,r6,1
    4068:	00800204 	movi	r2,8
    406c:	94800044 	addi	r18,r18,1
    4070:	1180040e 	bge	r2,r6,4084 <__hexnan+0x184>
    4074:	9c3fc72e 	bgeu	r19,r16,3f94 <__hexnan+0x94>
    4078:	843fff04 	addi	r16,r16,-4
    407c:	80000015 	stw	zero,0(r16)
    4080:	01800044 	movi	r6,1
    4084:	80800017 	ldw	r2,0(r16)
    4088:	18c003cc 	andi	r3,r3,15
    408c:	1004913a 	slli	r2,r2,4
    4090:	10c4b03a 	or	r2,r2,r3
    4094:	80800015 	stw	r2,0(r16)
    4098:	003fbe06 	br	3f94 <__hexnan+0x94>
    409c:	843fff04 	addi	r16,r16,-4
    40a0:	802b883a 	mov	r21,r16
    40a4:	902f883a 	mov	r23,r18
    40a8:	000d883a 	mov	r6,zero
    40ac:	80000015 	stw	zero,0(r16)
    40b0:	003fb806 	br	3f94 <__hexnan+0x94>
    40b4:	8009883a 	mov	r4,r16
    40b8:	a80b883a 	mov	r5,r21
    40bc:	0003eb40 	call	3eb4 <L_shift>
    40c0:	003fc006 	br	3fc4 <__hexnan+0xc4>
    40c4:	e03fd01e 	bne	fp,zero,4008 <__hexnan+0x108>
    40c8:	d8c00017 	ldw	r3,0(sp)
    40cc:	00800804 	movi	r2,32
    40d0:	10c5c83a 	sub	r2,r2,r3
    40d4:	00ffffc4 	movi	r3,-1
    40d8:	1886d83a 	srl	r3,r3,r2
    40dc:	a0800017 	ldw	r2,0(r20)
    40e0:	10c4703a 	and	r2,r2,r3
    40e4:	a0800015 	stw	r2,0(r20)
    40e8:	003fc806 	br	400c <__hexnan+0x10c>
    40ec:	008001c4 	movi	r2,7
    40f0:	11bfbb16 	blt	r2,r6,3fe0 <__hexnan+0xe0>
    40f4:	a80b883a 	mov	r5,r21
    40f8:	8009883a 	mov	r4,r16
    40fc:	0003eb40 	call	3eb4 <L_shift>
    4100:	9c3ff02e 	bgeu	r19,r16,40c4 <__hexnan+0x1c4>
    4104:	003fb706 	br	3fe4 <__hexnan+0xe4>
    4108:	00800a44 	movi	r2,41
    410c:	20800826 	beq	r4,r2,4130 <__hexnan+0x230>
    4110:	00c00104 	movi	r3,4
    4114:	003fc606 	br	4030 <__hexnan+0x130>
    4118:	00035a00 	call	35a0 <__hexdig_init>
    411c:	003f8a06 	br	3f48 <__hexnan+0x48>
    4120:	00800044 	movi	r2,1
    4124:	00c00144 	movi	r3,5
    4128:	98800015 	stw	r2,0(r19)
    412c:	003fc006 	br	4030 <__hexnan+0x130>
    4130:	903ff726 	beq	r18,zero,4110 <__hexnan+0x210>
    4134:	d8c00117 	ldw	r3,4(sp)
    4138:	88800044 	addi	r2,r17,1
    413c:	18800015 	stw	r2,0(r3)
    4140:	857fa72e 	bgeu	r16,r21,3fe0 <__hexnan+0xe0>
    4144:	003fe906 	br	40ec <__hexnan+0x1ec>

00004148 <memchr>:
    4148:	008000c4 	movi	r2,3
    414c:	29403fcc 	andi	r5,r5,255
    4150:	2007883a 	mov	r3,r4
    4154:	1180022e 	bgeu	r2,r6,4160 <memchr+0x18>
    4158:	2084703a 	and	r2,r4,r2
    415c:	10000b26 	beq	r2,zero,418c <memchr+0x44>
    4160:	313fffc4 	addi	r4,r6,-1
    4164:	3000051e 	bne	r6,zero,417c <memchr+0x34>
    4168:	00002c06 	br	421c <memchr+0xd4>
    416c:	213fffc4 	addi	r4,r4,-1
    4170:	00bfffc4 	movi	r2,-1
    4174:	18c00044 	addi	r3,r3,1
    4178:	20802826 	beq	r4,r2,421c <memchr+0xd4>
    417c:	18800003 	ldbu	r2,0(r3)
    4180:	28bffa1e 	bne	r5,r2,416c <memchr+0x24>
    4184:	1805883a 	mov	r2,r3
    4188:	f800283a 	ret
    418c:	0011883a 	mov	r8,zero
    4190:	0007883a 	mov	r3,zero
    4194:	01c00104 	movi	r7,4
    4198:	4004923a 	slli	r2,r8,8
    419c:	18c00044 	addi	r3,r3,1
    41a0:	1151883a 	add	r8,r2,r5
    41a4:	19fffc1e 	bne	r3,r7,4198 <memchr+0x50>
    41a8:	02bfbff4 	movhi	r10,65279
    41ac:	52bfbfc4 	addi	r10,r10,-257
    41b0:	02602074 	movhi	r9,32897
    41b4:	4a602004 	addi	r9,r9,-32640
    41b8:	02c000c4 	movi	r11,3
    41bc:	20800017 	ldw	r2,0(r4)
    41c0:	31bfff04 	addi	r6,r6,-4
    41c4:	200f883a 	mov	r7,r4
    41c8:	1204f03a 	xor	r2,r2,r8
    41cc:	1287883a 	add	r3,r2,r10
    41d0:	1a46703a 	and	r3,r3,r9
    41d4:	0084303a 	nor	r2,zero,r2
    41d8:	10c4703a 	and	r2,r2,r3
    41dc:	10000b26 	beq	r2,zero,420c <memchr+0xc4>
    41e0:	20800003 	ldbu	r2,0(r4)
    41e4:	28800f26 	beq	r5,r2,4224 <memchr+0xdc>
    41e8:	20800043 	ldbu	r2,1(r4)
    41ec:	21c00044 	addi	r7,r4,1
    41f0:	28800c26 	beq	r5,r2,4224 <memchr+0xdc>
    41f4:	20800083 	ldbu	r2,2(r4)
    41f8:	21c00084 	addi	r7,r4,2
    41fc:	28800926 	beq	r5,r2,4224 <memchr+0xdc>
    4200:	208000c3 	ldbu	r2,3(r4)
    4204:	21c000c4 	addi	r7,r4,3
    4208:	28800626 	beq	r5,r2,4224 <memchr+0xdc>
    420c:	21000104 	addi	r4,r4,4
    4210:	59bfea36 	bltu	r11,r6,41bc <memchr+0x74>
    4214:	2007883a 	mov	r3,r4
    4218:	003fd106 	br	4160 <memchr+0x18>
    421c:	0005883a 	mov	r2,zero
    4220:	f800283a 	ret
    4224:	3805883a 	mov	r2,r7
    4228:	f800283a 	ret

0000422c <memcmp>:
    422c:	00c000c4 	movi	r3,3
    4230:	1980032e 	bgeu	r3,r6,4240 <memcmp+0x14>
    4234:	2144b03a 	or	r2,r4,r5
    4238:	10c4703a 	and	r2,r2,r3
    423c:	10000f26 	beq	r2,zero,427c <memcmp+0x50>
    4240:	31ffffc4 	addi	r7,r6,-1
    4244:	3000061e 	bne	r6,zero,4260 <memcmp+0x34>
    4248:	00000a06 	br	4274 <memcmp+0x48>
    424c:	39ffffc4 	addi	r7,r7,-1
    4250:	00bfffc4 	movi	r2,-1
    4254:	21000044 	addi	r4,r4,1
    4258:	29400044 	addi	r5,r5,1
    425c:	38800526 	beq	r7,r2,4274 <memcmp+0x48>
    4260:	20c00003 	ldbu	r3,0(r4)
    4264:	28800003 	ldbu	r2,0(r5)
    4268:	18bff826 	beq	r3,r2,424c <memcmp+0x20>
    426c:	1885c83a 	sub	r2,r3,r2
    4270:	f800283a 	ret
    4274:	0005883a 	mov	r2,zero
    4278:	f800283a 	ret
    427c:	180f883a 	mov	r7,r3
    4280:	20c00017 	ldw	r3,0(r4)
    4284:	28800017 	ldw	r2,0(r5)
    4288:	18bfed1e 	bne	r3,r2,4240 <memcmp+0x14>
    428c:	31bfff04 	addi	r6,r6,-4
    4290:	21000104 	addi	r4,r4,4
    4294:	29400104 	addi	r5,r5,4
    4298:	39bff936 	bltu	r7,r6,4280 <memcmp+0x54>
    429c:	003fe806 	br	4240 <memcmp+0x14>

000042a0 <memcpy>:
    42a0:	01c003c4 	movi	r7,15
    42a4:	2007883a 	mov	r3,r4
    42a8:	3980032e 	bgeu	r7,r6,42b8 <memcpy+0x18>
    42ac:	2904b03a 	or	r2,r5,r4
    42b0:	108000cc 	andi	r2,r2,3
    42b4:	10000926 	beq	r2,zero,42dc <memcpy+0x3c>
    42b8:	30000626 	beq	r6,zero,42d4 <memcpy+0x34>
    42bc:	30cd883a 	add	r6,r6,r3
    42c0:	28800003 	ldbu	r2,0(r5)
    42c4:	29400044 	addi	r5,r5,1
    42c8:	18800005 	stb	r2,0(r3)
    42cc:	18c00044 	addi	r3,r3,1
    42d0:	30fffb1e 	bne	r6,r3,42c0 <memcpy+0x20>
    42d4:	2005883a 	mov	r2,r4
    42d8:	f800283a 	ret
    42dc:	3811883a 	mov	r8,r7
    42e0:	200f883a 	mov	r7,r4
    42e4:	28c00017 	ldw	r3,0(r5)
    42e8:	31bffc04 	addi	r6,r6,-16
    42ec:	38c00015 	stw	r3,0(r7)
    42f0:	28800117 	ldw	r2,4(r5)
    42f4:	38800115 	stw	r2,4(r7)
    42f8:	28c00217 	ldw	r3,8(r5)
    42fc:	38c00215 	stw	r3,8(r7)
    4300:	28800317 	ldw	r2,12(r5)
    4304:	29400404 	addi	r5,r5,16
    4308:	38800315 	stw	r2,12(r7)
    430c:	39c00404 	addi	r7,r7,16
    4310:	41bff436 	bltu	r8,r6,42e4 <memcpy+0x44>
    4314:	008000c4 	movi	r2,3
    4318:	1180072e 	bgeu	r2,r6,4338 <memcpy+0x98>
    431c:	1007883a 	mov	r3,r2
    4320:	28800017 	ldw	r2,0(r5)
    4324:	31bfff04 	addi	r6,r6,-4
    4328:	29400104 	addi	r5,r5,4
    432c:	38800015 	stw	r2,0(r7)
    4330:	39c00104 	addi	r7,r7,4
    4334:	19bffa36 	bltu	r3,r6,4320 <memcpy+0x80>
    4338:	3807883a 	mov	r3,r7
    433c:	003fde06 	br	42b8 <memcpy+0x18>

00004340 <_Bfree>:
    4340:	28000826 	beq	r5,zero,4364 <_Bfree+0x24>
    4344:	28800117 	ldw	r2,4(r5)
    4348:	21001317 	ldw	r4,76(r4)
    434c:	1085883a 	add	r2,r2,r2
    4350:	1085883a 	add	r2,r2,r2
    4354:	1105883a 	add	r2,r2,r4
    4358:	10c00017 	ldw	r3,0(r2)
    435c:	28c00015 	stw	r3,0(r5)
    4360:	11400015 	stw	r5,0(r2)
    4364:	f800283a 	ret

00004368 <__hi0bits>:
    4368:	20bfffec 	andhi	r2,r4,65535
    436c:	10001426 	beq	r2,zero,43c0 <__hi0bits+0x58>
    4370:	0007883a 	mov	r3,zero
    4374:	20bfc02c 	andhi	r2,r4,65280
    4378:	1000021e 	bne	r2,zero,4384 <__hi0bits+0x1c>
    437c:	2008923a 	slli	r4,r4,8
    4380:	18c00204 	addi	r3,r3,8
    4384:	20bc002c 	andhi	r2,r4,61440
    4388:	1000021e 	bne	r2,zero,4394 <__hi0bits+0x2c>
    438c:	2008913a 	slli	r4,r4,4
    4390:	18c00104 	addi	r3,r3,4
    4394:	20b0002c 	andhi	r2,r4,49152
    4398:	1000031e 	bne	r2,zero,43a8 <__hi0bits+0x40>
    439c:	2105883a 	add	r2,r4,r4
    43a0:	18c00084 	addi	r3,r3,2
    43a4:	1089883a 	add	r4,r2,r2
    43a8:	20000316 	blt	r4,zero,43b8 <__hi0bits+0x50>
    43ac:	2090002c 	andhi	r2,r4,16384
    43b0:	10000626 	beq	r2,zero,43cc <__hi0bits+0x64>
    43b4:	18c00044 	addi	r3,r3,1
    43b8:	1805883a 	mov	r2,r3
    43bc:	f800283a 	ret
    43c0:	2008943a 	slli	r4,r4,16
    43c4:	00c00404 	movi	r3,16
    43c8:	003fea06 	br	4374 <__hi0bits+0xc>
    43cc:	00c00804 	movi	r3,32
    43d0:	1805883a 	mov	r2,r3
    43d4:	f800283a 	ret

000043d8 <__lo0bits>:
    43d8:	20c00017 	ldw	r3,0(r4)
    43dc:	188001cc 	andi	r2,r3,7
    43e0:	10000a26 	beq	r2,zero,440c <__lo0bits+0x34>
    43e4:	1880004c 	andi	r2,r3,1
    43e8:	1005003a 	cmpeq	r2,r2,zero
    43ec:	10002126 	beq	r2,zero,4474 <__lo0bits+0x9c>
    43f0:	1880008c 	andi	r2,r3,2
    43f4:	1000251e 	bne	r2,zero,448c <__lo0bits+0xb4>
    43f8:	1804d0ba 	srli	r2,r3,2
    43fc:	01400084 	movi	r5,2
    4400:	20800015 	stw	r2,0(r4)
    4404:	2805883a 	mov	r2,r5
    4408:	f800283a 	ret
    440c:	18bfffcc 	andi	r2,r3,65535
    4410:	10001526 	beq	r2,zero,4468 <__lo0bits+0x90>
    4414:	000b883a 	mov	r5,zero
    4418:	18803fcc 	andi	r2,r3,255
    441c:	1000021e 	bne	r2,zero,4428 <__lo0bits+0x50>
    4420:	1806d23a 	srli	r3,r3,8
    4424:	29400204 	addi	r5,r5,8
    4428:	188003cc 	andi	r2,r3,15
    442c:	1000021e 	bne	r2,zero,4438 <__lo0bits+0x60>
    4430:	1806d13a 	srli	r3,r3,4
    4434:	29400104 	addi	r5,r5,4
    4438:	188000cc 	andi	r2,r3,3
    443c:	1000021e 	bne	r2,zero,4448 <__lo0bits+0x70>
    4440:	1806d0ba 	srli	r3,r3,2
    4444:	29400084 	addi	r5,r5,2
    4448:	1880004c 	andi	r2,r3,1
    444c:	1000031e 	bne	r2,zero,445c <__lo0bits+0x84>
    4450:	1806d07a 	srli	r3,r3,1
    4454:	18000a26 	beq	r3,zero,4480 <__lo0bits+0xa8>
    4458:	29400044 	addi	r5,r5,1
    445c:	2805883a 	mov	r2,r5
    4460:	20c00015 	stw	r3,0(r4)
    4464:	f800283a 	ret
    4468:	1806d43a 	srli	r3,r3,16
    446c:	01400404 	movi	r5,16
    4470:	003fe906 	br	4418 <__lo0bits+0x40>
    4474:	000b883a 	mov	r5,zero
    4478:	2805883a 	mov	r2,r5
    447c:	f800283a 	ret
    4480:	01400804 	movi	r5,32
    4484:	2805883a 	mov	r2,r5
    4488:	f800283a 	ret
    448c:	1804d07a 	srli	r2,r3,1
    4490:	01400044 	movi	r5,1
    4494:	20800015 	stw	r2,0(r4)
    4498:	003fda06 	br	4404 <__lo0bits+0x2c>

0000449c <__mcmp>:
    449c:	20800417 	ldw	r2,16(r4)
    44a0:	28c00417 	ldw	r3,16(r5)
    44a4:	10cfc83a 	sub	r7,r2,r3
    44a8:	38000c1e 	bne	r7,zero,44dc <__mcmp+0x40>
    44ac:	18c5883a 	add	r2,r3,r3
    44b0:	1085883a 	add	r2,r2,r2
    44b4:	10c00504 	addi	r3,r2,20
    44b8:	21000504 	addi	r4,r4,20
    44bc:	28cb883a 	add	r5,r5,r3
    44c0:	2085883a 	add	r2,r4,r2
    44c4:	10bfff04 	addi	r2,r2,-4
    44c8:	297fff04 	addi	r5,r5,-4
    44cc:	11800017 	ldw	r6,0(r2)
    44d0:	28c00017 	ldw	r3,0(r5)
    44d4:	30c0031e 	bne	r6,r3,44e4 <__mcmp+0x48>
    44d8:	20bffa36 	bltu	r4,r2,44c4 <__mcmp+0x28>
    44dc:	3805883a 	mov	r2,r7
    44e0:	f800283a 	ret
    44e4:	30c00336 	bltu	r6,r3,44f4 <__mcmp+0x58>
    44e8:	01c00044 	movi	r7,1
    44ec:	3805883a 	mov	r2,r7
    44f0:	f800283a 	ret
    44f4:	01ffffc4 	movi	r7,-1
    44f8:	003ff806 	br	44dc <__mcmp+0x40>

000044fc <__ulp>:
    44fc:	295ffc2c 	andhi	r5,r5,32752
    4500:	013f3034 	movhi	r4,64704
    4504:	290b883a 	add	r5,r5,r4
    4508:	0145c83a 	sub	r2,zero,r5
    450c:	1007d53a 	srai	r3,r2,20
    4510:	000d883a 	mov	r6,zero
    4514:	0140040e 	bge	zero,r5,4528 <__ulp+0x2c>
    4518:	280f883a 	mov	r7,r5
    451c:	3807883a 	mov	r3,r7
    4520:	3005883a 	mov	r2,r6
    4524:	f800283a 	ret
    4528:	008004c4 	movi	r2,19
    452c:	193ffb04 	addi	r4,r3,-20
    4530:	10c00c0e 	bge	r2,r3,4564 <__ulp+0x68>
    4534:	008007c4 	movi	r2,31
    4538:	1107c83a 	sub	r3,r2,r4
    453c:	00800784 	movi	r2,30
    4540:	01400044 	movi	r5,1
    4544:	11000216 	blt	r2,r4,4550 <__ulp+0x54>
    4548:	00800044 	movi	r2,1
    454c:	10ca983a 	sll	r5,r2,r3
    4550:	000f883a 	mov	r7,zero
    4554:	280d883a 	mov	r6,r5
    4558:	3807883a 	mov	r3,r7
    455c:	3005883a 	mov	r2,r6
    4560:	f800283a 	ret
    4564:	00800234 	movhi	r2,8
    4568:	10cfd83a 	sra	r7,r2,r3
    456c:	000d883a 	mov	r6,zero
    4570:	3005883a 	mov	r2,r6
    4574:	3807883a 	mov	r3,r7
    4578:	f800283a 	ret

0000457c <__b2d>:
    457c:	20800417 	ldw	r2,16(r4)
    4580:	defff904 	addi	sp,sp,-28
    4584:	dd000415 	stw	r20,16(sp)
    4588:	1085883a 	add	r2,r2,r2
    458c:	25000504 	addi	r20,r4,20
    4590:	1085883a 	add	r2,r2,r2
    4594:	dc000015 	stw	r16,0(sp)
    4598:	a0a1883a 	add	r16,r20,r2
    459c:	dd400515 	stw	r21,20(sp)
    45a0:	857fff17 	ldw	r21,-4(r16)
    45a4:	dc400115 	stw	r17,4(sp)
    45a8:	dfc00615 	stw	ra,24(sp)
    45ac:	a809883a 	mov	r4,r21
    45b0:	2823883a 	mov	r17,r5
    45b4:	dcc00315 	stw	r19,12(sp)
    45b8:	dc800215 	stw	r18,8(sp)
    45bc:	00043680 	call	4368 <__hi0bits>
    45c0:	100b883a 	mov	r5,r2
    45c4:	00800804 	movi	r2,32
    45c8:	1145c83a 	sub	r2,r2,r5
    45cc:	88800015 	stw	r2,0(r17)
    45d0:	00800284 	movi	r2,10
    45d4:	80ffff04 	addi	r3,r16,-4
    45d8:	11401416 	blt	r2,r5,462c <__b2d+0xb0>
    45dc:	008002c4 	movi	r2,11
    45e0:	1149c83a 	sub	r4,r2,r5
    45e4:	a0c02736 	bltu	r20,r3,4684 <__b2d+0x108>
    45e8:	000d883a 	mov	r6,zero
    45ec:	28800544 	addi	r2,r5,21
    45f0:	a906d83a 	srl	r3,r21,r4
    45f4:	a884983a 	sll	r2,r21,r2
    45f8:	1ccffc34 	orhi	r19,r3,16368
    45fc:	11a4b03a 	or	r18,r2,r6
    4600:	9005883a 	mov	r2,r18
    4604:	9807883a 	mov	r3,r19
    4608:	dfc00617 	ldw	ra,24(sp)
    460c:	dd400517 	ldw	r21,20(sp)
    4610:	dd000417 	ldw	r20,16(sp)
    4614:	dcc00317 	ldw	r19,12(sp)
    4618:	dc800217 	ldw	r18,8(sp)
    461c:	dc400117 	ldw	r17,4(sp)
    4620:	dc000017 	ldw	r16,0(sp)
    4624:	dec00704 	addi	sp,sp,28
    4628:	f800283a 	ret
    462c:	a0c00e36 	bltu	r20,r3,4668 <__b2d+0xec>
    4630:	293ffd44 	addi	r4,r5,-11
    4634:	000d883a 	mov	r6,zero
    4638:	20000f26 	beq	r4,zero,4678 <__b2d+0xfc>
    463c:	00800804 	movi	r2,32
    4640:	110bc83a 	sub	r5,r2,r4
    4644:	a0c01236 	bltu	r20,r3,4690 <__b2d+0x114>
    4648:	000f883a 	mov	r7,zero
    464c:	a904983a 	sll	r2,r21,r4
    4650:	3146d83a 	srl	r3,r6,r5
    4654:	3108983a 	sll	r4,r6,r4
    4658:	108ffc34 	orhi	r2,r2,16368
    465c:	18a6b03a 	or	r19,r3,r2
    4660:	3924b03a 	or	r18,r7,r4
    4664:	003fe606 	br	4600 <__b2d+0x84>
    4668:	293ffd44 	addi	r4,r5,-11
    466c:	81bffe17 	ldw	r6,-8(r16)
    4670:	80fffe04 	addi	r3,r16,-8
    4674:	203ff11e 	bne	r4,zero,463c <__b2d+0xc0>
    4678:	accffc34 	orhi	r19,r21,16368
    467c:	3025883a 	mov	r18,r6
    4680:	003fdf06 	br	4600 <__b2d+0x84>
    4684:	18bfff17 	ldw	r2,-4(r3)
    4688:	110cd83a 	srl	r6,r2,r4
    468c:	003fd706 	br	45ec <__b2d+0x70>
    4690:	18bfff17 	ldw	r2,-4(r3)
    4694:	114ed83a 	srl	r7,r2,r5
    4698:	003fec06 	br	464c <__b2d+0xd0>

0000469c <__ratio>:
    469c:	defff904 	addi	sp,sp,-28
    46a0:	dc400215 	stw	r17,8(sp)
    46a4:	2823883a 	mov	r17,r5
    46a8:	d80b883a 	mov	r5,sp
    46ac:	dfc00615 	stw	ra,24(sp)
    46b0:	dd000515 	stw	r20,20(sp)
    46b4:	dcc00415 	stw	r19,16(sp)
    46b8:	dc800315 	stw	r18,12(sp)
    46bc:	2025883a 	mov	r18,r4
    46c0:	000457c0 	call	457c <__b2d>
    46c4:	8809883a 	mov	r4,r17
    46c8:	d9400104 	addi	r5,sp,4
    46cc:	1027883a 	mov	r19,r2
    46d0:	1829883a 	mov	r20,r3
    46d4:	000457c0 	call	457c <__b2d>
    46d8:	89000417 	ldw	r4,16(r17)
    46dc:	91c00417 	ldw	r7,16(r18)
    46e0:	d9800117 	ldw	r6,4(sp)
    46e4:	180b883a 	mov	r5,r3
    46e8:	390fc83a 	sub	r7,r7,r4
    46ec:	1009883a 	mov	r4,r2
    46f0:	d8800017 	ldw	r2,0(sp)
    46f4:	380e917a 	slli	r7,r7,5
    46f8:	2011883a 	mov	r8,r4
    46fc:	1185c83a 	sub	r2,r2,r6
    4700:	11c5883a 	add	r2,r2,r7
    4704:	1006953a 	slli	r3,r2,20
    4708:	2813883a 	mov	r9,r5
    470c:	00800d0e 	bge	zero,r2,4744 <__ratio+0xa8>
    4710:	1d29883a 	add	r20,r3,r20
    4714:	a00b883a 	mov	r5,r20
    4718:	480f883a 	mov	r7,r9
    471c:	9809883a 	mov	r4,r19
    4720:	400d883a 	mov	r6,r8
    4724:	00060e00 	call	60e0 <__divdf3>
    4728:	dfc00617 	ldw	ra,24(sp)
    472c:	dd000517 	ldw	r20,20(sp)
    4730:	dcc00417 	ldw	r19,16(sp)
    4734:	dc800317 	ldw	r18,12(sp)
    4738:	dc400217 	ldw	r17,8(sp)
    473c:	dec00704 	addi	sp,sp,28
    4740:	f800283a 	ret
    4744:	28d3c83a 	sub	r9,r5,r3
    4748:	003ff206 	br	4714 <__ratio+0x78>

0000474c <_mprec_log10>:
    474c:	defffe04 	addi	sp,sp,-8
    4750:	008005c4 	movi	r2,23
    4754:	dc000015 	stw	r16,0(sp)
    4758:	dfc00115 	stw	ra,4(sp)
    475c:	2021883a 	mov	r16,r4
    4760:	11000c16 	blt	r2,r4,4794 <_mprec_log10+0x48>
    4764:	200490fa 	slli	r2,r4,3
    4768:	00c00074 	movhi	r3,1
    476c:	18e14504 	addi	r3,r3,-31468
    4770:	10c5883a 	add	r2,r2,r3
    4774:	12400117 	ldw	r9,4(r2)
    4778:	12000017 	ldw	r8,0(r2)
    477c:	4807883a 	mov	r3,r9
    4780:	4005883a 	mov	r2,r8
    4784:	dfc00117 	ldw	ra,4(sp)
    4788:	dc000017 	ldw	r16,0(sp)
    478c:	dec00204 	addi	sp,sp,8
    4790:	f800283a 	ret
    4794:	0011883a 	mov	r8,zero
    4798:	024ffc34 	movhi	r9,16368
    479c:	0005883a 	mov	r2,zero
    47a0:	00d00934 	movhi	r3,16420
    47a4:	480b883a 	mov	r5,r9
    47a8:	4009883a 	mov	r4,r8
    47ac:	180f883a 	mov	r7,r3
    47b0:	100d883a 	mov	r6,r2
    47b4:	0005d1c0 	call	5d1c <__muldf3>
    47b8:	843fffc4 	addi	r16,r16,-1
    47bc:	1011883a 	mov	r8,r2
    47c0:	1813883a 	mov	r9,r3
    47c4:	803ff51e 	bne	r16,zero,479c <_mprec_log10+0x50>
    47c8:	4005883a 	mov	r2,r8
    47cc:	4807883a 	mov	r3,r9
    47d0:	dfc00117 	ldw	ra,4(sp)
    47d4:	dc000017 	ldw	r16,0(sp)
    47d8:	dec00204 	addi	sp,sp,8
    47dc:	f800283a 	ret

000047e0 <__copybits>:
    47e0:	297fffc4 	addi	r5,r5,-1
    47e4:	30800417 	ldw	r2,16(r6)
    47e8:	280bd17a 	srai	r5,r5,5
    47ec:	31800504 	addi	r6,r6,20
    47f0:	1085883a 	add	r2,r2,r2
    47f4:	294b883a 	add	r5,r5,r5
    47f8:	294b883a 	add	r5,r5,r5
    47fc:	1085883a 	add	r2,r2,r2
    4800:	290b883a 	add	r5,r5,r4
    4804:	3087883a 	add	r3,r6,r2
    4808:	29400104 	addi	r5,r5,4
    480c:	30c0052e 	bgeu	r6,r3,4824 <__copybits+0x44>
    4810:	30800017 	ldw	r2,0(r6)
    4814:	31800104 	addi	r6,r6,4
    4818:	20800015 	stw	r2,0(r4)
    481c:	21000104 	addi	r4,r4,4
    4820:	30fffb36 	bltu	r6,r3,4810 <__copybits+0x30>
    4824:	2140032e 	bgeu	r4,r5,4834 <__copybits+0x54>
    4828:	20000015 	stw	zero,0(r4)
    482c:	21000104 	addi	r4,r4,4
    4830:	217ffd36 	bltu	r4,r5,4828 <__copybits+0x48>
    4834:	f800283a 	ret

00004838 <__any_on>:
    4838:	20800417 	ldw	r2,16(r4)
    483c:	2807d17a 	srai	r3,r5,5
    4840:	21000504 	addi	r4,r4,20
    4844:	10c00d0e 	bge	r2,r3,487c <__any_on+0x44>
    4848:	1085883a 	add	r2,r2,r2
    484c:	1085883a 	add	r2,r2,r2
    4850:	208d883a 	add	r6,r4,r2
    4854:	2180182e 	bgeu	r4,r6,48b8 <__any_on+0x80>
    4858:	30bfff17 	ldw	r2,-4(r6)
    485c:	30ffff04 	addi	r3,r6,-4
    4860:	1000041e 	bne	r2,zero,4874 <__any_on+0x3c>
    4864:	20c0142e 	bgeu	r4,r3,48b8 <__any_on+0x80>
    4868:	18ffff04 	addi	r3,r3,-4
    486c:	18800017 	ldw	r2,0(r3)
    4870:	103ffc26 	beq	r2,zero,4864 <__any_on+0x2c>
    4874:	00800044 	movi	r2,1
    4878:	f800283a 	ret
    487c:	18800a0e 	bge	r3,r2,48a8 <__any_on+0x70>
    4880:	294007cc 	andi	r5,r5,31
    4884:	28000826 	beq	r5,zero,48a8 <__any_on+0x70>
    4888:	18c5883a 	add	r2,r3,r3
    488c:	1085883a 	add	r2,r2,r2
    4890:	208d883a 	add	r6,r4,r2
    4894:	30c00017 	ldw	r3,0(r6)
    4898:	1944d83a 	srl	r2,r3,r5
    489c:	1144983a 	sll	r2,r2,r5
    48a0:	18bff41e 	bne	r3,r2,4874 <__any_on+0x3c>
    48a4:	003feb06 	br	4854 <__any_on+0x1c>
    48a8:	18c5883a 	add	r2,r3,r3
    48ac:	1085883a 	add	r2,r2,r2
    48b0:	208d883a 	add	r6,r4,r2
    48b4:	003fe706 	br	4854 <__any_on+0x1c>
    48b8:	0005883a 	mov	r2,zero
    48bc:	f800283a 	ret

000048c0 <_Balloc>:
    48c0:	20c01317 	ldw	r3,76(r4)
    48c4:	defffb04 	addi	sp,sp,-20
    48c8:	dcc00315 	stw	r19,12(sp)
    48cc:	dc800215 	stw	r18,8(sp)
    48d0:	dfc00415 	stw	ra,16(sp)
    48d4:	2825883a 	mov	r18,r5
    48d8:	dc400115 	stw	r17,4(sp)
    48dc:	dc000015 	stw	r16,0(sp)
    48e0:	2027883a 	mov	r19,r4
    48e4:	01800404 	movi	r6,16
    48e8:	01400104 	movi	r5,4
    48ec:	18001726 	beq	r3,zero,494c <_Balloc+0x8c>
    48f0:	01400044 	movi	r5,1
    48f4:	9485883a 	add	r2,r18,r18
    48f8:	2ca2983a 	sll	r17,r5,r18
    48fc:	1085883a 	add	r2,r2,r2
    4900:	10c7883a 	add	r3,r2,r3
    4904:	1c000017 	ldw	r16,0(r3)
    4908:	8c4d883a 	add	r6,r17,r17
    490c:	318d883a 	add	r6,r6,r6
    4910:	9809883a 	mov	r4,r19
    4914:	31800504 	addi	r6,r6,20
    4918:	80001226 	beq	r16,zero,4964 <_Balloc+0xa4>
    491c:	80800017 	ldw	r2,0(r16)
    4920:	18800015 	stw	r2,0(r3)
    4924:	80000415 	stw	zero,16(r16)
    4928:	80000315 	stw	zero,12(r16)
    492c:	8005883a 	mov	r2,r16
    4930:	dfc00417 	ldw	ra,16(sp)
    4934:	dcc00317 	ldw	r19,12(sp)
    4938:	dc800217 	ldw	r18,8(sp)
    493c:	dc400117 	ldw	r17,4(sp)
    4940:	dc000017 	ldw	r16,0(sp)
    4944:	dec00504 	addi	sp,sp,20
    4948:	f800283a 	ret
    494c:	00054ac0 	call	54ac <_calloc_r>
    4950:	1007883a 	mov	r3,r2
    4954:	0021883a 	mov	r16,zero
    4958:	98801315 	stw	r2,76(r19)
    495c:	103fe41e 	bne	r2,zero,48f0 <_Balloc+0x30>
    4960:	003ff206 	br	492c <_Balloc+0x6c>
    4964:	00054ac0 	call	54ac <_calloc_r>
    4968:	103ff026 	beq	r2,zero,492c <_Balloc+0x6c>
    496c:	1021883a 	mov	r16,r2
    4970:	14800115 	stw	r18,4(r2)
    4974:	14400215 	stw	r17,8(r2)
    4978:	003fea06 	br	4924 <_Balloc+0x64>

0000497c <__d2b>:
    497c:	defff504 	addi	sp,sp,-44
    4980:	dcc00515 	stw	r19,20(sp)
    4984:	04c00044 	movi	r19,1
    4988:	dc000215 	stw	r16,8(sp)
    498c:	2821883a 	mov	r16,r5
    4990:	980b883a 	mov	r5,r19
    4994:	ddc00915 	stw	r23,36(sp)
    4998:	dd800815 	stw	r22,32(sp)
    499c:	dd400715 	stw	r21,28(sp)
    49a0:	dd000615 	stw	r20,24(sp)
    49a4:	dc800415 	stw	r18,16(sp)
    49a8:	dc400315 	stw	r17,12(sp)
    49ac:	dfc00a15 	stw	ra,40(sp)
    49b0:	3023883a 	mov	r17,r6
    49b4:	382d883a 	mov	r22,r7
    49b8:	ddc00b17 	ldw	r23,44(sp)
    49bc:	00048c00 	call	48c0 <_Balloc>
    49c0:	1025883a 	mov	r18,r2
    49c4:	00a00034 	movhi	r2,32768
    49c8:	10bfffc4 	addi	r2,r2,-1
    49cc:	8888703a 	and	r4,r17,r2
    49d0:	202ad53a 	srli	r21,r4,20
    49d4:	00800434 	movhi	r2,16
    49d8:	10bfffc4 	addi	r2,r2,-1
    49dc:	8886703a 	and	r3,r17,r2
    49e0:	a829003a 	cmpeq	r20,r21,zero
    49e4:	800b883a 	mov	r5,r16
    49e8:	d8c00115 	stw	r3,4(sp)
    49ec:	94000504 	addi	r16,r18,20
    49f0:	a000021e 	bne	r20,zero,49fc <__d2b+0x80>
    49f4:	18c00434 	orhi	r3,r3,16
    49f8:	d8c00115 	stw	r3,4(sp)
    49fc:	28002726 	beq	r5,zero,4a9c <__d2b+0x120>
    4a00:	d809883a 	mov	r4,sp
    4a04:	d9400015 	stw	r5,0(sp)
    4a08:	00043d80 	call	43d8 <__lo0bits>
    4a0c:	100d883a 	mov	r6,r2
    4a10:	10003526 	beq	r2,zero,4ae8 <__d2b+0x16c>
    4a14:	d8c00117 	ldw	r3,4(sp)
    4a18:	00800804 	movi	r2,32
    4a1c:	1185c83a 	sub	r2,r2,r6
    4a20:	d9000017 	ldw	r4,0(sp)
    4a24:	1886983a 	sll	r3,r3,r2
    4a28:	1906b03a 	or	r3,r3,r4
    4a2c:	90c00515 	stw	r3,20(r18)
    4a30:	d8c00117 	ldw	r3,4(sp)
    4a34:	1986d83a 	srl	r3,r3,r6
    4a38:	d8c00115 	stw	r3,4(sp)
    4a3c:	180b003a 	cmpeq	r5,r3,zero
    4a40:	00800084 	movi	r2,2
    4a44:	114bc83a 	sub	r5,r2,r5
    4a48:	80c00115 	stw	r3,4(r16)
    4a4c:	91400415 	stw	r5,16(r18)
    4a50:	a0001a1e 	bne	r20,zero,4abc <__d2b+0x140>
    4a54:	3545883a 	add	r2,r6,r21
    4a58:	10bef344 	addi	r2,r2,-1075
    4a5c:	00c00d44 	movi	r3,53
    4a60:	b0800015 	stw	r2,0(r22)
    4a64:	1987c83a 	sub	r3,r3,r6
    4a68:	b8c00015 	stw	r3,0(r23)
    4a6c:	9005883a 	mov	r2,r18
    4a70:	dfc00a17 	ldw	ra,40(sp)
    4a74:	ddc00917 	ldw	r23,36(sp)
    4a78:	dd800817 	ldw	r22,32(sp)
    4a7c:	dd400717 	ldw	r21,28(sp)
    4a80:	dd000617 	ldw	r20,24(sp)
    4a84:	dcc00517 	ldw	r19,20(sp)
    4a88:	dc800417 	ldw	r18,16(sp)
    4a8c:	dc400317 	ldw	r17,12(sp)
    4a90:	dc000217 	ldw	r16,8(sp)
    4a94:	dec00b04 	addi	sp,sp,44
    4a98:	f800283a 	ret
    4a9c:	d9000104 	addi	r4,sp,4
    4aa0:	00043d80 	call	43d8 <__lo0bits>
    4aa4:	11800804 	addi	r6,r2,32
    4aa8:	d8800117 	ldw	r2,4(sp)
    4aac:	94c00415 	stw	r19,16(r18)
    4ab0:	980b883a 	mov	r5,r19
    4ab4:	90800515 	stw	r2,20(r18)
    4ab8:	a03fe626 	beq	r20,zero,4a54 <__d2b+0xd8>
    4abc:	2945883a 	add	r2,r5,r5
    4ac0:	1085883a 	add	r2,r2,r2
    4ac4:	1405883a 	add	r2,r2,r16
    4ac8:	113fff17 	ldw	r4,-4(r2)
    4acc:	30fef384 	addi	r3,r6,-1074
    4ad0:	2820917a 	slli	r16,r5,5
    4ad4:	b0c00015 	stw	r3,0(r22)
    4ad8:	00043680 	call	4368 <__hi0bits>
    4adc:	80a1c83a 	sub	r16,r16,r2
    4ae0:	bc000015 	stw	r16,0(r23)
    4ae4:	003fe106 	br	4a6c <__d2b+0xf0>
    4ae8:	d8800017 	ldw	r2,0(sp)
    4aec:	90800515 	stw	r2,20(r18)
    4af0:	d8c00117 	ldw	r3,4(sp)
    4af4:	003fd106 	br	4a3c <__d2b+0xc0>

00004af8 <__mdiff>:
    4af8:	defffb04 	addi	sp,sp,-20
    4afc:	dc000015 	stw	r16,0(sp)
    4b00:	2821883a 	mov	r16,r5
    4b04:	dc800215 	stw	r18,8(sp)
    4b08:	300b883a 	mov	r5,r6
    4b0c:	2025883a 	mov	r18,r4
    4b10:	8009883a 	mov	r4,r16
    4b14:	dc400115 	stw	r17,4(sp)
    4b18:	dfc00415 	stw	ra,16(sp)
    4b1c:	dcc00315 	stw	r19,12(sp)
    4b20:	3023883a 	mov	r17,r6
    4b24:	000449c0 	call	449c <__mcmp>
    4b28:	10004226 	beq	r2,zero,4c34 <__mdiff+0x13c>
    4b2c:	10005016 	blt	r2,zero,4c70 <__mdiff+0x178>
    4b30:	0027883a 	mov	r19,zero
    4b34:	81400117 	ldw	r5,4(r16)
    4b38:	9009883a 	mov	r4,r18
    4b3c:	00048c00 	call	48c0 <_Balloc>
    4b40:	1019883a 	mov	r12,r2
    4b44:	82800417 	ldw	r10,16(r16)
    4b48:	88800417 	ldw	r2,16(r17)
    4b4c:	81800504 	addi	r6,r16,20
    4b50:	5287883a 	add	r3,r10,r10
    4b54:	1085883a 	add	r2,r2,r2
    4b58:	18c7883a 	add	r3,r3,r3
    4b5c:	1085883a 	add	r2,r2,r2
    4b60:	8a000504 	addi	r8,r17,20
    4b64:	64c00315 	stw	r19,12(r12)
    4b68:	30db883a 	add	r13,r6,r3
    4b6c:	4097883a 	add	r11,r8,r2
    4b70:	61c00504 	addi	r7,r12,20
    4b74:	0013883a 	mov	r9,zero
    4b78:	31000017 	ldw	r4,0(r6)
    4b7c:	41400017 	ldw	r5,0(r8)
    4b80:	42000104 	addi	r8,r8,4
    4b84:	20bfffcc 	andi	r2,r4,65535
    4b88:	28ffffcc 	andi	r3,r5,65535
    4b8c:	10c5c83a 	sub	r2,r2,r3
    4b90:	1245883a 	add	r2,r2,r9
    4b94:	2008d43a 	srli	r4,r4,16
    4b98:	280ad43a 	srli	r5,r5,16
    4b9c:	1007d43a 	srai	r3,r2,16
    4ba0:	3880000d 	sth	r2,0(r7)
    4ba4:	2149c83a 	sub	r4,r4,r5
    4ba8:	20c9883a 	add	r4,r4,r3
    4bac:	3900008d 	sth	r4,2(r7)
    4bb0:	31800104 	addi	r6,r6,4
    4bb4:	39c00104 	addi	r7,r7,4
    4bb8:	2013d43a 	srai	r9,r4,16
    4bbc:	42ffee36 	bltu	r8,r11,4b78 <__mdiff+0x80>
    4bc0:	33400c2e 	bgeu	r6,r13,4bf4 <__mdiff+0xfc>
    4bc4:	30800017 	ldw	r2,0(r6)
    4bc8:	31800104 	addi	r6,r6,4
    4bcc:	10ffffcc 	andi	r3,r2,65535
    4bd0:	1a47883a 	add	r3,r3,r9
    4bd4:	1004d43a 	srli	r2,r2,16
    4bd8:	1809d43a 	srai	r4,r3,16
    4bdc:	38c0000d 	sth	r3,0(r7)
    4be0:	1105883a 	add	r2,r2,r4
    4be4:	3880008d 	sth	r2,2(r7)
    4be8:	1013d43a 	srai	r9,r2,16
    4bec:	39c00104 	addi	r7,r7,4
    4bf0:	337ff436 	bltu	r6,r13,4bc4 <__mdiff+0xcc>
    4bf4:	38bfff17 	ldw	r2,-4(r7)
    4bf8:	38ffff04 	addi	r3,r7,-4
    4bfc:	1000041e 	bne	r2,zero,4c10 <__mdiff+0x118>
    4c00:	18ffff04 	addi	r3,r3,-4
    4c04:	18800017 	ldw	r2,0(r3)
    4c08:	52bfffc4 	addi	r10,r10,-1
    4c0c:	103ffc26 	beq	r2,zero,4c00 <__mdiff+0x108>
    4c10:	6005883a 	mov	r2,r12
    4c14:	62800415 	stw	r10,16(r12)
    4c18:	dfc00417 	ldw	ra,16(sp)
    4c1c:	dcc00317 	ldw	r19,12(sp)
    4c20:	dc800217 	ldw	r18,8(sp)
    4c24:	dc400117 	ldw	r17,4(sp)
    4c28:	dc000017 	ldw	r16,0(sp)
    4c2c:	dec00504 	addi	sp,sp,20
    4c30:	f800283a 	ret
    4c34:	9009883a 	mov	r4,r18
    4c38:	000b883a 	mov	r5,zero
    4c3c:	00048c00 	call	48c0 <_Balloc>
    4c40:	1019883a 	mov	r12,r2
    4c44:	00800044 	movi	r2,1
    4c48:	60800415 	stw	r2,16(r12)
    4c4c:	6005883a 	mov	r2,r12
    4c50:	60000515 	stw	zero,20(r12)
    4c54:	dfc00417 	ldw	ra,16(sp)
    4c58:	dcc00317 	ldw	r19,12(sp)
    4c5c:	dc800217 	ldw	r18,8(sp)
    4c60:	dc400117 	ldw	r17,4(sp)
    4c64:	dc000017 	ldw	r16,0(sp)
    4c68:	dec00504 	addi	sp,sp,20
    4c6c:	f800283a 	ret
    4c70:	880d883a 	mov	r6,r17
    4c74:	04c00044 	movi	r19,1
    4c78:	8023883a 	mov	r17,r16
    4c7c:	3021883a 	mov	r16,r6
    4c80:	003fac06 	br	4b34 <__mdiff+0x3c>

00004c84 <__lshift>:
    4c84:	defff904 	addi	sp,sp,-28
    4c88:	28800417 	ldw	r2,16(r5)
    4c8c:	dc000015 	stw	r16,0(sp)
    4c90:	3021d17a 	srai	r16,r6,5
    4c94:	28c00217 	ldw	r3,8(r5)
    4c98:	10800044 	addi	r2,r2,1
    4c9c:	dc400115 	stw	r17,4(sp)
    4ca0:	80a3883a 	add	r17,r16,r2
    4ca4:	dd400515 	stw	r21,20(sp)
    4ca8:	dd000415 	stw	r20,16(sp)
    4cac:	dc800215 	stw	r18,8(sp)
    4cb0:	dfc00615 	stw	ra,24(sp)
    4cb4:	2825883a 	mov	r18,r5
    4cb8:	dcc00315 	stw	r19,12(sp)
    4cbc:	3029883a 	mov	r20,r6
    4cc0:	202b883a 	mov	r21,r4
    4cc4:	29400117 	ldw	r5,4(r5)
    4cc8:	1c40030e 	bge	r3,r17,4cd8 <__lshift+0x54>
    4ccc:	18c7883a 	add	r3,r3,r3
    4cd0:	29400044 	addi	r5,r5,1
    4cd4:	1c7ffd16 	blt	r3,r17,4ccc <__lshift+0x48>
    4cd8:	a809883a 	mov	r4,r21
    4cdc:	00048c00 	call	48c0 <_Balloc>
    4ce0:	1027883a 	mov	r19,r2
    4ce4:	11400504 	addi	r5,r2,20
    4ce8:	0400090e 	bge	zero,r16,4d10 <__lshift+0x8c>
    4cec:	2805883a 	mov	r2,r5
    4cf0:	0007883a 	mov	r3,zero
    4cf4:	18c00044 	addi	r3,r3,1
    4cf8:	10000015 	stw	zero,0(r2)
    4cfc:	10800104 	addi	r2,r2,4
    4d00:	80fffc1e 	bne	r16,r3,4cf4 <__lshift+0x70>
    4d04:	8405883a 	add	r2,r16,r16
    4d08:	1085883a 	add	r2,r2,r2
    4d0c:	288b883a 	add	r5,r5,r2
    4d10:	90800417 	ldw	r2,16(r18)
    4d14:	91000504 	addi	r4,r18,20
    4d18:	a18007cc 	andi	r6,r20,31
    4d1c:	1085883a 	add	r2,r2,r2
    4d20:	1085883a 	add	r2,r2,r2
    4d24:	208f883a 	add	r7,r4,r2
    4d28:	30001e26 	beq	r6,zero,4da4 <__lshift+0x120>
    4d2c:	00800804 	movi	r2,32
    4d30:	1191c83a 	sub	r8,r2,r6
    4d34:	0007883a 	mov	r3,zero
    4d38:	20800017 	ldw	r2,0(r4)
    4d3c:	1184983a 	sll	r2,r2,r6
    4d40:	1884b03a 	or	r2,r3,r2
    4d44:	28800015 	stw	r2,0(r5)
    4d48:	20c00017 	ldw	r3,0(r4)
    4d4c:	21000104 	addi	r4,r4,4
    4d50:	29400104 	addi	r5,r5,4
    4d54:	1a06d83a 	srl	r3,r3,r8
    4d58:	21fff736 	bltu	r4,r7,4d38 <__lshift+0xb4>
    4d5c:	28c00015 	stw	r3,0(r5)
    4d60:	18000126 	beq	r3,zero,4d68 <__lshift+0xe4>
    4d64:	8c400044 	addi	r17,r17,1
    4d68:	88bfffc4 	addi	r2,r17,-1
    4d6c:	98800415 	stw	r2,16(r19)
    4d70:	a809883a 	mov	r4,r21
    4d74:	900b883a 	mov	r5,r18
    4d78:	00043400 	call	4340 <_Bfree>
    4d7c:	9805883a 	mov	r2,r19
    4d80:	dfc00617 	ldw	ra,24(sp)
    4d84:	dd400517 	ldw	r21,20(sp)
    4d88:	dd000417 	ldw	r20,16(sp)
    4d8c:	dcc00317 	ldw	r19,12(sp)
    4d90:	dc800217 	ldw	r18,8(sp)
    4d94:	dc400117 	ldw	r17,4(sp)
    4d98:	dc000017 	ldw	r16,0(sp)
    4d9c:	dec00704 	addi	sp,sp,28
    4da0:	f800283a 	ret
    4da4:	20800017 	ldw	r2,0(r4)
    4da8:	21000104 	addi	r4,r4,4
    4dac:	28800015 	stw	r2,0(r5)
    4db0:	29400104 	addi	r5,r5,4
    4db4:	21ffec2e 	bgeu	r4,r7,4d68 <__lshift+0xe4>
    4db8:	20800017 	ldw	r2,0(r4)
    4dbc:	21000104 	addi	r4,r4,4
    4dc0:	28800015 	stw	r2,0(r5)
    4dc4:	29400104 	addi	r5,r5,4
    4dc8:	21fff636 	bltu	r4,r7,4da4 <__lshift+0x120>
    4dcc:	003fe606 	br	4d68 <__lshift+0xe4>

00004dd0 <__multiply>:
    4dd0:	defff004 	addi	sp,sp,-64
    4dd4:	dc800815 	stw	r18,32(sp)
    4dd8:	dc400715 	stw	r17,28(sp)
    4ddc:	2c800417 	ldw	r18,16(r5)
    4de0:	34400417 	ldw	r17,16(r6)
    4de4:	dcc00915 	stw	r19,36(sp)
    4de8:	dc000615 	stw	r16,24(sp)
    4dec:	dfc00f15 	stw	ra,60(sp)
    4df0:	df000e15 	stw	fp,56(sp)
    4df4:	ddc00d15 	stw	r23,52(sp)
    4df8:	dd800c15 	stw	r22,48(sp)
    4dfc:	dd400b15 	stw	r21,44(sp)
    4e00:	dd000a15 	stw	r20,40(sp)
    4e04:	2821883a 	mov	r16,r5
    4e08:	3027883a 	mov	r19,r6
    4e0c:	9440040e 	bge	r18,r17,4e20 <__multiply+0x50>
    4e10:	8825883a 	mov	r18,r17
    4e14:	2c400417 	ldw	r17,16(r5)
    4e18:	2827883a 	mov	r19,r5
    4e1c:	3021883a 	mov	r16,r6
    4e20:	80800217 	ldw	r2,8(r16)
    4e24:	9447883a 	add	r3,r18,r17
    4e28:	d8c00415 	stw	r3,16(sp)
    4e2c:	81400117 	ldw	r5,4(r16)
    4e30:	10c0010e 	bge	r2,r3,4e38 <__multiply+0x68>
    4e34:	29400044 	addi	r5,r5,1
    4e38:	00048c00 	call	48c0 <_Balloc>
    4e3c:	d8800515 	stw	r2,20(sp)
    4e40:	d9000417 	ldw	r4,16(sp)
    4e44:	d8c00517 	ldw	r3,20(sp)
    4e48:	2105883a 	add	r2,r4,r4
    4e4c:	1085883a 	add	r2,r2,r2
    4e50:	19000504 	addi	r4,r3,20
    4e54:	2085883a 	add	r2,r4,r2
    4e58:	d8800315 	stw	r2,12(sp)
    4e5c:	2080052e 	bgeu	r4,r2,4e74 <__multiply+0xa4>
    4e60:	2005883a 	mov	r2,r4
    4e64:	d8c00317 	ldw	r3,12(sp)
    4e68:	10000015 	stw	zero,0(r2)
    4e6c:	10800104 	addi	r2,r2,4
    4e70:	10fffc36 	bltu	r2,r3,4e64 <__multiply+0x94>
    4e74:	8c45883a 	add	r2,r17,r17
    4e78:	9487883a 	add	r3,r18,r18
    4e7c:	9dc00504 	addi	r23,r19,20
    4e80:	1085883a 	add	r2,r2,r2
    4e84:	84000504 	addi	r16,r16,20
    4e88:	18c7883a 	add	r3,r3,r3
    4e8c:	b885883a 	add	r2,r23,r2
    4e90:	dc000015 	stw	r16,0(sp)
    4e94:	d8800215 	stw	r2,8(sp)
    4e98:	80f9883a 	add	fp,r16,r3
    4e9c:	b880432e 	bgeu	r23,r2,4fac <__multiply+0x1dc>
    4ea0:	d9000115 	stw	r4,4(sp)
    4ea4:	b9000017 	ldw	r4,0(r23)
    4ea8:	253fffcc 	andi	r20,r4,65535
    4eac:	a0001a26 	beq	r20,zero,4f18 <__multiply+0x148>
    4eb0:	dcc00017 	ldw	r19,0(sp)
    4eb4:	dc800117 	ldw	r18,4(sp)
    4eb8:	002b883a 	mov	r21,zero
    4ebc:	9c400017 	ldw	r17,0(r19)
    4ec0:	94000017 	ldw	r16,0(r18)
    4ec4:	a009883a 	mov	r4,r20
    4ec8:	897fffcc 	andi	r5,r17,65535
    4ecc:	0006a900 	call	6a90 <__mulsi3>
    4ed0:	880ad43a 	srli	r5,r17,16
    4ed4:	80ffffcc 	andi	r3,r16,65535
    4ed8:	a8c7883a 	add	r3,r21,r3
    4edc:	a009883a 	mov	r4,r20
    4ee0:	10e3883a 	add	r17,r2,r3
    4ee4:	8020d43a 	srli	r16,r16,16
    4ee8:	0006a900 	call	6a90 <__mulsi3>
    4eec:	8806d43a 	srli	r3,r17,16
    4ef0:	1405883a 	add	r2,r2,r16
    4ef4:	9cc00104 	addi	r19,r19,4
    4ef8:	1887883a 	add	r3,r3,r2
    4efc:	90c0008d 	sth	r3,2(r18)
    4f00:	9440000d 	sth	r17,0(r18)
    4f04:	182ad43a 	srli	r21,r3,16
    4f08:	94800104 	addi	r18,r18,4
    4f0c:	9f3feb36 	bltu	r19,fp,4ebc <__multiply+0xec>
    4f10:	95400015 	stw	r21,0(r18)
    4f14:	b9000017 	ldw	r4,0(r23)
    4f18:	202ad43a 	srli	r21,r4,16
    4f1c:	a8001c26 	beq	r21,zero,4f90 <__multiply+0x1c0>
    4f20:	d9000117 	ldw	r4,4(sp)
    4f24:	dd000017 	ldw	r20,0(sp)
    4f28:	002d883a 	mov	r22,zero
    4f2c:	24c00017 	ldw	r19,0(r4)
    4f30:	2025883a 	mov	r18,r4
    4f34:	9823883a 	mov	r17,r19
    4f38:	a4000017 	ldw	r16,0(r20)
    4f3c:	a809883a 	mov	r4,r21
    4f40:	a5000104 	addi	r20,r20,4
    4f44:	817fffcc 	andi	r5,r16,65535
    4f48:	0006a900 	call	6a90 <__mulsi3>
    4f4c:	8806d43a 	srli	r3,r17,16
    4f50:	800ad43a 	srli	r5,r16,16
    4f54:	94c0000d 	sth	r19,0(r18)
    4f58:	b0c7883a 	add	r3,r22,r3
    4f5c:	10e1883a 	add	r16,r2,r3
    4f60:	9400008d 	sth	r16,2(r18)
    4f64:	a809883a 	mov	r4,r21
    4f68:	94800104 	addi	r18,r18,4
    4f6c:	0006a900 	call	6a90 <__mulsi3>
    4f70:	94400017 	ldw	r17,0(r18)
    4f74:	8020d43a 	srli	r16,r16,16
    4f78:	88ffffcc 	andi	r3,r17,65535
    4f7c:	10c5883a 	add	r2,r2,r3
    4f80:	80a7883a 	add	r19,r16,r2
    4f84:	982cd43a 	srli	r22,r19,16
    4f88:	a73feb36 	bltu	r20,fp,4f38 <__multiply+0x168>
    4f8c:	94c00015 	stw	r19,0(r18)
    4f90:	d8800217 	ldw	r2,8(sp)
    4f94:	bdc00104 	addi	r23,r23,4
    4f98:	b880042e 	bgeu	r23,r2,4fac <__multiply+0x1dc>
    4f9c:	d8c00117 	ldw	r3,4(sp)
    4fa0:	18c00104 	addi	r3,r3,4
    4fa4:	d8c00115 	stw	r3,4(sp)
    4fa8:	003fbe06 	br	4ea4 <__multiply+0xd4>
    4fac:	d9000417 	ldw	r4,16(sp)
    4fb0:	01000c0e 	bge	zero,r4,4fe4 <__multiply+0x214>
    4fb4:	d8c00317 	ldw	r3,12(sp)
    4fb8:	18bfff17 	ldw	r2,-4(r3)
    4fbc:	18ffff04 	addi	r3,r3,-4
    4fc0:	10000326 	beq	r2,zero,4fd0 <__multiply+0x200>
    4fc4:	00000706 	br	4fe4 <__multiply+0x214>
    4fc8:	18800017 	ldw	r2,0(r3)
    4fcc:	1000051e 	bne	r2,zero,4fe4 <__multiply+0x214>
    4fd0:	d9000417 	ldw	r4,16(sp)
    4fd4:	18ffff04 	addi	r3,r3,-4
    4fd8:	213fffc4 	addi	r4,r4,-1
    4fdc:	d9000415 	stw	r4,16(sp)
    4fe0:	203ff91e 	bne	r4,zero,4fc8 <__multiply+0x1f8>
    4fe4:	d8800417 	ldw	r2,16(sp)
    4fe8:	d8c00517 	ldw	r3,20(sp)
    4fec:	18800415 	stw	r2,16(r3)
    4ff0:	1805883a 	mov	r2,r3
    4ff4:	dfc00f17 	ldw	ra,60(sp)
    4ff8:	df000e17 	ldw	fp,56(sp)
    4ffc:	ddc00d17 	ldw	r23,52(sp)
    5000:	dd800c17 	ldw	r22,48(sp)
    5004:	dd400b17 	ldw	r21,44(sp)
    5008:	dd000a17 	ldw	r20,40(sp)
    500c:	dcc00917 	ldw	r19,36(sp)
    5010:	dc800817 	ldw	r18,32(sp)
    5014:	dc400717 	ldw	r17,28(sp)
    5018:	dc000617 	ldw	r16,24(sp)
    501c:	dec01004 	addi	sp,sp,64
    5020:	f800283a 	ret

00005024 <__i2b>:
    5024:	defffd04 	addi	sp,sp,-12
    5028:	dc000015 	stw	r16,0(sp)
    502c:	04000044 	movi	r16,1
    5030:	dc800115 	stw	r18,4(sp)
    5034:	2825883a 	mov	r18,r5
    5038:	800b883a 	mov	r5,r16
    503c:	dfc00215 	stw	ra,8(sp)
    5040:	00048c00 	call	48c0 <_Balloc>
    5044:	14000415 	stw	r16,16(r2)
    5048:	14800515 	stw	r18,20(r2)
    504c:	dfc00217 	ldw	ra,8(sp)
    5050:	dc800117 	ldw	r18,4(sp)
    5054:	dc000017 	ldw	r16,0(sp)
    5058:	dec00304 	addi	sp,sp,12
    505c:	f800283a 	ret

00005060 <__multadd>:
    5060:	defff604 	addi	sp,sp,-40
    5064:	dd800615 	stw	r22,24(sp)
    5068:	2d800417 	ldw	r22,16(r5)
    506c:	df000815 	stw	fp,32(sp)
    5070:	ddc00715 	stw	r23,28(sp)
    5074:	dd400515 	stw	r21,20(sp)
    5078:	dd000415 	stw	r20,16(sp)
    507c:	dcc00315 	stw	r19,12(sp)
    5080:	dc800215 	stw	r18,8(sp)
    5084:	dfc00915 	stw	ra,36(sp)
    5088:	dc400115 	stw	r17,4(sp)
    508c:	dc000015 	stw	r16,0(sp)
    5090:	282f883a 	mov	r23,r5
    5094:	2039883a 	mov	fp,r4
    5098:	302b883a 	mov	r21,r6
    509c:	3829883a 	mov	r20,r7
    50a0:	2c800504 	addi	r18,r5,20
    50a4:	0027883a 	mov	r19,zero
    50a8:	94400017 	ldw	r17,0(r18)
    50ac:	a80b883a 	mov	r5,r21
    50b0:	9cc00044 	addi	r19,r19,1
    50b4:	893fffcc 	andi	r4,r17,65535
    50b8:	0006a900 	call	6a90 <__mulsi3>
    50bc:	8808d43a 	srli	r4,r17,16
    50c0:	1521883a 	add	r16,r2,r20
    50c4:	a80b883a 	mov	r5,r21
    50c8:	0006a900 	call	6a90 <__mulsi3>
    50cc:	8008d43a 	srli	r4,r16,16
    50d0:	843fffcc 	andi	r16,r16,65535
    50d4:	1105883a 	add	r2,r2,r4
    50d8:	1006943a 	slli	r3,r2,16
    50dc:	1028d43a 	srli	r20,r2,16
    50e0:	1c07883a 	add	r3,r3,r16
    50e4:	90c00015 	stw	r3,0(r18)
    50e8:	94800104 	addi	r18,r18,4
    50ec:	9dbfee16 	blt	r19,r22,50a8 <__multadd+0x48>
    50f0:	a0000826 	beq	r20,zero,5114 <__multadd+0xb4>
    50f4:	b8800217 	ldw	r2,8(r23)
    50f8:	b080130e 	bge	r22,r2,5148 <__multadd+0xe8>
    50fc:	b585883a 	add	r2,r22,r22
    5100:	1085883a 	add	r2,r2,r2
    5104:	15c5883a 	add	r2,r2,r23
    5108:	b0c00044 	addi	r3,r22,1
    510c:	15000515 	stw	r20,20(r2)
    5110:	b8c00415 	stw	r3,16(r23)
    5114:	b805883a 	mov	r2,r23
    5118:	dfc00917 	ldw	ra,36(sp)
    511c:	df000817 	ldw	fp,32(sp)
    5120:	ddc00717 	ldw	r23,28(sp)
    5124:	dd800617 	ldw	r22,24(sp)
    5128:	dd400517 	ldw	r21,20(sp)
    512c:	dd000417 	ldw	r20,16(sp)
    5130:	dcc00317 	ldw	r19,12(sp)
    5134:	dc800217 	ldw	r18,8(sp)
    5138:	dc400117 	ldw	r17,4(sp)
    513c:	dc000017 	ldw	r16,0(sp)
    5140:	dec00a04 	addi	sp,sp,40
    5144:	f800283a 	ret
    5148:	b9400117 	ldw	r5,4(r23)
    514c:	e009883a 	mov	r4,fp
    5150:	29400044 	addi	r5,r5,1
    5154:	00048c00 	call	48c0 <_Balloc>
    5158:	b9800417 	ldw	r6,16(r23)
    515c:	b9400304 	addi	r5,r23,12
    5160:	11000304 	addi	r4,r2,12
    5164:	318d883a 	add	r6,r6,r6
    5168:	318d883a 	add	r6,r6,r6
    516c:	31800204 	addi	r6,r6,8
    5170:	1023883a 	mov	r17,r2
    5174:	00042a00 	call	42a0 <memcpy>
    5178:	b80b883a 	mov	r5,r23
    517c:	e009883a 	mov	r4,fp
    5180:	00043400 	call	4340 <_Bfree>
    5184:	882f883a 	mov	r23,r17
    5188:	003fdc06 	br	50fc <__multadd+0x9c>

0000518c <__pow5mult>:
    518c:	defffa04 	addi	sp,sp,-24
    5190:	308000cc 	andi	r2,r6,3
    5194:	dd000415 	stw	r20,16(sp)
    5198:	dcc00315 	stw	r19,12(sp)
    519c:	dc000015 	stw	r16,0(sp)
    51a0:	dfc00515 	stw	ra,20(sp)
    51a4:	dc800215 	stw	r18,8(sp)
    51a8:	dc400115 	stw	r17,4(sp)
    51ac:	3021883a 	mov	r16,r6
    51b0:	2027883a 	mov	r19,r4
    51b4:	2829883a 	mov	r20,r5
    51b8:	10002b1e 	bne	r2,zero,5268 <__pow5mult+0xdc>
    51bc:	8025d0ba 	srai	r18,r16,2
    51c0:	90001b26 	beq	r18,zero,5230 <__pow5mult+0xa4>
    51c4:	9c001217 	ldw	r16,72(r19)
    51c8:	8000081e 	bne	r16,zero,51ec <__pow5mult+0x60>
    51cc:	00003006 	br	5290 <__pow5mult+0x104>
    51d0:	800b883a 	mov	r5,r16
    51d4:	800d883a 	mov	r6,r16
    51d8:	9809883a 	mov	r4,r19
    51dc:	90001426 	beq	r18,zero,5230 <__pow5mult+0xa4>
    51e0:	80800017 	ldw	r2,0(r16)
    51e4:	10001b26 	beq	r2,zero,5254 <__pow5mult+0xc8>
    51e8:	1021883a 	mov	r16,r2
    51ec:	9080004c 	andi	r2,r18,1
    51f0:	1005003a 	cmpeq	r2,r2,zero
    51f4:	9025d07a 	srai	r18,r18,1
    51f8:	800d883a 	mov	r6,r16
    51fc:	9809883a 	mov	r4,r19
    5200:	a00b883a 	mov	r5,r20
    5204:	103ff21e 	bne	r2,zero,51d0 <__pow5mult+0x44>
    5208:	0004dd00 	call	4dd0 <__multiply>
    520c:	a00b883a 	mov	r5,r20
    5210:	9809883a 	mov	r4,r19
    5214:	1023883a 	mov	r17,r2
    5218:	00043400 	call	4340 <_Bfree>
    521c:	8829883a 	mov	r20,r17
    5220:	800b883a 	mov	r5,r16
    5224:	800d883a 	mov	r6,r16
    5228:	9809883a 	mov	r4,r19
    522c:	903fec1e 	bne	r18,zero,51e0 <__pow5mult+0x54>
    5230:	a005883a 	mov	r2,r20
    5234:	dfc00517 	ldw	ra,20(sp)
    5238:	dd000417 	ldw	r20,16(sp)
    523c:	dcc00317 	ldw	r19,12(sp)
    5240:	dc800217 	ldw	r18,8(sp)
    5244:	dc400117 	ldw	r17,4(sp)
    5248:	dc000017 	ldw	r16,0(sp)
    524c:	dec00604 	addi	sp,sp,24
    5250:	f800283a 	ret
    5254:	0004dd00 	call	4dd0 <__multiply>
    5258:	80800015 	stw	r2,0(r16)
    525c:	1021883a 	mov	r16,r2
    5260:	10000015 	stw	zero,0(r2)
    5264:	003fe106 	br	51ec <__pow5mult+0x60>
    5268:	1085883a 	add	r2,r2,r2
    526c:	00c00074 	movhi	r3,1
    5270:	18e18b04 	addi	r3,r3,-31188
    5274:	1085883a 	add	r2,r2,r2
    5278:	10c5883a 	add	r2,r2,r3
    527c:	11bfff17 	ldw	r6,-4(r2)
    5280:	000f883a 	mov	r7,zero
    5284:	00050600 	call	5060 <__multadd>
    5288:	1029883a 	mov	r20,r2
    528c:	003fcb06 	br	51bc <__pow5mult+0x30>
    5290:	9809883a 	mov	r4,r19
    5294:	01409c44 	movi	r5,625
    5298:	00050240 	call	5024 <__i2b>
    529c:	98801215 	stw	r2,72(r19)
    52a0:	1021883a 	mov	r16,r2
    52a4:	10000015 	stw	zero,0(r2)
    52a8:	003fd006 	br	51ec <__pow5mult+0x60>

000052ac <__s2b>:
    52ac:	defff904 	addi	sp,sp,-28
    52b0:	dcc00315 	stw	r19,12(sp)
    52b4:	dc800215 	stw	r18,8(sp)
    52b8:	2827883a 	mov	r19,r5
    52bc:	2025883a 	mov	r18,r4
    52c0:	01400244 	movi	r5,9
    52c4:	39000204 	addi	r4,r7,8
    52c8:	dd000415 	stw	r20,16(sp)
    52cc:	dc400115 	stw	r17,4(sp)
    52d0:	dfc00615 	stw	ra,24(sp)
    52d4:	dd400515 	stw	r21,20(sp)
    52d8:	dc000015 	stw	r16,0(sp)
    52dc:	3829883a 	mov	r20,r7
    52e0:	3023883a 	mov	r17,r6
    52e4:	00069c00 	call	69c0 <__divsi3>
    52e8:	00c00044 	movi	r3,1
    52ec:	1880350e 	bge	r3,r2,53c4 <__s2b+0x118>
    52f0:	000b883a 	mov	r5,zero
    52f4:	18c7883a 	add	r3,r3,r3
    52f8:	29400044 	addi	r5,r5,1
    52fc:	18bffd16 	blt	r3,r2,52f4 <__s2b+0x48>
    5300:	9009883a 	mov	r4,r18
    5304:	00048c00 	call	48c0 <_Balloc>
    5308:	1011883a 	mov	r8,r2
    530c:	d8800717 	ldw	r2,28(sp)
    5310:	00c00044 	movi	r3,1
    5314:	01800244 	movi	r6,9
    5318:	40800515 	stw	r2,20(r8)
    531c:	40c00415 	stw	r3,16(r8)
    5320:	3440260e 	bge	r6,r17,53bc <__s2b+0x110>
    5324:	3021883a 	mov	r16,r6
    5328:	99ab883a 	add	r21,r19,r6
    532c:	9c05883a 	add	r2,r19,r16
    5330:	11c00007 	ldb	r7,0(r2)
    5334:	400b883a 	mov	r5,r8
    5338:	9009883a 	mov	r4,r18
    533c:	39fff404 	addi	r7,r7,-48
    5340:	01800284 	movi	r6,10
    5344:	00050600 	call	5060 <__multadd>
    5348:	84000044 	addi	r16,r16,1
    534c:	1011883a 	mov	r8,r2
    5350:	8c3ff61e 	bne	r17,r16,532c <__s2b+0x80>
    5354:	ac45883a 	add	r2,r21,r17
    5358:	117ffe04 	addi	r5,r2,-8
    535c:	880d883a 	mov	r6,r17
    5360:	35000c0e 	bge	r6,r20,5394 <__s2b+0xe8>
    5364:	a185c83a 	sub	r2,r20,r6
    5368:	2821883a 	mov	r16,r5
    536c:	28a3883a 	add	r17,r5,r2
    5370:	81c00007 	ldb	r7,0(r16)
    5374:	400b883a 	mov	r5,r8
    5378:	9009883a 	mov	r4,r18
    537c:	39fff404 	addi	r7,r7,-48
    5380:	01800284 	movi	r6,10
    5384:	00050600 	call	5060 <__multadd>
    5388:	84000044 	addi	r16,r16,1
    538c:	1011883a 	mov	r8,r2
    5390:	847ff71e 	bne	r16,r17,5370 <__s2b+0xc4>
    5394:	4005883a 	mov	r2,r8
    5398:	dfc00617 	ldw	ra,24(sp)
    539c:	dd400517 	ldw	r21,20(sp)
    53a0:	dd000417 	ldw	r20,16(sp)
    53a4:	dcc00317 	ldw	r19,12(sp)
    53a8:	dc800217 	ldw	r18,8(sp)
    53ac:	dc400117 	ldw	r17,4(sp)
    53b0:	dc000017 	ldw	r16,0(sp)
    53b4:	dec00704 	addi	sp,sp,28
    53b8:	f800283a 	ret
    53bc:	99400284 	addi	r5,r19,10
    53c0:	003fe706 	br	5360 <__s2b+0xb4>
    53c4:	000b883a 	mov	r5,zero
    53c8:	003fcd06 	br	5300 <__s2b+0x54>

000053cc <strchr>:
    53cc:	208000cc 	andi	r2,r4,3
    53d0:	2007883a 	mov	r3,r4
    53d4:	1000311e 	bne	r2,zero,549c <strchr+0xd0>
    53d8:	29c03fcc 	andi	r7,r5,255
    53dc:	0015883a 	mov	r10,zero
    53e0:	0007883a 	mov	r3,zero
    53e4:	01400104 	movi	r5,4
    53e8:	5004923a 	slli	r2,r10,8
    53ec:	18c00044 	addi	r3,r3,1
    53f0:	3894b03a 	or	r10,r7,r2
    53f4:	197ffc1e 	bne	r3,r5,53e8 <strchr+0x1c>
    53f8:	200d883a 	mov	r6,r4
    53fc:	21000017 	ldw	r4,0(r4)
    5400:	017fbff4 	movhi	r5,65279
    5404:	297fbfc4 	addi	r5,r5,-257
    5408:	02202074 	movhi	r8,32897
    540c:	42202004 	addi	r8,r8,-32640
    5410:	2145883a 	add	r2,r4,r5
    5414:	1204703a 	and	r2,r2,r8
    5418:	0106303a 	nor	r3,zero,r4
    541c:	10c4703a 	and	r2,r2,r3
    5420:	1000151e 	bne	r2,zero,5478 <strchr+0xac>
    5424:	2284f03a 	xor	r2,r4,r10
    5428:	1147883a 	add	r3,r2,r5
    542c:	1a06703a 	and	r3,r3,r8
    5430:	0084303a 	nor	r2,zero,r2
    5434:	10c4703a 	and	r2,r2,r3
    5438:	10000f1e 	bne	r2,zero,5478 <strchr+0xac>
    543c:	2813883a 	mov	r9,r5
    5440:	00000106 	br	5448 <strchr+0x7c>
    5444:	18000c1e 	bne	r3,zero,5478 <strchr+0xac>
    5448:	31800104 	addi	r6,r6,4
    544c:	30800017 	ldw	r2,0(r6)
    5450:	1286f03a 	xor	r3,r2,r10
    5454:	124b883a 	add	r5,r2,r9
    5458:	1a49883a 	add	r4,r3,r9
    545c:	2a0a703a 	and	r5,r5,r8
    5460:	0084303a 	nor	r2,zero,r2
    5464:	2208703a 	and	r4,r4,r8
    5468:	00c6303a 	nor	r3,zero,r3
    546c:	1144703a 	and	r2,r2,r5
    5470:	1906703a 	and	r3,r3,r4
    5474:	103ff326 	beq	r2,zero,5444 <strchr+0x78>
    5478:	3007883a 	mov	r3,r6
    547c:	00000206 	br	5488 <strchr+0xbc>
    5480:	38800426 	beq	r7,r2,5494 <strchr+0xc8>
    5484:	18c00044 	addi	r3,r3,1
    5488:	18800003 	ldbu	r2,0(r3)
    548c:	103ffc1e 	bne	r2,zero,5480 <strchr+0xb4>
    5490:	3800041e 	bne	r7,zero,54a4 <strchr+0xd8>
    5494:	1805883a 	mov	r2,r3
    5498:	f800283a 	ret
    549c:	29c03fcc 	andi	r7,r5,255
    54a0:	003ff906 	br	5488 <strchr+0xbc>
    54a4:	0005883a 	mov	r2,zero
    54a8:	f800283a 	ret

000054ac <_calloc_r>:
    54ac:	defffe04 	addi	sp,sp,-8
    54b0:	dc400015 	stw	r17,0(sp)
    54b4:	2023883a 	mov	r17,r4
    54b8:	2809883a 	mov	r4,r5
    54bc:	300b883a 	mov	r5,r6
    54c0:	dfc00115 	stw	ra,4(sp)
    54c4:	0006a900 	call	6a90 <__mulsi3>
    54c8:	100b883a 	mov	r5,r2
    54cc:	8809883a 	mov	r4,r17
    54d0:	0000aa40 	call	aa4 <_malloc_r>
    54d4:	1023883a 	mov	r17,r2
    54d8:	01c00904 	movi	r7,36
    54dc:	10000d26 	beq	r2,zero,5514 <_calloc_r+0x68>
    54e0:	10ffff17 	ldw	r3,-4(r2)
    54e4:	1009883a 	mov	r4,r2
    54e8:	00bfff04 	movi	r2,-4
    54ec:	1886703a 	and	r3,r3,r2
    54f0:	1887883a 	add	r3,r3,r2
    54f4:	180d883a 	mov	r6,r3
    54f8:	000b883a 	mov	r5,zero
    54fc:	38c01736 	bltu	r7,r3,555c <_calloc_r+0xb0>
    5500:	008004c4 	movi	r2,19
    5504:	10c00836 	bltu	r2,r3,5528 <_calloc_r+0x7c>
    5508:	20000215 	stw	zero,8(r4)
    550c:	20000015 	stw	zero,0(r4)
    5510:	20000115 	stw	zero,4(r4)
    5514:	8805883a 	mov	r2,r17
    5518:	dfc00117 	ldw	ra,4(sp)
    551c:	dc400017 	ldw	r17,0(sp)
    5520:	dec00204 	addi	sp,sp,8
    5524:	f800283a 	ret
    5528:	008006c4 	movi	r2,27
    552c:	88000015 	stw	zero,0(r17)
    5530:	88000115 	stw	zero,4(r17)
    5534:	89000204 	addi	r4,r17,8
    5538:	10fff32e 	bgeu	r2,r3,5508 <_calloc_r+0x5c>
    553c:	88000215 	stw	zero,8(r17)
    5540:	88000315 	stw	zero,12(r17)
    5544:	89000404 	addi	r4,r17,16
    5548:	19ffef1e 	bne	r3,r7,5508 <_calloc_r+0x5c>
    554c:	89000604 	addi	r4,r17,24
    5550:	88000415 	stw	zero,16(r17)
    5554:	88000515 	stw	zero,20(r17)
    5558:	003feb06 	br	5508 <_calloc_r+0x5c>
    555c:	00055740 	call	5574 <memset>
    5560:	8805883a 	mov	r2,r17
    5564:	dfc00117 	ldw	ra,4(sp)
    5568:	dc400017 	ldw	r17,0(sp)
    556c:	dec00204 	addi	sp,sp,8
    5570:	f800283a 	ret

00005574 <memset>:
    5574:	008000c4 	movi	r2,3
    5578:	29403fcc 	andi	r5,r5,255
    557c:	2007883a 	mov	r3,r4
    5580:	1180022e 	bgeu	r2,r6,558c <memset+0x18>
    5584:	2084703a 	and	r2,r4,r2
    5588:	10000826 	beq	r2,zero,55ac <memset+0x38>
    558c:	30000526 	beq	r6,zero,55a4 <memset+0x30>
    5590:	2805883a 	mov	r2,r5
    5594:	30cd883a 	add	r6,r6,r3
    5598:	18800005 	stb	r2,0(r3)
    559c:	18c00044 	addi	r3,r3,1
    55a0:	19bffd1e 	bne	r3,r6,5598 <memset+0x24>
    55a4:	2005883a 	mov	r2,r4
    55a8:	f800283a 	ret
    55ac:	2804923a 	slli	r2,r5,8
    55b0:	020003c4 	movi	r8,15
    55b4:	200f883a 	mov	r7,r4
    55b8:	2884b03a 	or	r2,r5,r2
    55bc:	1006943a 	slli	r3,r2,16
    55c0:	10c6b03a 	or	r3,r2,r3
    55c4:	41800a2e 	bgeu	r8,r6,55f0 <memset+0x7c>
    55c8:	4005883a 	mov	r2,r8
    55cc:	31bffc04 	addi	r6,r6,-16
    55d0:	38c00015 	stw	r3,0(r7)
    55d4:	38c00115 	stw	r3,4(r7)
    55d8:	38c00215 	stw	r3,8(r7)
    55dc:	38c00315 	stw	r3,12(r7)
    55e0:	39c00404 	addi	r7,r7,16
    55e4:	11bff936 	bltu	r2,r6,55cc <memset+0x58>
    55e8:	008000c4 	movi	r2,3
    55ec:	1180052e 	bgeu	r2,r6,5604 <memset+0x90>
    55f0:	31bfff04 	addi	r6,r6,-4
    55f4:	008000c4 	movi	r2,3
    55f8:	38c00015 	stw	r3,0(r7)
    55fc:	39c00104 	addi	r7,r7,4
    5600:	11bffb36 	bltu	r2,r6,55f0 <memset+0x7c>
    5604:	3807883a 	mov	r3,r7
    5608:	003fe006 	br	558c <memset+0x18>

0000560c <__fixunsdfsi>:
    560c:	defffb04 	addi	sp,sp,-20
    5610:	dc400115 	stw	r17,4(sp)
    5614:	dc000015 	stw	r16,0(sp)
    5618:	04507834 	movhi	r17,16864
    561c:	0021883a 	mov	r16,zero
    5620:	800d883a 	mov	r6,r16
    5624:	880f883a 	mov	r7,r17
    5628:	dcc00315 	stw	r19,12(sp)
    562c:	dc800215 	stw	r18,8(sp)
    5630:	2827883a 	mov	r19,r5
    5634:	2025883a 	mov	r18,r4
    5638:	dfc00415 	stw	ra,16(sp)
    563c:	00064480 	call	6448 <__gedf2>
    5640:	000d883a 	mov	r6,zero
    5644:	880f883a 	mov	r7,r17
    5648:	980b883a 	mov	r5,r19
    564c:	9009883a 	mov	r4,r18
    5650:	10000d16 	blt	r2,zero,5688 <__fixunsdfsi+0x7c>
    5654:	0005c280 	call	5c28 <__subdf3>
    5658:	180b883a 	mov	r5,r3
    565c:	1009883a 	mov	r4,r2
    5660:	00066d80 	call	66d8 <__fixdfsi>
    5664:	00e00034 	movhi	r3,32768
    5668:	10c5883a 	add	r2,r2,r3
    566c:	dfc00417 	ldw	ra,16(sp)
    5670:	dcc00317 	ldw	r19,12(sp)
    5674:	dc800217 	ldw	r18,8(sp)
    5678:	dc400117 	ldw	r17,4(sp)
    567c:	dc000017 	ldw	r16,0(sp)
    5680:	dec00504 	addi	sp,sp,20
    5684:	f800283a 	ret
    5688:	980b883a 	mov	r5,r19
    568c:	9009883a 	mov	r4,r18
    5690:	00066d80 	call	66d8 <__fixdfsi>
    5694:	dfc00417 	ldw	ra,16(sp)
    5698:	dcc00317 	ldw	r19,12(sp)
    569c:	dc800217 	ldw	r18,8(sp)
    56a0:	dc400117 	ldw	r17,4(sp)
    56a4:	dc000017 	ldw	r16,0(sp)
    56a8:	dec00504 	addi	sp,sp,20
    56ac:	f800283a 	ret

000056b0 <__nesf2>:
    56b0:	defff304 	addi	sp,sp,-52
    56b4:	dc400b15 	stw	r17,44(sp)
    56b8:	dc400204 	addi	r17,sp,8
    56bc:	dc000a15 	stw	r16,40(sp)
    56c0:	d9000015 	stw	r4,0(sp)
    56c4:	d9400115 	stw	r5,4(sp)
    56c8:	d809883a 	mov	r4,sp
    56cc:	880b883a 	mov	r5,r17
    56d0:	dc000604 	addi	r16,sp,24
    56d4:	dfc00c15 	stw	ra,48(sp)
    56d8:	00006e80 	call	6e8 <__unpack_f>
    56dc:	d9000104 	addi	r4,sp,4
    56e0:	800b883a 	mov	r5,r16
    56e4:	00006e80 	call	6e8 <__unpack_f>
    56e8:	d8800217 	ldw	r2,8(sp)
    56ec:	00c00044 	movi	r3,1
    56f0:	180d883a 	mov	r6,r3
    56f4:	1880062e 	bgeu	r3,r2,5710 <__nesf2+0x60>
    56f8:	d8800617 	ldw	r2,24(sp)
    56fc:	8809883a 	mov	r4,r17
    5700:	800b883a 	mov	r5,r16
    5704:	1880022e 	bgeu	r3,r2,5710 <__nesf2+0x60>
    5708:	0006c6c0 	call	6c6c <__fpcmp_parts_f>
    570c:	100d883a 	mov	r6,r2
    5710:	3005883a 	mov	r2,r6
    5714:	dfc00c17 	ldw	ra,48(sp)
    5718:	dc400b17 	ldw	r17,44(sp)
    571c:	dc000a17 	ldw	r16,40(sp)
    5720:	dec00d04 	addi	sp,sp,52
    5724:	f800283a 	ret

00005728 <__gtsf2>:
    5728:	defff304 	addi	sp,sp,-52
    572c:	dc400b15 	stw	r17,44(sp)
    5730:	dc400204 	addi	r17,sp,8
    5734:	dc000a15 	stw	r16,40(sp)
    5738:	d9000015 	stw	r4,0(sp)
    573c:	d9400115 	stw	r5,4(sp)
    5740:	d809883a 	mov	r4,sp
    5744:	880b883a 	mov	r5,r17
    5748:	dc000604 	addi	r16,sp,24
    574c:	dfc00c15 	stw	ra,48(sp)
    5750:	00006e80 	call	6e8 <__unpack_f>
    5754:	d9000104 	addi	r4,sp,4
    5758:	800b883a 	mov	r5,r16
    575c:	00006e80 	call	6e8 <__unpack_f>
    5760:	d8800217 	ldw	r2,8(sp)
    5764:	00c00044 	movi	r3,1
    5768:	01bfffc4 	movi	r6,-1
    576c:	1880062e 	bgeu	r3,r2,5788 <__gtsf2+0x60>
    5770:	d8800617 	ldw	r2,24(sp)
    5774:	8809883a 	mov	r4,r17
    5778:	800b883a 	mov	r5,r16
    577c:	1880022e 	bgeu	r3,r2,5788 <__gtsf2+0x60>
    5780:	0006c6c0 	call	6c6c <__fpcmp_parts_f>
    5784:	100d883a 	mov	r6,r2
    5788:	3005883a 	mov	r2,r6
    578c:	dfc00c17 	ldw	ra,48(sp)
    5790:	dc400b17 	ldw	r17,44(sp)
    5794:	dc000a17 	ldw	r16,40(sp)
    5798:	dec00d04 	addi	sp,sp,52
    579c:	f800283a 	ret

000057a0 <__ltsf2>:
    57a0:	defff304 	addi	sp,sp,-52
    57a4:	dc400b15 	stw	r17,44(sp)
    57a8:	dc400204 	addi	r17,sp,8
    57ac:	dc000a15 	stw	r16,40(sp)
    57b0:	d9000015 	stw	r4,0(sp)
    57b4:	d9400115 	stw	r5,4(sp)
    57b8:	d809883a 	mov	r4,sp
    57bc:	880b883a 	mov	r5,r17
    57c0:	dc000604 	addi	r16,sp,24
    57c4:	dfc00c15 	stw	ra,48(sp)
    57c8:	00006e80 	call	6e8 <__unpack_f>
    57cc:	d9000104 	addi	r4,sp,4
    57d0:	800b883a 	mov	r5,r16
    57d4:	00006e80 	call	6e8 <__unpack_f>
    57d8:	d8800217 	ldw	r2,8(sp)
    57dc:	00c00044 	movi	r3,1
    57e0:	180d883a 	mov	r6,r3
    57e4:	1880062e 	bgeu	r3,r2,5800 <__ltsf2+0x60>
    57e8:	d8800617 	ldw	r2,24(sp)
    57ec:	8809883a 	mov	r4,r17
    57f0:	800b883a 	mov	r5,r16
    57f4:	1880022e 	bgeu	r3,r2,5800 <__ltsf2+0x60>
    57f8:	0006c6c0 	call	6c6c <__fpcmp_parts_f>
    57fc:	100d883a 	mov	r6,r2
    5800:	3005883a 	mov	r2,r6
    5804:	dfc00c17 	ldw	ra,48(sp)
    5808:	dc400b17 	ldw	r17,44(sp)
    580c:	dc000a17 	ldw	r16,40(sp)
    5810:	dec00d04 	addi	sp,sp,52
    5814:	f800283a 	ret

00005818 <_fpadd_parts>:
    5818:	defff804 	addi	sp,sp,-32
    581c:	dcc00315 	stw	r19,12(sp)
    5820:	2027883a 	mov	r19,r4
    5824:	21000017 	ldw	r4,0(r4)
    5828:	00c00044 	movi	r3,1
    582c:	dd400515 	stw	r21,20(sp)
    5830:	dd000415 	stw	r20,16(sp)
    5834:	ddc00715 	stw	r23,28(sp)
    5838:	dd800615 	stw	r22,24(sp)
    583c:	dc800215 	stw	r18,8(sp)
    5840:	dc400115 	stw	r17,4(sp)
    5844:	dc000015 	stw	r16,0(sp)
    5848:	282b883a 	mov	r21,r5
    584c:	3029883a 	mov	r20,r6
    5850:	1900632e 	bgeu	r3,r4,59e0 <_fpadd_parts+0x1c8>
    5854:	28800017 	ldw	r2,0(r5)
    5858:	1880812e 	bgeu	r3,r2,5a60 <_fpadd_parts+0x248>
    585c:	00c00104 	movi	r3,4
    5860:	20c0dc26 	beq	r4,r3,5bd4 <_fpadd_parts+0x3bc>
    5864:	10c07e26 	beq	r2,r3,5a60 <_fpadd_parts+0x248>
    5868:	00c00084 	movi	r3,2
    586c:	10c06726 	beq	r2,r3,5a0c <_fpadd_parts+0x1f4>
    5870:	20c07b26 	beq	r4,r3,5a60 <_fpadd_parts+0x248>
    5874:	9dc00217 	ldw	r23,8(r19)
    5878:	28c00217 	ldw	r3,8(r5)
    587c:	9c400317 	ldw	r17,12(r19)
    5880:	2bc00317 	ldw	r15,12(r5)
    5884:	b8cdc83a 	sub	r6,r23,r3
    5888:	9c800417 	ldw	r18,16(r19)
    588c:	2c000417 	ldw	r16,16(r5)
    5890:	3009883a 	mov	r4,r6
    5894:	30009716 	blt	r6,zero,5af4 <_fpadd_parts+0x2dc>
    5898:	00800fc4 	movi	r2,63
    589c:	11806b16 	blt	r2,r6,5a4c <_fpadd_parts+0x234>
    58a0:	0100a40e 	bge	zero,r4,5b34 <_fpadd_parts+0x31c>
    58a4:	35bff804 	addi	r22,r6,-32
    58a8:	b000bc16 	blt	r22,zero,5b9c <_fpadd_parts+0x384>
    58ac:	8596d83a 	srl	r11,r16,r22
    58b0:	0019883a 	mov	r12,zero
    58b4:	0013883a 	mov	r9,zero
    58b8:	01000044 	movi	r4,1
    58bc:	0015883a 	mov	r10,zero
    58c0:	b000be16 	blt	r22,zero,5bbc <_fpadd_parts+0x3a4>
    58c4:	2590983a 	sll	r8,r4,r22
    58c8:	000f883a 	mov	r7,zero
    58cc:	00bfffc4 	movi	r2,-1
    58d0:	3889883a 	add	r4,r7,r2
    58d4:	408b883a 	add	r5,r8,r2
    58d8:	21cd803a 	cmpltu	r6,r4,r7
    58dc:	314b883a 	add	r5,r6,r5
    58e0:	7904703a 	and	r2,r15,r4
    58e4:	8146703a 	and	r3,r16,r5
    58e8:	10c4b03a 	or	r2,r2,r3
    58ec:	10000226 	beq	r2,zero,58f8 <_fpadd_parts+0xe0>
    58f0:	02400044 	movi	r9,1
    58f4:	0015883a 	mov	r10,zero
    58f8:	5a5eb03a 	or	r15,r11,r9
    58fc:	62a0b03a 	or	r16,r12,r10
    5900:	99400117 	ldw	r5,4(r19)
    5904:	a8800117 	ldw	r2,4(r21)
    5908:	28806e26 	beq	r5,r2,5ac4 <_fpadd_parts+0x2ac>
    590c:	28006626 	beq	r5,zero,5aa8 <_fpadd_parts+0x290>
    5910:	7c45c83a 	sub	r2,r15,r17
    5914:	7889803a 	cmpltu	r4,r15,r2
    5918:	8487c83a 	sub	r3,r16,r18
    591c:	1909c83a 	sub	r4,r3,r4
    5920:	100d883a 	mov	r6,r2
    5924:	200f883a 	mov	r7,r4
    5928:	38007716 	blt	r7,zero,5b08 <_fpadd_parts+0x2f0>
    592c:	a5c00215 	stw	r23,8(r20)
    5930:	a1c00415 	stw	r7,16(r20)
    5934:	a0000115 	stw	zero,4(r20)
    5938:	a1800315 	stw	r6,12(r20)
    593c:	a2000317 	ldw	r8,12(r20)
    5940:	a2400417 	ldw	r9,16(r20)
    5944:	00bfffc4 	movi	r2,-1
    5948:	408b883a 	add	r5,r8,r2
    594c:	2a09803a 	cmpltu	r4,r5,r8
    5950:	488d883a 	add	r6,r9,r2
    5954:	01c40034 	movhi	r7,4096
    5958:	39ffffc4 	addi	r7,r7,-1
    595c:	218d883a 	add	r6,r4,r6
    5960:	39801736 	bltu	r7,r6,59c0 <_fpadd_parts+0x1a8>
    5964:	31c06526 	beq	r6,r7,5afc <_fpadd_parts+0x2e4>
    5968:	a3000217 	ldw	r12,8(r20)
    596c:	4209883a 	add	r4,r8,r8
    5970:	00bfffc4 	movi	r2,-1
    5974:	220f803a 	cmpltu	r7,r4,r8
    5978:	4a4b883a 	add	r5,r9,r9
    597c:	394f883a 	add	r7,r7,r5
    5980:	2095883a 	add	r10,r4,r2
    5984:	3897883a 	add	r11,r7,r2
    5988:	510d803a 	cmpltu	r6,r10,r4
    598c:	6099883a 	add	r12,r12,r2
    5990:	32d7883a 	add	r11,r6,r11
    5994:	00840034 	movhi	r2,4096
    5998:	10bfffc4 	addi	r2,r2,-1
    599c:	2011883a 	mov	r8,r4
    59a0:	3813883a 	mov	r9,r7
    59a4:	a1000315 	stw	r4,12(r20)
    59a8:	a1c00415 	stw	r7,16(r20)
    59ac:	a3000215 	stw	r12,8(r20)
    59b0:	12c00336 	bltu	r2,r11,59c0 <_fpadd_parts+0x1a8>
    59b4:	58bfed1e 	bne	r11,r2,596c <_fpadd_parts+0x154>
    59b8:	00bfff84 	movi	r2,-2
    59bc:	12bfeb2e 	bgeu	r2,r10,596c <_fpadd_parts+0x154>
    59c0:	a2800417 	ldw	r10,16(r20)
    59c4:	008000c4 	movi	r2,3
    59c8:	00c80034 	movhi	r3,8192
    59cc:	18ffffc4 	addi	r3,r3,-1
    59d0:	a2400317 	ldw	r9,12(r20)
    59d4:	a0800015 	stw	r2,0(r20)
    59d8:	1a802336 	bltu	r3,r10,5a68 <_fpadd_parts+0x250>
    59dc:	a027883a 	mov	r19,r20
    59e0:	9805883a 	mov	r2,r19
    59e4:	ddc00717 	ldw	r23,28(sp)
    59e8:	dd800617 	ldw	r22,24(sp)
    59ec:	dd400517 	ldw	r21,20(sp)
    59f0:	dd000417 	ldw	r20,16(sp)
    59f4:	dcc00317 	ldw	r19,12(sp)
    59f8:	dc800217 	ldw	r18,8(sp)
    59fc:	dc400117 	ldw	r17,4(sp)
    5a00:	dc000017 	ldw	r16,0(sp)
    5a04:	dec00804 	addi	sp,sp,32
    5a08:	f800283a 	ret
    5a0c:	20fff41e 	bne	r4,r3,59e0 <_fpadd_parts+0x1c8>
    5a10:	31000015 	stw	r4,0(r6)
    5a14:	98800117 	ldw	r2,4(r19)
    5a18:	30800115 	stw	r2,4(r6)
    5a1c:	98c00217 	ldw	r3,8(r19)
    5a20:	30c00215 	stw	r3,8(r6)
    5a24:	98800317 	ldw	r2,12(r19)
    5a28:	30800315 	stw	r2,12(r6)
    5a2c:	98c00417 	ldw	r3,16(r19)
    5a30:	30c00415 	stw	r3,16(r6)
    5a34:	98800117 	ldw	r2,4(r19)
    5a38:	28c00117 	ldw	r3,4(r5)
    5a3c:	3027883a 	mov	r19,r6
    5a40:	10c4703a 	and	r2,r2,r3
    5a44:	30800115 	stw	r2,4(r6)
    5a48:	003fe506 	br	59e0 <_fpadd_parts+0x1c8>
    5a4c:	1dc02616 	blt	r3,r23,5ae8 <_fpadd_parts+0x2d0>
    5a50:	0023883a 	mov	r17,zero
    5a54:	182f883a 	mov	r23,r3
    5a58:	0025883a 	mov	r18,zero
    5a5c:	003fa806 	br	5900 <_fpadd_parts+0xe8>
    5a60:	a827883a 	mov	r19,r21
    5a64:	003fde06 	br	59e0 <_fpadd_parts+0x1c8>
    5a68:	01800044 	movi	r6,1
    5a6c:	500497fa 	slli	r2,r10,31
    5a70:	4808d07a 	srli	r4,r9,1
    5a74:	518ad83a 	srl	r5,r10,r6
    5a78:	a2000217 	ldw	r8,8(r20)
    5a7c:	1108b03a 	or	r4,r2,r4
    5a80:	0007883a 	mov	r3,zero
    5a84:	4984703a 	and	r2,r9,r6
    5a88:	208cb03a 	or	r6,r4,r2
    5a8c:	28ceb03a 	or	r7,r5,r3
    5a90:	42000044 	addi	r8,r8,1
    5a94:	a027883a 	mov	r19,r20
    5a98:	a1c00415 	stw	r7,16(r20)
    5a9c:	a2000215 	stw	r8,8(r20)
    5aa0:	a1800315 	stw	r6,12(r20)
    5aa4:	003fce06 	br	59e0 <_fpadd_parts+0x1c8>
    5aa8:	8bc5c83a 	sub	r2,r17,r15
    5aac:	8889803a 	cmpltu	r4,r17,r2
    5ab0:	9407c83a 	sub	r3,r18,r16
    5ab4:	1909c83a 	sub	r4,r3,r4
    5ab8:	100d883a 	mov	r6,r2
    5abc:	200f883a 	mov	r7,r4
    5ac0:	003f9906 	br	5928 <_fpadd_parts+0x110>
    5ac4:	7c45883a 	add	r2,r15,r17
    5ac8:	13c9803a 	cmpltu	r4,r2,r15
    5acc:	8487883a 	add	r3,r16,r18
    5ad0:	20c9883a 	add	r4,r4,r3
    5ad4:	a1400115 	stw	r5,4(r20)
    5ad8:	a5c00215 	stw	r23,8(r20)
    5adc:	a0800315 	stw	r2,12(r20)
    5ae0:	a1000415 	stw	r4,16(r20)
    5ae4:	003fb606 	br	59c0 <_fpadd_parts+0x1a8>
    5ae8:	001f883a 	mov	r15,zero
    5aec:	0021883a 	mov	r16,zero
    5af0:	003f8306 	br	5900 <_fpadd_parts+0xe8>
    5af4:	018dc83a 	sub	r6,zero,r6
    5af8:	003f6706 	br	5898 <_fpadd_parts+0x80>
    5afc:	00bfff84 	movi	r2,-2
    5b00:	117faf36 	bltu	r2,r5,59c0 <_fpadd_parts+0x1a8>
    5b04:	003f9806 	br	5968 <_fpadd_parts+0x150>
    5b08:	0005883a 	mov	r2,zero
    5b0c:	1189c83a 	sub	r4,r2,r6
    5b10:	1105803a 	cmpltu	r2,r2,r4
    5b14:	01cbc83a 	sub	r5,zero,r7
    5b18:	2885c83a 	sub	r2,r5,r2
    5b1c:	01800044 	movi	r6,1
    5b20:	a1800115 	stw	r6,4(r20)
    5b24:	a5c00215 	stw	r23,8(r20)
    5b28:	a1000315 	stw	r4,12(r20)
    5b2c:	a0800415 	stw	r2,16(r20)
    5b30:	003f8206 	br	593c <_fpadd_parts+0x124>
    5b34:	203f7226 	beq	r4,zero,5900 <_fpadd_parts+0xe8>
    5b38:	35bff804 	addi	r22,r6,-32
    5b3c:	b9af883a 	add	r23,r23,r6
    5b40:	b0003116 	blt	r22,zero,5c08 <_fpadd_parts+0x3f0>
    5b44:	959ad83a 	srl	r13,r18,r22
    5b48:	001d883a 	mov	r14,zero
    5b4c:	000f883a 	mov	r7,zero
    5b50:	01000044 	movi	r4,1
    5b54:	0011883a 	mov	r8,zero
    5b58:	b0002516 	blt	r22,zero,5bf0 <_fpadd_parts+0x3d8>
    5b5c:	2594983a 	sll	r10,r4,r22
    5b60:	0013883a 	mov	r9,zero
    5b64:	00bfffc4 	movi	r2,-1
    5b68:	4889883a 	add	r4,r9,r2
    5b6c:	508b883a 	add	r5,r10,r2
    5b70:	224d803a 	cmpltu	r6,r4,r9
    5b74:	314b883a 	add	r5,r6,r5
    5b78:	8904703a 	and	r2,r17,r4
    5b7c:	9146703a 	and	r3,r18,r5
    5b80:	10c4b03a 	or	r2,r2,r3
    5b84:	10000226 	beq	r2,zero,5b90 <_fpadd_parts+0x378>
    5b88:	01c00044 	movi	r7,1
    5b8c:	0011883a 	mov	r8,zero
    5b90:	69e2b03a 	or	r17,r13,r7
    5b94:	7224b03a 	or	r18,r14,r8
    5b98:	003f5906 	br	5900 <_fpadd_parts+0xe8>
    5b9c:	8407883a 	add	r3,r16,r16
    5ba0:	008007c4 	movi	r2,31
    5ba4:	1185c83a 	sub	r2,r2,r6
    5ba8:	1886983a 	sll	r3,r3,r2
    5bac:	7996d83a 	srl	r11,r15,r6
    5bb0:	8198d83a 	srl	r12,r16,r6
    5bb4:	1ad6b03a 	or	r11,r3,r11
    5bb8:	003f3e06 	br	58b4 <_fpadd_parts+0x9c>
    5bbc:	2006d07a 	srli	r3,r4,1
    5bc0:	008007c4 	movi	r2,31
    5bc4:	1185c83a 	sub	r2,r2,r6
    5bc8:	1890d83a 	srl	r8,r3,r2
    5bcc:	218e983a 	sll	r7,r4,r6
    5bd0:	003f3e06 	br	58cc <_fpadd_parts+0xb4>
    5bd4:	113f821e 	bne	r2,r4,59e0 <_fpadd_parts+0x1c8>
    5bd8:	28c00117 	ldw	r3,4(r5)
    5bdc:	98800117 	ldw	r2,4(r19)
    5be0:	10ff7f26 	beq	r2,r3,59e0 <_fpadd_parts+0x1c8>
    5be4:	04c00074 	movhi	r19,1
    5be8:	9ce18e04 	addi	r19,r19,-31176
    5bec:	003f7c06 	br	59e0 <_fpadd_parts+0x1c8>
    5bf0:	2006d07a 	srli	r3,r4,1
    5bf4:	008007c4 	movi	r2,31
    5bf8:	1185c83a 	sub	r2,r2,r6
    5bfc:	1894d83a 	srl	r10,r3,r2
    5c00:	2192983a 	sll	r9,r4,r6
    5c04:	003fd706 	br	5b64 <_fpadd_parts+0x34c>
    5c08:	9487883a 	add	r3,r18,r18
    5c0c:	008007c4 	movi	r2,31
    5c10:	1185c83a 	sub	r2,r2,r6
    5c14:	1886983a 	sll	r3,r3,r2
    5c18:	899ad83a 	srl	r13,r17,r6
    5c1c:	919cd83a 	srl	r14,r18,r6
    5c20:	1b5ab03a 	or	r13,r3,r13
    5c24:	003fc906 	br	5b4c <_fpadd_parts+0x334>

00005c28 <__subdf3>:
    5c28:	deffea04 	addi	sp,sp,-88
    5c2c:	dcc01415 	stw	r19,80(sp)
    5c30:	dcc00404 	addi	r19,sp,16
    5c34:	2011883a 	mov	r8,r4
    5c38:	2813883a 	mov	r9,r5
    5c3c:	dc401315 	stw	r17,76(sp)
    5c40:	d809883a 	mov	r4,sp
    5c44:	980b883a 	mov	r5,r19
    5c48:	dc400904 	addi	r17,sp,36
    5c4c:	dfc01515 	stw	ra,84(sp)
    5c50:	da400115 	stw	r9,4(sp)
    5c54:	d9c00315 	stw	r7,12(sp)
    5c58:	da000015 	stw	r8,0(sp)
    5c5c:	d9800215 	stw	r6,8(sp)
    5c60:	00007dc0 	call	7dc <__unpack_d>
    5c64:	d9000204 	addi	r4,sp,8
    5c68:	880b883a 	mov	r5,r17
    5c6c:	00007dc0 	call	7dc <__unpack_d>
    5c70:	d8800a17 	ldw	r2,40(sp)
    5c74:	880b883a 	mov	r5,r17
    5c78:	9809883a 	mov	r4,r19
    5c7c:	d9800e04 	addi	r6,sp,56
    5c80:	1080005c 	xori	r2,r2,1
    5c84:	d8800a15 	stw	r2,40(sp)
    5c88:	00058180 	call	5818 <_fpadd_parts>
    5c8c:	1009883a 	mov	r4,r2
    5c90:	0006d140 	call	6d14 <__pack_d>
    5c94:	dfc01517 	ldw	ra,84(sp)
    5c98:	dcc01417 	ldw	r19,80(sp)
    5c9c:	dc401317 	ldw	r17,76(sp)
    5ca0:	dec01604 	addi	sp,sp,88
    5ca4:	f800283a 	ret

00005ca8 <__adddf3>:
    5ca8:	deffea04 	addi	sp,sp,-88
    5cac:	dcc01415 	stw	r19,80(sp)
    5cb0:	dcc00404 	addi	r19,sp,16
    5cb4:	2011883a 	mov	r8,r4
    5cb8:	2813883a 	mov	r9,r5
    5cbc:	dc401315 	stw	r17,76(sp)
    5cc0:	d809883a 	mov	r4,sp
    5cc4:	980b883a 	mov	r5,r19
    5cc8:	dc400904 	addi	r17,sp,36
    5ccc:	dfc01515 	stw	ra,84(sp)
    5cd0:	da400115 	stw	r9,4(sp)
    5cd4:	d9c00315 	stw	r7,12(sp)
    5cd8:	da000015 	stw	r8,0(sp)
    5cdc:	d9800215 	stw	r6,8(sp)
    5ce0:	00007dc0 	call	7dc <__unpack_d>
    5ce4:	d9000204 	addi	r4,sp,8
    5ce8:	880b883a 	mov	r5,r17
    5cec:	00007dc0 	call	7dc <__unpack_d>
    5cf0:	d9800e04 	addi	r6,sp,56
    5cf4:	9809883a 	mov	r4,r19
    5cf8:	880b883a 	mov	r5,r17
    5cfc:	00058180 	call	5818 <_fpadd_parts>
    5d00:	1009883a 	mov	r4,r2
    5d04:	0006d140 	call	6d14 <__pack_d>
    5d08:	dfc01517 	ldw	ra,84(sp)
    5d0c:	dcc01417 	ldw	r19,80(sp)
    5d10:	dc401317 	ldw	r17,76(sp)
    5d14:	dec01604 	addi	sp,sp,88
    5d18:	f800283a 	ret

00005d1c <__muldf3>:
    5d1c:	deffe004 	addi	sp,sp,-128
    5d20:	dc401815 	stw	r17,96(sp)
    5d24:	dc400404 	addi	r17,sp,16
    5d28:	2011883a 	mov	r8,r4
    5d2c:	2813883a 	mov	r9,r5
    5d30:	dc001715 	stw	r16,92(sp)
    5d34:	d809883a 	mov	r4,sp
    5d38:	880b883a 	mov	r5,r17
    5d3c:	dc000904 	addi	r16,sp,36
    5d40:	dfc01f15 	stw	ra,124(sp)
    5d44:	da400115 	stw	r9,4(sp)
    5d48:	d9c00315 	stw	r7,12(sp)
    5d4c:	da000015 	stw	r8,0(sp)
    5d50:	d9800215 	stw	r6,8(sp)
    5d54:	ddc01e15 	stw	r23,120(sp)
    5d58:	dd801d15 	stw	r22,116(sp)
    5d5c:	dd401c15 	stw	r21,112(sp)
    5d60:	dd001b15 	stw	r20,108(sp)
    5d64:	dcc01a15 	stw	r19,104(sp)
    5d68:	dc801915 	stw	r18,100(sp)
    5d6c:	00007dc0 	call	7dc <__unpack_d>
    5d70:	d9000204 	addi	r4,sp,8
    5d74:	800b883a 	mov	r5,r16
    5d78:	00007dc0 	call	7dc <__unpack_d>
    5d7c:	d9000417 	ldw	r4,16(sp)
    5d80:	00800044 	movi	r2,1
    5d84:	1100102e 	bgeu	r2,r4,5dc8 <__muldf3+0xac>
    5d88:	d8c00917 	ldw	r3,36(sp)
    5d8c:	10c0062e 	bgeu	r2,r3,5da8 <__muldf3+0x8c>
    5d90:	00800104 	movi	r2,4
    5d94:	20800a26 	beq	r4,r2,5dc0 <__muldf3+0xa4>
    5d98:	1880cc26 	beq	r3,r2,60cc <__muldf3+0x3b0>
    5d9c:	00800084 	movi	r2,2
    5da0:	20800926 	beq	r4,r2,5dc8 <__muldf3+0xac>
    5da4:	1880191e 	bne	r3,r2,5e0c <__muldf3+0xf0>
    5da8:	d8c00a17 	ldw	r3,40(sp)
    5dac:	d8800517 	ldw	r2,20(sp)
    5db0:	8009883a 	mov	r4,r16
    5db4:	10c4c03a 	cmpne	r2,r2,r3
    5db8:	d8800a15 	stw	r2,40(sp)
    5dbc:	00000706 	br	5ddc <__muldf3+0xc0>
    5dc0:	00800084 	movi	r2,2
    5dc4:	1880c326 	beq	r3,r2,60d4 <__muldf3+0x3b8>
    5dc8:	d8800517 	ldw	r2,20(sp)
    5dcc:	d8c00a17 	ldw	r3,40(sp)
    5dd0:	8809883a 	mov	r4,r17
    5dd4:	10c4c03a 	cmpne	r2,r2,r3
    5dd8:	d8800515 	stw	r2,20(sp)
    5ddc:	0006d140 	call	6d14 <__pack_d>
    5de0:	dfc01f17 	ldw	ra,124(sp)
    5de4:	ddc01e17 	ldw	r23,120(sp)
    5de8:	dd801d17 	ldw	r22,116(sp)
    5dec:	dd401c17 	ldw	r21,112(sp)
    5df0:	dd001b17 	ldw	r20,108(sp)
    5df4:	dcc01a17 	ldw	r19,104(sp)
    5df8:	dc801917 	ldw	r18,100(sp)
    5dfc:	dc401817 	ldw	r17,96(sp)
    5e00:	dc001717 	ldw	r16,92(sp)
    5e04:	dec02004 	addi	sp,sp,128
    5e08:	f800283a 	ret
    5e0c:	dd800717 	ldw	r22,28(sp)
    5e10:	dc800c17 	ldw	r18,48(sp)
    5e14:	002b883a 	mov	r21,zero
    5e18:	0023883a 	mov	r17,zero
    5e1c:	a80b883a 	mov	r5,r21
    5e20:	b00d883a 	mov	r6,r22
    5e24:	880f883a 	mov	r7,r17
    5e28:	ddc00817 	ldw	r23,32(sp)
    5e2c:	dcc00d17 	ldw	r19,52(sp)
    5e30:	9009883a 	mov	r4,r18
    5e34:	0006ac80 	call	6ac8 <__muldi3>
    5e38:	001b883a 	mov	r13,zero
    5e3c:	680f883a 	mov	r7,r13
    5e40:	b009883a 	mov	r4,r22
    5e44:	000b883a 	mov	r5,zero
    5e48:	980d883a 	mov	r6,r19
    5e4c:	b82d883a 	mov	r22,r23
    5e50:	002f883a 	mov	r23,zero
    5e54:	db401615 	stw	r13,88(sp)
    5e58:	d8801315 	stw	r2,76(sp)
    5e5c:	d8c01415 	stw	r3,80(sp)
    5e60:	dcc01515 	stw	r19,84(sp)
    5e64:	0006ac80 	call	6ac8 <__muldi3>
    5e68:	b00d883a 	mov	r6,r22
    5e6c:	000b883a 	mov	r5,zero
    5e70:	9009883a 	mov	r4,r18
    5e74:	b80f883a 	mov	r7,r23
    5e78:	1021883a 	mov	r16,r2
    5e7c:	1823883a 	mov	r17,r3
    5e80:	0006ac80 	call	6ac8 <__muldi3>
    5e84:	8085883a 	add	r2,r16,r2
    5e88:	140d803a 	cmpltu	r6,r2,r16
    5e8c:	88c7883a 	add	r3,r17,r3
    5e90:	30cd883a 	add	r6,r6,r3
    5e94:	1029883a 	mov	r20,r2
    5e98:	302b883a 	mov	r21,r6
    5e9c:	da801317 	ldw	r10,76(sp)
    5ea0:	dac01417 	ldw	r11,80(sp)
    5ea4:	db001517 	ldw	r12,84(sp)
    5ea8:	db401617 	ldw	r13,88(sp)
    5eac:	3440612e 	bgeu	r6,r17,6034 <__muldf3+0x318>
    5eb0:	0009883a 	mov	r4,zero
    5eb4:	5105883a 	add	r2,r10,r4
    5eb8:	128d803a 	cmpltu	r6,r2,r10
    5ebc:	5d07883a 	add	r3,r11,r20
    5ec0:	30cd883a 	add	r6,r6,r3
    5ec4:	0021883a 	mov	r16,zero
    5ec8:	04400044 	movi	r17,1
    5ecc:	1025883a 	mov	r18,r2
    5ed0:	3027883a 	mov	r19,r6
    5ed4:	32c06236 	bltu	r6,r11,6060 <__muldf3+0x344>
    5ed8:	59807a26 	beq	r11,r6,60c4 <__muldf3+0x3a8>
    5edc:	680b883a 	mov	r5,r13
    5ee0:	b80f883a 	mov	r7,r23
    5ee4:	6009883a 	mov	r4,r12
    5ee8:	b00d883a 	mov	r6,r22
    5eec:	0006ac80 	call	6ac8 <__muldi3>
    5ef0:	1009883a 	mov	r4,r2
    5ef4:	000f883a 	mov	r7,zero
    5ef8:	1545883a 	add	r2,r2,r21
    5efc:	1111803a 	cmpltu	r8,r2,r4
    5f00:	19c7883a 	add	r3,r3,r7
    5f04:	40c7883a 	add	r3,r8,r3
    5f08:	88cb883a 	add	r5,r17,r3
    5f0c:	d8c00617 	ldw	r3,24(sp)
    5f10:	8089883a 	add	r4,r16,r2
    5f14:	d8800b17 	ldw	r2,44(sp)
    5f18:	18c00104 	addi	r3,r3,4
    5f1c:	240d803a 	cmpltu	r6,r4,r16
    5f20:	10c7883a 	add	r3,r2,r3
    5f24:	2013883a 	mov	r9,r4
    5f28:	d8800a17 	ldw	r2,40(sp)
    5f2c:	d9000517 	ldw	r4,20(sp)
    5f30:	314d883a 	add	r6,r6,r5
    5f34:	3015883a 	mov	r10,r6
    5f38:	2088c03a 	cmpne	r4,r4,r2
    5f3c:	00880034 	movhi	r2,8192
    5f40:	10bfffc4 	addi	r2,r2,-1
    5f44:	d9000f15 	stw	r4,60(sp)
    5f48:	d8c01015 	stw	r3,64(sp)
    5f4c:	1180162e 	bgeu	r2,r6,5fa8 <__muldf3+0x28c>
    5f50:	1811883a 	mov	r8,r3
    5f54:	101f883a 	mov	r15,r2
    5f58:	980497fa 	slli	r2,r19,31
    5f5c:	9016d07a 	srli	r11,r18,1
    5f60:	500697fa 	slli	r3,r10,31
    5f64:	480cd07a 	srli	r6,r9,1
    5f68:	500ed07a 	srli	r7,r10,1
    5f6c:	12d6b03a 	or	r11,r2,r11
    5f70:	00800044 	movi	r2,1
    5f74:	198cb03a 	or	r6,r3,r6
    5f78:	4888703a 	and	r4,r9,r2
    5f7c:	9818d07a 	srli	r12,r19,1
    5f80:	001b883a 	mov	r13,zero
    5f84:	03a00034 	movhi	r14,32768
    5f88:	3013883a 	mov	r9,r6
    5f8c:	3815883a 	mov	r10,r7
    5f90:	4091883a 	add	r8,r8,r2
    5f94:	20000226 	beq	r4,zero,5fa0 <__muldf3+0x284>
    5f98:	5b64b03a 	or	r18,r11,r13
    5f9c:	63a6b03a 	or	r19,r12,r14
    5fa0:	7abfed36 	bltu	r15,r10,5f58 <__muldf3+0x23c>
    5fa4:	da001015 	stw	r8,64(sp)
    5fa8:	00840034 	movhi	r2,4096
    5fac:	10bfffc4 	addi	r2,r2,-1
    5fb0:	12801436 	bltu	r2,r10,6004 <__muldf3+0x2e8>
    5fb4:	da001017 	ldw	r8,64(sp)
    5fb8:	101f883a 	mov	r15,r2
    5fbc:	4a45883a 	add	r2,r9,r9
    5fc0:	124d803a 	cmpltu	r6,r2,r9
    5fc4:	5287883a 	add	r3,r10,r10
    5fc8:	9497883a 	add	r11,r18,r18
    5fcc:	5c8f803a 	cmpltu	r7,r11,r18
    5fd0:	9cd9883a 	add	r12,r19,r19
    5fd4:	01000044 	movi	r4,1
    5fd8:	30cd883a 	add	r6,r6,r3
    5fdc:	3b0f883a 	add	r7,r7,r12
    5fe0:	423fffc4 	addi	r8,r8,-1
    5fe4:	1013883a 	mov	r9,r2
    5fe8:	3015883a 	mov	r10,r6
    5fec:	111ab03a 	or	r13,r2,r4
    5ff0:	98003016 	blt	r19,zero,60b4 <__muldf3+0x398>
    5ff4:	5825883a 	mov	r18,r11
    5ff8:	3827883a 	mov	r19,r7
    5ffc:	7abfef2e 	bgeu	r15,r10,5fbc <__muldf3+0x2a0>
    6000:	da001015 	stw	r8,64(sp)
    6004:	00803fc4 	movi	r2,255
    6008:	488e703a 	and	r7,r9,r2
    600c:	00802004 	movi	r2,128
    6010:	0007883a 	mov	r3,zero
    6014:	0011883a 	mov	r8,zero
    6018:	38801826 	beq	r7,r2,607c <__muldf3+0x360>
    601c:	008000c4 	movi	r2,3
    6020:	d9000e04 	addi	r4,sp,56
    6024:	da801215 	stw	r10,72(sp)
    6028:	d8800e15 	stw	r2,56(sp)
    602c:	da401115 	stw	r9,68(sp)
    6030:	003f6a06 	br	5ddc <__muldf3+0xc0>
    6034:	89802126 	beq	r17,r6,60bc <__muldf3+0x3a0>
    6038:	0009883a 	mov	r4,zero
    603c:	5105883a 	add	r2,r10,r4
    6040:	128d803a 	cmpltu	r6,r2,r10
    6044:	5d07883a 	add	r3,r11,r20
    6048:	30cd883a 	add	r6,r6,r3
    604c:	0021883a 	mov	r16,zero
    6050:	0023883a 	mov	r17,zero
    6054:	1025883a 	mov	r18,r2
    6058:	3027883a 	mov	r19,r6
    605c:	32ff9e2e 	bgeu	r6,r11,5ed8 <__muldf3+0x1bc>
    6060:	00800044 	movi	r2,1
    6064:	8089883a 	add	r4,r16,r2
    6068:	240d803a 	cmpltu	r6,r4,r16
    606c:	344d883a 	add	r6,r6,r17
    6070:	2021883a 	mov	r16,r4
    6074:	3023883a 	mov	r17,r6
    6078:	003f9806 	br	5edc <__muldf3+0x1c0>
    607c:	403fe71e 	bne	r8,zero,601c <__muldf3+0x300>
    6080:	01004004 	movi	r4,256
    6084:	4904703a 	and	r2,r9,r4
    6088:	10c4b03a 	or	r2,r2,r3
    608c:	103fe31e 	bne	r2,zero,601c <__muldf3+0x300>
    6090:	94c4b03a 	or	r2,r18,r19
    6094:	103fe126 	beq	r2,zero,601c <__muldf3+0x300>
    6098:	49c5883a 	add	r2,r9,r7
    609c:	1251803a 	cmpltu	r8,r2,r9
    60a0:	4291883a 	add	r8,r8,r10
    60a4:	013fc004 	movi	r4,-256
    60a8:	1112703a 	and	r9,r2,r4
    60ac:	4015883a 	mov	r10,r8
    60b0:	003fda06 	br	601c <__muldf3+0x300>
    60b4:	6813883a 	mov	r9,r13
    60b8:	003fce06 	br	5ff4 <__muldf3+0x2d8>
    60bc:	143f7c36 	bltu	r2,r16,5eb0 <__muldf3+0x194>
    60c0:	003fdd06 	br	6038 <__muldf3+0x31c>
    60c4:	12bf852e 	bgeu	r2,r10,5edc <__muldf3+0x1c0>
    60c8:	003fe506 	br	6060 <__muldf3+0x344>
    60cc:	00800084 	movi	r2,2
    60d0:	20bf351e 	bne	r4,r2,5da8 <__muldf3+0x8c>
    60d4:	01000074 	movhi	r4,1
    60d8:	21218e04 	addi	r4,r4,-31176
    60dc:	003f3f06 	br	5ddc <__muldf3+0xc0>

000060e0 <__divdf3>:
    60e0:	deffed04 	addi	sp,sp,-76
    60e4:	dcc01115 	stw	r19,68(sp)
    60e8:	dcc00404 	addi	r19,sp,16
    60ec:	2011883a 	mov	r8,r4
    60f0:	2813883a 	mov	r9,r5
    60f4:	dc000e15 	stw	r16,56(sp)
    60f8:	d809883a 	mov	r4,sp
    60fc:	980b883a 	mov	r5,r19
    6100:	dc000904 	addi	r16,sp,36
    6104:	dfc01215 	stw	ra,72(sp)
    6108:	da400115 	stw	r9,4(sp)
    610c:	d9c00315 	stw	r7,12(sp)
    6110:	da000015 	stw	r8,0(sp)
    6114:	d9800215 	stw	r6,8(sp)
    6118:	dc801015 	stw	r18,64(sp)
    611c:	dc400f15 	stw	r17,60(sp)
    6120:	00007dc0 	call	7dc <__unpack_d>
    6124:	d9000204 	addi	r4,sp,8
    6128:	800b883a 	mov	r5,r16
    612c:	00007dc0 	call	7dc <__unpack_d>
    6130:	d9000417 	ldw	r4,16(sp)
    6134:	00800044 	movi	r2,1
    6138:	11000b2e 	bgeu	r2,r4,6168 <__divdf3+0x88>
    613c:	d9400917 	ldw	r5,36(sp)
    6140:	1140762e 	bgeu	r2,r5,631c <__divdf3+0x23c>
    6144:	d8800517 	ldw	r2,20(sp)
    6148:	d8c00a17 	ldw	r3,40(sp)
    614c:	01800104 	movi	r6,4
    6150:	10c4f03a 	xor	r2,r2,r3
    6154:	d8800515 	stw	r2,20(sp)
    6158:	21800226 	beq	r4,r6,6164 <__divdf3+0x84>
    615c:	00800084 	movi	r2,2
    6160:	2080141e 	bne	r4,r2,61b4 <__divdf3+0xd4>
    6164:	29000926 	beq	r5,r4,618c <__divdf3+0xac>
    6168:	9809883a 	mov	r4,r19
    616c:	0006d140 	call	6d14 <__pack_d>
    6170:	dfc01217 	ldw	ra,72(sp)
    6174:	dcc01117 	ldw	r19,68(sp)
    6178:	dc801017 	ldw	r18,64(sp)
    617c:	dc400f17 	ldw	r17,60(sp)
    6180:	dc000e17 	ldw	r16,56(sp)
    6184:	dec01304 	addi	sp,sp,76
    6188:	f800283a 	ret
    618c:	01000074 	movhi	r4,1
    6190:	21218e04 	addi	r4,r4,-31176
    6194:	0006d140 	call	6d14 <__pack_d>
    6198:	dfc01217 	ldw	ra,72(sp)
    619c:	dcc01117 	ldw	r19,68(sp)
    61a0:	dc801017 	ldw	r18,64(sp)
    61a4:	dc400f17 	ldw	r17,60(sp)
    61a8:	dc000e17 	ldw	r16,56(sp)
    61ac:	dec01304 	addi	sp,sp,76
    61b0:	f800283a 	ret
    61b4:	29805b26 	beq	r5,r6,6324 <__divdf3+0x244>
    61b8:	28802d26 	beq	r5,r2,6270 <__divdf3+0x190>
    61bc:	d8c00617 	ldw	r3,24(sp)
    61c0:	d8800b17 	ldw	r2,44(sp)
    61c4:	d9c00817 	ldw	r7,32(sp)
    61c8:	dc400d17 	ldw	r17,52(sp)
    61cc:	188bc83a 	sub	r5,r3,r2
    61d0:	d9800717 	ldw	r6,28(sp)
    61d4:	dc000c17 	ldw	r16,48(sp)
    61d8:	d9400615 	stw	r5,24(sp)
    61dc:	3c403836 	bltu	r7,r17,62c0 <__divdf3+0x1e0>
    61e0:	89c03626 	beq	r17,r7,62bc <__divdf3+0x1dc>
    61e4:	0015883a 	mov	r10,zero
    61e8:	001d883a 	mov	r14,zero
    61ec:	02c40034 	movhi	r11,4096
    61f0:	001f883a 	mov	r15,zero
    61f4:	003f883a 	mov	ra,zero
    61f8:	04800f44 	movi	r18,61
    61fc:	00000f06 	br	623c <__divdf3+0x15c>
    6200:	601d883a 	mov	r14,r12
    6204:	681f883a 	mov	r15,r13
    6208:	400d883a 	mov	r6,r8
    620c:	100f883a 	mov	r7,r2
    6210:	3191883a 	add	r8,r6,r6
    6214:	5808d07a 	srli	r4,r11,1
    6218:	4185803a 	cmpltu	r2,r8,r6
    621c:	39d3883a 	add	r9,r7,r7
    6220:	28c6b03a 	or	r3,r5,r3
    6224:	1245883a 	add	r2,r2,r9
    6228:	1815883a 	mov	r10,r3
    622c:	2017883a 	mov	r11,r4
    6230:	400d883a 	mov	r6,r8
    6234:	100f883a 	mov	r7,r2
    6238:	fc801726 	beq	ra,r18,6298 <__divdf3+0x1b8>
    623c:	580a97fa 	slli	r5,r11,31
    6240:	5006d07a 	srli	r3,r10,1
    6244:	ffc00044 	addi	ra,ra,1
    6248:	3c7ff136 	bltu	r7,r17,6210 <__divdf3+0x130>
    624c:	3411c83a 	sub	r8,r6,r16
    6250:	3205803a 	cmpltu	r2,r6,r8
    6254:	3c53c83a 	sub	r9,r7,r17
    6258:	7298b03a 	or	r12,r14,r10
    625c:	7adab03a 	or	r13,r15,r11
    6260:	4885c83a 	sub	r2,r9,r2
    6264:	89ffe61e 	bne	r17,r7,6200 <__divdf3+0x120>
    6268:	343fe936 	bltu	r6,r16,6210 <__divdf3+0x130>
    626c:	003fe406 	br	6200 <__divdf3+0x120>
    6270:	9809883a 	mov	r4,r19
    6274:	d9800415 	stw	r6,16(sp)
    6278:	0006d140 	call	6d14 <__pack_d>
    627c:	dfc01217 	ldw	ra,72(sp)
    6280:	dcc01117 	ldw	r19,68(sp)
    6284:	dc801017 	ldw	r18,64(sp)
    6288:	dc400f17 	ldw	r17,60(sp)
    628c:	dc000e17 	ldw	r16,56(sp)
    6290:	dec01304 	addi	sp,sp,76
    6294:	f800283a 	ret
    6298:	00803fc4 	movi	r2,255
    629c:	7090703a 	and	r8,r14,r2
    62a0:	00802004 	movi	r2,128
    62a4:	0007883a 	mov	r3,zero
    62a8:	0013883a 	mov	r9,zero
    62ac:	40800d26 	beq	r8,r2,62e4 <__divdf3+0x204>
    62b0:	dbc00815 	stw	r15,32(sp)
    62b4:	db800715 	stw	r14,28(sp)
    62b8:	003fab06 	br	6168 <__divdf3+0x88>
    62bc:	343fc92e 	bgeu	r6,r16,61e4 <__divdf3+0x104>
    62c0:	3185883a 	add	r2,r6,r6
    62c4:	1189803a 	cmpltu	r4,r2,r6
    62c8:	39c7883a 	add	r3,r7,r7
    62cc:	20c9883a 	add	r4,r4,r3
    62d0:	297fffc4 	addi	r5,r5,-1
    62d4:	100d883a 	mov	r6,r2
    62d8:	200f883a 	mov	r7,r4
    62dc:	d9400615 	stw	r5,24(sp)
    62e0:	003fc006 	br	61e4 <__divdf3+0x104>
    62e4:	483ff21e 	bne	r9,zero,62b0 <__divdf3+0x1d0>
    62e8:	01004004 	movi	r4,256
    62ec:	7104703a 	and	r2,r14,r4
    62f0:	10c4b03a 	or	r2,r2,r3
    62f4:	103fee1e 	bne	r2,zero,62b0 <__divdf3+0x1d0>
    62f8:	31c4b03a 	or	r2,r6,r7
    62fc:	103fec26 	beq	r2,zero,62b0 <__divdf3+0x1d0>
    6300:	7205883a 	add	r2,r14,r8
    6304:	1391803a 	cmpltu	r8,r2,r14
    6308:	43d1883a 	add	r8,r8,r15
    630c:	013fc004 	movi	r4,-256
    6310:	111c703a 	and	r14,r2,r4
    6314:	401f883a 	mov	r15,r8
    6318:	003fe506 	br	62b0 <__divdf3+0x1d0>
    631c:	8009883a 	mov	r4,r16
    6320:	003f9206 	br	616c <__divdf3+0x8c>
    6324:	9809883a 	mov	r4,r19
    6328:	d8000715 	stw	zero,28(sp)
    632c:	d8000815 	stw	zero,32(sp)
    6330:	d8000615 	stw	zero,24(sp)
    6334:	003f8d06 	br	616c <__divdf3+0x8c>

00006338 <__nedf2>:
    6338:	deffef04 	addi	sp,sp,-68
    633c:	dc400f15 	stw	r17,60(sp)
    6340:	dc400404 	addi	r17,sp,16
    6344:	2005883a 	mov	r2,r4
    6348:	2807883a 	mov	r3,r5
    634c:	dc000e15 	stw	r16,56(sp)
    6350:	d809883a 	mov	r4,sp
    6354:	880b883a 	mov	r5,r17
    6358:	dc000904 	addi	r16,sp,36
    635c:	d8c00115 	stw	r3,4(sp)
    6360:	d8800015 	stw	r2,0(sp)
    6364:	d9800215 	stw	r6,8(sp)
    6368:	dfc01015 	stw	ra,64(sp)
    636c:	d9c00315 	stw	r7,12(sp)
    6370:	00007dc0 	call	7dc <__unpack_d>
    6374:	d9000204 	addi	r4,sp,8
    6378:	800b883a 	mov	r5,r16
    637c:	00007dc0 	call	7dc <__unpack_d>
    6380:	d8800417 	ldw	r2,16(sp)
    6384:	00c00044 	movi	r3,1
    6388:	180d883a 	mov	r6,r3
    638c:	1880062e 	bgeu	r3,r2,63a8 <__nedf2+0x70>
    6390:	d8800917 	ldw	r2,36(sp)
    6394:	8809883a 	mov	r4,r17
    6398:	800b883a 	mov	r5,r16
    639c:	1880022e 	bgeu	r3,r2,63a8 <__nedf2+0x70>
    63a0:	00070280 	call	7028 <__fpcmp_parts_d>
    63a4:	100d883a 	mov	r6,r2
    63a8:	3005883a 	mov	r2,r6
    63ac:	dfc01017 	ldw	ra,64(sp)
    63b0:	dc400f17 	ldw	r17,60(sp)
    63b4:	dc000e17 	ldw	r16,56(sp)
    63b8:	dec01104 	addi	sp,sp,68
    63bc:	f800283a 	ret

000063c0 <__gtdf2>:
    63c0:	deffef04 	addi	sp,sp,-68
    63c4:	dc400f15 	stw	r17,60(sp)
    63c8:	dc400404 	addi	r17,sp,16
    63cc:	2005883a 	mov	r2,r4
    63d0:	2807883a 	mov	r3,r5
    63d4:	dc000e15 	stw	r16,56(sp)
    63d8:	d809883a 	mov	r4,sp
    63dc:	880b883a 	mov	r5,r17
    63e0:	dc000904 	addi	r16,sp,36
    63e4:	d8c00115 	stw	r3,4(sp)
    63e8:	d8800015 	stw	r2,0(sp)
    63ec:	d9800215 	stw	r6,8(sp)
    63f0:	dfc01015 	stw	ra,64(sp)
    63f4:	d9c00315 	stw	r7,12(sp)
    63f8:	00007dc0 	call	7dc <__unpack_d>
    63fc:	d9000204 	addi	r4,sp,8
    6400:	800b883a 	mov	r5,r16
    6404:	00007dc0 	call	7dc <__unpack_d>
    6408:	d8800417 	ldw	r2,16(sp)
    640c:	00c00044 	movi	r3,1
    6410:	01bfffc4 	movi	r6,-1
    6414:	1880062e 	bgeu	r3,r2,6430 <__gtdf2+0x70>
    6418:	d8800917 	ldw	r2,36(sp)
    641c:	8809883a 	mov	r4,r17
    6420:	800b883a 	mov	r5,r16
    6424:	1880022e 	bgeu	r3,r2,6430 <__gtdf2+0x70>
    6428:	00070280 	call	7028 <__fpcmp_parts_d>
    642c:	100d883a 	mov	r6,r2
    6430:	3005883a 	mov	r2,r6
    6434:	dfc01017 	ldw	ra,64(sp)
    6438:	dc400f17 	ldw	r17,60(sp)
    643c:	dc000e17 	ldw	r16,56(sp)
    6440:	dec01104 	addi	sp,sp,68
    6444:	f800283a 	ret

00006448 <__gedf2>:
    6448:	deffef04 	addi	sp,sp,-68
    644c:	dc400f15 	stw	r17,60(sp)
    6450:	dc400404 	addi	r17,sp,16
    6454:	2005883a 	mov	r2,r4
    6458:	2807883a 	mov	r3,r5
    645c:	dc000e15 	stw	r16,56(sp)
    6460:	d809883a 	mov	r4,sp
    6464:	880b883a 	mov	r5,r17
    6468:	dc000904 	addi	r16,sp,36
    646c:	d8c00115 	stw	r3,4(sp)
    6470:	d8800015 	stw	r2,0(sp)
    6474:	d9800215 	stw	r6,8(sp)
    6478:	dfc01015 	stw	ra,64(sp)
    647c:	d9c00315 	stw	r7,12(sp)
    6480:	00007dc0 	call	7dc <__unpack_d>
    6484:	d9000204 	addi	r4,sp,8
    6488:	800b883a 	mov	r5,r16
    648c:	00007dc0 	call	7dc <__unpack_d>
    6490:	d8800417 	ldw	r2,16(sp)
    6494:	00c00044 	movi	r3,1
    6498:	01bfffc4 	movi	r6,-1
    649c:	1880062e 	bgeu	r3,r2,64b8 <__gedf2+0x70>
    64a0:	d8800917 	ldw	r2,36(sp)
    64a4:	8809883a 	mov	r4,r17
    64a8:	800b883a 	mov	r5,r16
    64ac:	1880022e 	bgeu	r3,r2,64b8 <__gedf2+0x70>
    64b0:	00070280 	call	7028 <__fpcmp_parts_d>
    64b4:	100d883a 	mov	r6,r2
    64b8:	3005883a 	mov	r2,r6
    64bc:	dfc01017 	ldw	ra,64(sp)
    64c0:	dc400f17 	ldw	r17,60(sp)
    64c4:	dc000e17 	ldw	r16,56(sp)
    64c8:	dec01104 	addi	sp,sp,68
    64cc:	f800283a 	ret

000064d0 <__ltdf2>:
    64d0:	deffef04 	addi	sp,sp,-68
    64d4:	dc400f15 	stw	r17,60(sp)
    64d8:	dc400404 	addi	r17,sp,16
    64dc:	2005883a 	mov	r2,r4
    64e0:	2807883a 	mov	r3,r5
    64e4:	dc000e15 	stw	r16,56(sp)
    64e8:	d809883a 	mov	r4,sp
    64ec:	880b883a 	mov	r5,r17
    64f0:	dc000904 	addi	r16,sp,36
    64f4:	d8c00115 	stw	r3,4(sp)
    64f8:	d8800015 	stw	r2,0(sp)
    64fc:	d9800215 	stw	r6,8(sp)
    6500:	dfc01015 	stw	ra,64(sp)
    6504:	d9c00315 	stw	r7,12(sp)
    6508:	00007dc0 	call	7dc <__unpack_d>
    650c:	d9000204 	addi	r4,sp,8
    6510:	800b883a 	mov	r5,r16
    6514:	00007dc0 	call	7dc <__unpack_d>
    6518:	d8800417 	ldw	r2,16(sp)
    651c:	00c00044 	movi	r3,1
    6520:	180d883a 	mov	r6,r3
    6524:	1880062e 	bgeu	r3,r2,6540 <__ltdf2+0x70>
    6528:	d8800917 	ldw	r2,36(sp)
    652c:	8809883a 	mov	r4,r17
    6530:	800b883a 	mov	r5,r16
    6534:	1880022e 	bgeu	r3,r2,6540 <__ltdf2+0x70>
    6538:	00070280 	call	7028 <__fpcmp_parts_d>
    653c:	100d883a 	mov	r6,r2
    6540:	3005883a 	mov	r2,r6
    6544:	dfc01017 	ldw	ra,64(sp)
    6548:	dc400f17 	ldw	r17,60(sp)
    654c:	dc000e17 	ldw	r16,56(sp)
    6550:	dec01104 	addi	sp,sp,68
    6554:	f800283a 	ret

00006558 <__ledf2>:
    6558:	deffef04 	addi	sp,sp,-68
    655c:	dc400f15 	stw	r17,60(sp)
    6560:	dc400404 	addi	r17,sp,16
    6564:	2005883a 	mov	r2,r4
    6568:	2807883a 	mov	r3,r5
    656c:	dc000e15 	stw	r16,56(sp)
    6570:	d809883a 	mov	r4,sp
    6574:	880b883a 	mov	r5,r17
    6578:	dc000904 	addi	r16,sp,36
    657c:	d8c00115 	stw	r3,4(sp)
    6580:	d8800015 	stw	r2,0(sp)
    6584:	d9800215 	stw	r6,8(sp)
    6588:	dfc01015 	stw	ra,64(sp)
    658c:	d9c00315 	stw	r7,12(sp)
    6590:	00007dc0 	call	7dc <__unpack_d>
    6594:	d9000204 	addi	r4,sp,8
    6598:	800b883a 	mov	r5,r16
    659c:	00007dc0 	call	7dc <__unpack_d>
    65a0:	d8800417 	ldw	r2,16(sp)
    65a4:	00c00044 	movi	r3,1
    65a8:	180d883a 	mov	r6,r3
    65ac:	1880062e 	bgeu	r3,r2,65c8 <__ledf2+0x70>
    65b0:	d8800917 	ldw	r2,36(sp)
    65b4:	8809883a 	mov	r4,r17
    65b8:	800b883a 	mov	r5,r16
    65bc:	1880022e 	bgeu	r3,r2,65c8 <__ledf2+0x70>
    65c0:	00070280 	call	7028 <__fpcmp_parts_d>
    65c4:	100d883a 	mov	r6,r2
    65c8:	3005883a 	mov	r2,r6
    65cc:	dfc01017 	ldw	ra,64(sp)
    65d0:	dc400f17 	ldw	r17,60(sp)
    65d4:	dc000e17 	ldw	r16,56(sp)
    65d8:	dec01104 	addi	sp,sp,68
    65dc:	f800283a 	ret

000065e0 <__floatsidf>:
    65e0:	2006d7fa 	srli	r3,r4,31
    65e4:	defff604 	addi	sp,sp,-40
    65e8:	008000c4 	movi	r2,3
    65ec:	dfc00915 	stw	ra,36(sp)
    65f0:	dcc00815 	stw	r19,32(sp)
    65f4:	dc800715 	stw	r18,28(sp)
    65f8:	dc400615 	stw	r17,24(sp)
    65fc:	dc000515 	stw	r16,20(sp)
    6600:	d8800015 	stw	r2,0(sp)
    6604:	d8c00115 	stw	r3,4(sp)
    6608:	20000f1e 	bne	r4,zero,6648 <__floatsidf+0x68>
    660c:	00800084 	movi	r2,2
    6610:	d8800015 	stw	r2,0(sp)
    6614:	d809883a 	mov	r4,sp
    6618:	0006d140 	call	6d14 <__pack_d>
    661c:	1009883a 	mov	r4,r2
    6620:	180b883a 	mov	r5,r3
    6624:	2005883a 	mov	r2,r4
    6628:	2807883a 	mov	r3,r5
    662c:	dfc00917 	ldw	ra,36(sp)
    6630:	dcc00817 	ldw	r19,32(sp)
    6634:	dc800717 	ldw	r18,28(sp)
    6638:	dc400617 	ldw	r17,24(sp)
    663c:	dc000517 	ldw	r16,20(sp)
    6640:	dec00a04 	addi	sp,sp,40
    6644:	f800283a 	ret
    6648:	00800f04 	movi	r2,60
    664c:	1807003a 	cmpeq	r3,r3,zero
    6650:	d8800215 	stw	r2,8(sp)
    6654:	18001126 	beq	r3,zero,669c <__floatsidf+0xbc>
    6658:	0027883a 	mov	r19,zero
    665c:	2025883a 	mov	r18,r4
    6660:	d9000315 	stw	r4,12(sp)
    6664:	dcc00415 	stw	r19,16(sp)
    6668:	0006bec0 	call	6bec <__clzsi2>
    666c:	11000744 	addi	r4,r2,29
    6670:	013fe80e 	bge	zero,r4,6614 <__floatsidf+0x34>
    6674:	10bfff44 	addi	r2,r2,-3
    6678:	10000c16 	blt	r2,zero,66ac <__floatsidf+0xcc>
    667c:	90a2983a 	sll	r17,r18,r2
    6680:	0021883a 	mov	r16,zero
    6684:	d8800217 	ldw	r2,8(sp)
    6688:	dc400415 	stw	r17,16(sp)
    668c:	dc000315 	stw	r16,12(sp)
    6690:	1105c83a 	sub	r2,r2,r4
    6694:	d8800215 	stw	r2,8(sp)
    6698:	003fde06 	br	6614 <__floatsidf+0x34>
    669c:	00a00034 	movhi	r2,32768
    66a0:	20800a26 	beq	r4,r2,66cc <__floatsidf+0xec>
    66a4:	0109c83a 	sub	r4,zero,r4
    66a8:	003feb06 	br	6658 <__floatsidf+0x78>
    66ac:	9006d07a 	srli	r3,r18,1
    66b0:	008007c4 	movi	r2,31
    66b4:	1105c83a 	sub	r2,r2,r4
    66b8:	1886d83a 	srl	r3,r3,r2
    66bc:	9922983a 	sll	r17,r19,r4
    66c0:	9120983a 	sll	r16,r18,r4
    66c4:	1c62b03a 	or	r17,r3,r17
    66c8:	003fee06 	br	6684 <__floatsidf+0xa4>
    66cc:	0009883a 	mov	r4,zero
    66d0:	01707834 	movhi	r5,49632
    66d4:	003fd306 	br	6624 <__floatsidf+0x44>

000066d8 <__fixdfsi>:
    66d8:	defff804 	addi	sp,sp,-32
    66dc:	2005883a 	mov	r2,r4
    66e0:	2807883a 	mov	r3,r5
    66e4:	d809883a 	mov	r4,sp
    66e8:	d9400204 	addi	r5,sp,8
    66ec:	d8c00115 	stw	r3,4(sp)
    66f0:	d8800015 	stw	r2,0(sp)
    66f4:	dfc00715 	stw	ra,28(sp)
    66f8:	00007dc0 	call	7dc <__unpack_d>
    66fc:	d8c00217 	ldw	r3,8(sp)
    6700:	00800084 	movi	r2,2
    6704:	1880051e 	bne	r3,r2,671c <__fixdfsi+0x44>
    6708:	0007883a 	mov	r3,zero
    670c:	1805883a 	mov	r2,r3
    6710:	dfc00717 	ldw	ra,28(sp)
    6714:	dec00804 	addi	sp,sp,32
    6718:	f800283a 	ret
    671c:	00800044 	movi	r2,1
    6720:	10fff92e 	bgeu	r2,r3,6708 <__fixdfsi+0x30>
    6724:	00800104 	movi	r2,4
    6728:	18800426 	beq	r3,r2,673c <__fixdfsi+0x64>
    672c:	d8c00417 	ldw	r3,16(sp)
    6730:	183ff516 	blt	r3,zero,6708 <__fixdfsi+0x30>
    6734:	00800784 	movi	r2,30
    6738:	10c0080e 	bge	r2,r3,675c <__fixdfsi+0x84>
    673c:	d8800317 	ldw	r2,12(sp)
    6740:	1000121e 	bne	r2,zero,678c <__fixdfsi+0xb4>
    6744:	00e00034 	movhi	r3,32768
    6748:	18ffffc4 	addi	r3,r3,-1
    674c:	1805883a 	mov	r2,r3
    6750:	dfc00717 	ldw	ra,28(sp)
    6754:	dec00804 	addi	sp,sp,32
    6758:	f800283a 	ret
    675c:	00800f04 	movi	r2,60
    6760:	10d1c83a 	sub	r8,r2,r3
    6764:	40bff804 	addi	r2,r8,-32
    6768:	d9800517 	ldw	r6,20(sp)
    676c:	d9c00617 	ldw	r7,24(sp)
    6770:	10000816 	blt	r2,zero,6794 <__fixdfsi+0xbc>
    6774:	3888d83a 	srl	r4,r7,r2
    6778:	d8800317 	ldw	r2,12(sp)
    677c:	2007883a 	mov	r3,r4
    6780:	103fe226 	beq	r2,zero,670c <__fixdfsi+0x34>
    6784:	0107c83a 	sub	r3,zero,r4
    6788:	003fe006 	br	670c <__fixdfsi+0x34>
    678c:	00e00034 	movhi	r3,32768
    6790:	003fde06 	br	670c <__fixdfsi+0x34>
    6794:	39c7883a 	add	r3,r7,r7
    6798:	008007c4 	movi	r2,31
    679c:	1205c83a 	sub	r2,r2,r8
    67a0:	1886983a 	sll	r3,r3,r2
    67a4:	3208d83a 	srl	r4,r6,r8
    67a8:	1908b03a 	or	r4,r3,r4
    67ac:	003ff206 	br	6778 <__fixdfsi+0xa0>

000067b0 <__floatunsidf>:
    67b0:	defff204 	addi	sp,sp,-56
    67b4:	dfc00d15 	stw	ra,52(sp)
    67b8:	ddc00c15 	stw	r23,48(sp)
    67bc:	dd800b15 	stw	r22,44(sp)
    67c0:	dd400a15 	stw	r21,40(sp)
    67c4:	dd000915 	stw	r20,36(sp)
    67c8:	dcc00815 	stw	r19,32(sp)
    67cc:	dc800715 	stw	r18,28(sp)
    67d0:	dc400615 	stw	r17,24(sp)
    67d4:	dc000515 	stw	r16,20(sp)
    67d8:	d8000115 	stw	zero,4(sp)
    67dc:	20000f1e 	bne	r4,zero,681c <__floatunsidf+0x6c>
    67e0:	00800084 	movi	r2,2
    67e4:	d8800015 	stw	r2,0(sp)
    67e8:	d809883a 	mov	r4,sp
    67ec:	0006d140 	call	6d14 <__pack_d>
    67f0:	dfc00d17 	ldw	ra,52(sp)
    67f4:	ddc00c17 	ldw	r23,48(sp)
    67f8:	dd800b17 	ldw	r22,44(sp)
    67fc:	dd400a17 	ldw	r21,40(sp)
    6800:	dd000917 	ldw	r20,36(sp)
    6804:	dcc00817 	ldw	r19,32(sp)
    6808:	dc800717 	ldw	r18,28(sp)
    680c:	dc400617 	ldw	r17,24(sp)
    6810:	dc000517 	ldw	r16,20(sp)
    6814:	dec00e04 	addi	sp,sp,56
    6818:	f800283a 	ret
    681c:	008000c4 	movi	r2,3
    6820:	00c00f04 	movi	r3,60
    6824:	002f883a 	mov	r23,zero
    6828:	202d883a 	mov	r22,r4
    682c:	d8800015 	stw	r2,0(sp)
    6830:	d8c00215 	stw	r3,8(sp)
    6834:	d9000315 	stw	r4,12(sp)
    6838:	ddc00415 	stw	r23,16(sp)
    683c:	0006bec0 	call	6bec <__clzsi2>
    6840:	12400744 	addi	r9,r2,29
    6844:	48000b16 	blt	r9,zero,6874 <__floatunsidf+0xc4>
    6848:	483fe726 	beq	r9,zero,67e8 <__floatunsidf+0x38>
    684c:	10bfff44 	addi	r2,r2,-3
    6850:	10002e16 	blt	r2,zero,690c <__floatunsidf+0x15c>
    6854:	b0a2983a 	sll	r17,r22,r2
    6858:	0021883a 	mov	r16,zero
    685c:	d8800217 	ldw	r2,8(sp)
    6860:	dc400415 	stw	r17,16(sp)
    6864:	dc000315 	stw	r16,12(sp)
    6868:	1245c83a 	sub	r2,r2,r9
    686c:	d8800215 	stw	r2,8(sp)
    6870:	003fdd06 	br	67e8 <__floatunsidf+0x38>
    6874:	0255c83a 	sub	r10,zero,r9
    6878:	51bff804 	addi	r6,r10,-32
    687c:	30001b16 	blt	r6,zero,68ec <__floatunsidf+0x13c>
    6880:	b9a8d83a 	srl	r20,r23,r6
    6884:	002b883a 	mov	r21,zero
    6888:	000f883a 	mov	r7,zero
    688c:	01000044 	movi	r4,1
    6890:	0011883a 	mov	r8,zero
    6894:	30002516 	blt	r6,zero,692c <__floatunsidf+0x17c>
    6898:	21a6983a 	sll	r19,r4,r6
    689c:	0025883a 	mov	r18,zero
    68a0:	00bfffc4 	movi	r2,-1
    68a4:	9089883a 	add	r4,r18,r2
    68a8:	988b883a 	add	r5,r19,r2
    68ac:	248d803a 	cmpltu	r6,r4,r18
    68b0:	314b883a 	add	r5,r6,r5
    68b4:	b104703a 	and	r2,r22,r4
    68b8:	b946703a 	and	r3,r23,r5
    68bc:	10c4b03a 	or	r2,r2,r3
    68c0:	10000226 	beq	r2,zero,68cc <__floatunsidf+0x11c>
    68c4:	01c00044 	movi	r7,1
    68c8:	0011883a 	mov	r8,zero
    68cc:	d9000217 	ldw	r4,8(sp)
    68d0:	a1c4b03a 	or	r2,r20,r7
    68d4:	aa06b03a 	or	r3,r21,r8
    68d8:	2249c83a 	sub	r4,r4,r9
    68dc:	d8c00415 	stw	r3,16(sp)
    68e0:	d9000215 	stw	r4,8(sp)
    68e4:	d8800315 	stw	r2,12(sp)
    68e8:	003fbf06 	br	67e8 <__floatunsidf+0x38>
    68ec:	bdc7883a 	add	r3,r23,r23
    68f0:	008007c4 	movi	r2,31
    68f4:	1285c83a 	sub	r2,r2,r10
    68f8:	1886983a 	sll	r3,r3,r2
    68fc:	b2a8d83a 	srl	r20,r22,r10
    6900:	baaad83a 	srl	r21,r23,r10
    6904:	1d28b03a 	or	r20,r3,r20
    6908:	003fdf06 	br	6888 <__floatunsidf+0xd8>
    690c:	b006d07a 	srli	r3,r22,1
    6910:	008007c4 	movi	r2,31
    6914:	1245c83a 	sub	r2,r2,r9
    6918:	1886d83a 	srl	r3,r3,r2
    691c:	ba62983a 	sll	r17,r23,r9
    6920:	b260983a 	sll	r16,r22,r9
    6924:	1c62b03a 	or	r17,r3,r17
    6928:	003fcc06 	br	685c <__floatunsidf+0xac>
    692c:	2006d07a 	srli	r3,r4,1
    6930:	008007c4 	movi	r2,31
    6934:	1285c83a 	sub	r2,r2,r10
    6938:	18a6d83a 	srl	r19,r3,r2
    693c:	22a4983a 	sll	r18,r4,r10
    6940:	003fd706 	br	68a0 <__floatunsidf+0xf0>

00006944 <udivmodsi4>:
    6944:	29001b2e 	bgeu	r5,r4,69b4 <udivmodsi4+0x70>
    6948:	28001a16 	blt	r5,zero,69b4 <udivmodsi4+0x70>
    694c:	00800044 	movi	r2,1
    6950:	0007883a 	mov	r3,zero
    6954:	01c007c4 	movi	r7,31
    6958:	00000306 	br	6968 <udivmodsi4+0x24>
    695c:	19c01326 	beq	r3,r7,69ac <udivmodsi4+0x68>
    6960:	18c00044 	addi	r3,r3,1
    6964:	28000416 	blt	r5,zero,6978 <udivmodsi4+0x34>
    6968:	294b883a 	add	r5,r5,r5
    696c:	1085883a 	add	r2,r2,r2
    6970:	293ffa36 	bltu	r5,r4,695c <udivmodsi4+0x18>
    6974:	10000d26 	beq	r2,zero,69ac <udivmodsi4+0x68>
    6978:	0007883a 	mov	r3,zero
    697c:	21400236 	bltu	r4,r5,6988 <udivmodsi4+0x44>
    6980:	2149c83a 	sub	r4,r4,r5
    6984:	1886b03a 	or	r3,r3,r2
    6988:	1004d07a 	srli	r2,r2,1
    698c:	280ad07a 	srli	r5,r5,1
    6990:	103ffa1e 	bne	r2,zero,697c <udivmodsi4+0x38>
    6994:	30000226 	beq	r6,zero,69a0 <udivmodsi4+0x5c>
    6998:	2005883a 	mov	r2,r4
    699c:	f800283a 	ret
    69a0:	1809883a 	mov	r4,r3
    69a4:	2005883a 	mov	r2,r4
    69a8:	f800283a 	ret
    69ac:	0007883a 	mov	r3,zero
    69b0:	003ff806 	br	6994 <udivmodsi4+0x50>
    69b4:	00800044 	movi	r2,1
    69b8:	0007883a 	mov	r3,zero
    69bc:	003fef06 	br	697c <udivmodsi4+0x38>

000069c0 <__divsi3>:
    69c0:	defffe04 	addi	sp,sp,-8
    69c4:	dc000015 	stw	r16,0(sp)
    69c8:	dfc00115 	stw	ra,4(sp)
    69cc:	0021883a 	mov	r16,zero
    69d0:	20000c16 	blt	r4,zero,6a04 <__divsi3+0x44>
    69d4:	000d883a 	mov	r6,zero
    69d8:	28000e16 	blt	r5,zero,6a14 <__divsi3+0x54>
    69dc:	00069440 	call	6944 <udivmodsi4>
    69e0:	1007883a 	mov	r3,r2
    69e4:	8005003a 	cmpeq	r2,r16,zero
    69e8:	1000011e 	bne	r2,zero,69f0 <__divsi3+0x30>
    69ec:	00c7c83a 	sub	r3,zero,r3
    69f0:	1805883a 	mov	r2,r3
    69f4:	dfc00117 	ldw	ra,4(sp)
    69f8:	dc000017 	ldw	r16,0(sp)
    69fc:	dec00204 	addi	sp,sp,8
    6a00:	f800283a 	ret
    6a04:	0109c83a 	sub	r4,zero,r4
    6a08:	04000044 	movi	r16,1
    6a0c:	000d883a 	mov	r6,zero
    6a10:	283ff20e 	bge	r5,zero,69dc <__divsi3+0x1c>
    6a14:	014bc83a 	sub	r5,zero,r5
    6a18:	8021003a 	cmpeq	r16,r16,zero
    6a1c:	003fef06 	br	69dc <__divsi3+0x1c>

00006a20 <__modsi3>:
    6a20:	deffff04 	addi	sp,sp,-4
    6a24:	dfc00015 	stw	ra,0(sp)
    6a28:	01800044 	movi	r6,1
    6a2c:	2807883a 	mov	r3,r5
    6a30:	20000416 	blt	r4,zero,6a44 <__modsi3+0x24>
    6a34:	28000c16 	blt	r5,zero,6a68 <__modsi3+0x48>
    6a38:	dfc00017 	ldw	ra,0(sp)
    6a3c:	dec00104 	addi	sp,sp,4
    6a40:	00069441 	jmpi	6944 <udivmodsi4>
    6a44:	0109c83a 	sub	r4,zero,r4
    6a48:	28000b16 	blt	r5,zero,6a78 <__modsi3+0x58>
    6a4c:	180b883a 	mov	r5,r3
    6a50:	01800044 	movi	r6,1
    6a54:	00069440 	call	6944 <udivmodsi4>
    6a58:	0085c83a 	sub	r2,zero,r2
    6a5c:	dfc00017 	ldw	ra,0(sp)
    6a60:	dec00104 	addi	sp,sp,4
    6a64:	f800283a 	ret
    6a68:	014bc83a 	sub	r5,zero,r5
    6a6c:	dfc00017 	ldw	ra,0(sp)
    6a70:	dec00104 	addi	sp,sp,4
    6a74:	00069441 	jmpi	6944 <udivmodsi4>
    6a78:	0147c83a 	sub	r3,zero,r5
    6a7c:	003ff306 	br	6a4c <__modsi3+0x2c>

00006a80 <__udivsi3>:
    6a80:	000d883a 	mov	r6,zero
    6a84:	00069441 	jmpi	6944 <udivmodsi4>

00006a88 <__umodsi3>:
    6a88:	01800044 	movi	r6,1
    6a8c:	00069441 	jmpi	6944 <udivmodsi4>

00006a90 <__mulsi3>:
    6a90:	20000a26 	beq	r4,zero,6abc <__mulsi3+0x2c>
    6a94:	0007883a 	mov	r3,zero
    6a98:	2080004c 	andi	r2,r4,1
    6a9c:	1005003a 	cmpeq	r2,r2,zero
    6aa0:	2008d07a 	srli	r4,r4,1
    6aa4:	1000011e 	bne	r2,zero,6aac <__mulsi3+0x1c>
    6aa8:	1947883a 	add	r3,r3,r5
    6aac:	294b883a 	add	r5,r5,r5
    6ab0:	203ff91e 	bne	r4,zero,6a98 <__mulsi3+0x8>
    6ab4:	1805883a 	mov	r2,r3
    6ab8:	f800283a 	ret
    6abc:	0007883a 	mov	r3,zero
    6ac0:	1805883a 	mov	r2,r3
    6ac4:	f800283a 	ret

00006ac8 <__muldi3>:
    6ac8:	defff204 	addi	sp,sp,-56
    6acc:	df000c15 	stw	fp,48(sp)
    6ad0:	3038d43a 	srli	fp,r6,16
    6ad4:	dd000815 	stw	r20,32(sp)
    6ad8:	dc400515 	stw	r17,20(sp)
    6adc:	2028d43a 	srli	r20,r4,16
    6ae0:	247fffcc 	andi	r17,r4,65535
    6ae4:	dc000415 	stw	r16,16(sp)
    6ae8:	343fffcc 	andi	r16,r6,65535
    6aec:	dcc00715 	stw	r19,28(sp)
    6af0:	d9000015 	stw	r4,0(sp)
    6af4:	2827883a 	mov	r19,r5
    6af8:	8809883a 	mov	r4,r17
    6afc:	d9400115 	stw	r5,4(sp)
    6b00:	800b883a 	mov	r5,r16
    6b04:	d9800215 	stw	r6,8(sp)
    6b08:	dfc00d15 	stw	ra,52(sp)
    6b0c:	d9c00315 	stw	r7,12(sp)
    6b10:	dd800a15 	stw	r22,40(sp)
    6b14:	dd400915 	stw	r21,36(sp)
    6b18:	302d883a 	mov	r22,r6
    6b1c:	ddc00b15 	stw	r23,44(sp)
    6b20:	dc800615 	stw	r18,24(sp)
    6b24:	0006a900 	call	6a90 <__mulsi3>
    6b28:	8809883a 	mov	r4,r17
    6b2c:	e00b883a 	mov	r5,fp
    6b30:	102b883a 	mov	r21,r2
    6b34:	0006a900 	call	6a90 <__mulsi3>
    6b38:	800b883a 	mov	r5,r16
    6b3c:	a009883a 	mov	r4,r20
    6b40:	1023883a 	mov	r17,r2
    6b44:	0006a900 	call	6a90 <__mulsi3>
    6b48:	a009883a 	mov	r4,r20
    6b4c:	e00b883a 	mov	r5,fp
    6b50:	1021883a 	mov	r16,r2
    6b54:	0006a900 	call	6a90 <__mulsi3>
    6b58:	a8ffffcc 	andi	r3,r21,65535
    6b5c:	a82ad43a 	srli	r21,r21,16
    6b60:	8c23883a 	add	r17,r17,r16
    6b64:	1011883a 	mov	r8,r2
    6b68:	ac6b883a 	add	r21,r21,r17
    6b6c:	a804943a 	slli	r2,r21,16
    6b70:	b009883a 	mov	r4,r22
    6b74:	980b883a 	mov	r5,r19
    6b78:	10c7883a 	add	r3,r2,r3
    6b7c:	a812d43a 	srli	r9,r21,16
    6b80:	180d883a 	mov	r6,r3
    6b84:	ac00022e 	bgeu	r21,r16,6b90 <__muldi3+0xc8>
    6b88:	00800074 	movhi	r2,1
    6b8c:	4091883a 	add	r8,r8,r2
    6b90:	4267883a 	add	r19,r8,r9
    6b94:	302d883a 	mov	r22,r6
    6b98:	0006a900 	call	6a90 <__mulsi3>
    6b9c:	d9400317 	ldw	r5,12(sp)
    6ba0:	d9000017 	ldw	r4,0(sp)
    6ba4:	1023883a 	mov	r17,r2
    6ba8:	0006a900 	call	6a90 <__mulsi3>
    6bac:	14cb883a 	add	r5,r2,r19
    6bb0:	894b883a 	add	r5,r17,r5
    6bb4:	b005883a 	mov	r2,r22
    6bb8:	2807883a 	mov	r3,r5
    6bbc:	dfc00d17 	ldw	ra,52(sp)
    6bc0:	df000c17 	ldw	fp,48(sp)
    6bc4:	ddc00b17 	ldw	r23,44(sp)
    6bc8:	dd800a17 	ldw	r22,40(sp)
    6bcc:	dd400917 	ldw	r21,36(sp)
    6bd0:	dd000817 	ldw	r20,32(sp)
    6bd4:	dcc00717 	ldw	r19,28(sp)
    6bd8:	dc800617 	ldw	r18,24(sp)
    6bdc:	dc400517 	ldw	r17,20(sp)
    6be0:	dc000417 	ldw	r16,16(sp)
    6be4:	dec00e04 	addi	sp,sp,56
    6be8:	f800283a 	ret

00006bec <__clzsi2>:
    6bec:	00bfffd4 	movui	r2,65535
    6bf0:	11000e36 	bltu	r2,r4,6c2c <__clzsi2+0x40>
    6bf4:	00803fc4 	movi	r2,255
    6bf8:	01400204 	movi	r5,8
    6bfc:	0007883a 	mov	r3,zero
    6c00:	11001036 	bltu	r2,r4,6c44 <__clzsi2+0x58>
    6c04:	000b883a 	mov	r5,zero
    6c08:	20c6d83a 	srl	r3,r4,r3
    6c0c:	00800074 	movhi	r2,1
    6c10:	10a19304 	addi	r2,r2,-31156
    6c14:	1887883a 	add	r3,r3,r2
    6c18:	18800003 	ldbu	r2,0(r3)
    6c1c:	00c00804 	movi	r3,32
    6c20:	2885883a 	add	r2,r5,r2
    6c24:	1885c83a 	sub	r2,r3,r2
    6c28:	f800283a 	ret
    6c2c:	01400404 	movi	r5,16
    6c30:	00804034 	movhi	r2,256
    6c34:	10bfffc4 	addi	r2,r2,-1
    6c38:	2807883a 	mov	r3,r5
    6c3c:	113ff22e 	bgeu	r2,r4,6c08 <__clzsi2+0x1c>
    6c40:	01400604 	movi	r5,24
    6c44:	2807883a 	mov	r3,r5
    6c48:	20c6d83a 	srl	r3,r4,r3
    6c4c:	00800074 	movhi	r2,1
    6c50:	10a19304 	addi	r2,r2,-31156
    6c54:	1887883a 	add	r3,r3,r2
    6c58:	18800003 	ldbu	r2,0(r3)
    6c5c:	00c00804 	movi	r3,32
    6c60:	2885883a 	add	r2,r5,r2
    6c64:	1885c83a 	sub	r2,r3,r2
    6c68:	f800283a 	ret

00006c6c <__fpcmp_parts_f>:
    6c6c:	21800017 	ldw	r6,0(r4)
    6c70:	00c00044 	movi	r3,1
    6c74:	19800a2e 	bgeu	r3,r6,6ca0 <__fpcmp_parts_f+0x34>
    6c78:	28800017 	ldw	r2,0(r5)
    6c7c:	1880082e 	bgeu	r3,r2,6ca0 <__fpcmp_parts_f+0x34>
    6c80:	00c00104 	movi	r3,4
    6c84:	30c01e26 	beq	r6,r3,6d00 <__fpcmp_parts_f+0x94>
    6c88:	10c01a26 	beq	r2,r3,6cf4 <__fpcmp_parts_f+0x88>
    6c8c:	00c00084 	movi	r3,2
    6c90:	30c00526 	beq	r6,r3,6ca8 <__fpcmp_parts_f+0x3c>
    6c94:	10c0071e 	bne	r2,r3,6cb4 <__fpcmp_parts_f+0x48>
    6c98:	20800117 	ldw	r2,4(r4)
    6c9c:	1000091e 	bne	r2,zero,6cc4 <__fpcmp_parts_f+0x58>
    6ca0:	00800044 	movi	r2,1
    6ca4:	f800283a 	ret
    6ca8:	10c0121e 	bne	r2,r3,6cf4 <__fpcmp_parts_f+0x88>
    6cac:	0005883a 	mov	r2,zero
    6cb0:	f800283a 	ret
    6cb4:	20c00117 	ldw	r3,4(r4)
    6cb8:	28800117 	ldw	r2,4(r5)
    6cbc:	18800326 	beq	r3,r2,6ccc <__fpcmp_parts_f+0x60>
    6cc0:	183ff726 	beq	r3,zero,6ca0 <__fpcmp_parts_f+0x34>
    6cc4:	00bfffc4 	movi	r2,-1
    6cc8:	f800283a 	ret
    6ccc:	21800217 	ldw	r6,8(r4)
    6cd0:	28800217 	ldw	r2,8(r5)
    6cd4:	11bffa16 	blt	r2,r6,6cc0 <__fpcmp_parts_f+0x54>
    6cd8:	30800416 	blt	r6,r2,6cec <__fpcmp_parts_f+0x80>
    6cdc:	21000317 	ldw	r4,12(r4)
    6ce0:	29400317 	ldw	r5,12(r5)
    6ce4:	293ff636 	bltu	r5,r4,6cc0 <__fpcmp_parts_f+0x54>
    6ce8:	217ff02e 	bgeu	r4,r5,6cac <__fpcmp_parts_f+0x40>
    6cec:	183fec1e 	bne	r3,zero,6ca0 <__fpcmp_parts_f+0x34>
    6cf0:	003ff406 	br	6cc4 <__fpcmp_parts_f+0x58>
    6cf4:	28800117 	ldw	r2,4(r5)
    6cf8:	103fe91e 	bne	r2,zero,6ca0 <__fpcmp_parts_f+0x34>
    6cfc:	003ff106 	br	6cc4 <__fpcmp_parts_f+0x58>
    6d00:	11bfe51e 	bne	r2,r6,6c98 <__fpcmp_parts_f+0x2c>
    6d04:	28c00117 	ldw	r3,4(r5)
    6d08:	20800117 	ldw	r2,4(r4)
    6d0c:	1885c83a 	sub	r2,r3,r2
    6d10:	f800283a 	ret

00006d14 <__pack_d>:
    6d14:	20c00017 	ldw	r3,0(r4)
    6d18:	defffd04 	addi	sp,sp,-12
    6d1c:	dc000015 	stw	r16,0(sp)
    6d20:	dc800215 	stw	r18,8(sp)
    6d24:	dc400115 	stw	r17,4(sp)
    6d28:	00800044 	movi	r2,1
    6d2c:	22000317 	ldw	r8,12(r4)
    6d30:	001f883a 	mov	r15,zero
    6d34:	22400417 	ldw	r9,16(r4)
    6d38:	24000117 	ldw	r16,4(r4)
    6d3c:	10c0552e 	bgeu	r2,r3,6e94 <__pack_d+0x180>
    6d40:	00800104 	movi	r2,4
    6d44:	18804f26 	beq	r3,r2,6e84 <__pack_d+0x170>
    6d48:	00800084 	movi	r2,2
    6d4c:	18800226 	beq	r3,r2,6d58 <__pack_d+0x44>
    6d50:	4244b03a 	or	r2,r8,r9
    6d54:	10001a1e 	bne	r2,zero,6dc0 <__pack_d+0xac>
    6d58:	000d883a 	mov	r6,zero
    6d5c:	000f883a 	mov	r7,zero
    6d60:	0011883a 	mov	r8,zero
    6d64:	00800434 	movhi	r2,16
    6d68:	10bfffc4 	addi	r2,r2,-1
    6d6c:	301d883a 	mov	r14,r6
    6d70:	3884703a 	and	r2,r7,r2
    6d74:	400a953a 	slli	r5,r8,20
    6d78:	79bffc2c 	andhi	r6,r15,65520
    6d7c:	308cb03a 	or	r6,r6,r2
    6d80:	00e00434 	movhi	r3,32784
    6d84:	18ffffc4 	addi	r3,r3,-1
    6d88:	800497fa 	slli	r2,r16,31
    6d8c:	30c6703a 	and	r3,r6,r3
    6d90:	1946b03a 	or	r3,r3,r5
    6d94:	01600034 	movhi	r5,32768
    6d98:	297fffc4 	addi	r5,r5,-1
    6d9c:	194a703a 	and	r5,r3,r5
    6da0:	288ab03a 	or	r5,r5,r2
    6da4:	2807883a 	mov	r3,r5
    6da8:	7005883a 	mov	r2,r14
    6dac:	dc800217 	ldw	r18,8(sp)
    6db0:	dc400117 	ldw	r17,4(sp)
    6db4:	dc000017 	ldw	r16,0(sp)
    6db8:	dec00304 	addi	sp,sp,12
    6dbc:	f800283a 	ret
    6dc0:	21000217 	ldw	r4,8(r4)
    6dc4:	00bf0084 	movi	r2,-1022
    6dc8:	20803f16 	blt	r4,r2,6ec8 <__pack_d+0x1b4>
    6dcc:	0080ffc4 	movi	r2,1023
    6dd0:	11002c16 	blt	r2,r4,6e84 <__pack_d+0x170>
    6dd4:	00803fc4 	movi	r2,255
    6dd8:	408c703a 	and	r6,r8,r2
    6ddc:	00802004 	movi	r2,128
    6de0:	0007883a 	mov	r3,zero
    6de4:	000f883a 	mov	r7,zero
    6de8:	2280ffc4 	addi	r10,r4,1023
    6dec:	30801e26 	beq	r6,r2,6e68 <__pack_d+0x154>
    6df0:	00801fc4 	movi	r2,127
    6df4:	4089883a 	add	r4,r8,r2
    6df8:	220d803a 	cmpltu	r6,r4,r8
    6dfc:	324d883a 	add	r6,r6,r9
    6e00:	2011883a 	mov	r8,r4
    6e04:	3013883a 	mov	r9,r6
    6e08:	00880034 	movhi	r2,8192
    6e0c:	10bfffc4 	addi	r2,r2,-1
    6e10:	12400d36 	bltu	r2,r9,6e48 <__pack_d+0x134>
    6e14:	4804963a 	slli	r2,r9,24
    6e18:	400cd23a 	srli	r6,r8,8
    6e1c:	480ed23a 	srli	r7,r9,8
    6e20:	013fffc4 	movi	r4,-1
    6e24:	118cb03a 	or	r6,r2,r6
    6e28:	01400434 	movhi	r5,16
    6e2c:	297fffc4 	addi	r5,r5,-1
    6e30:	3104703a 	and	r2,r6,r4
    6e34:	3946703a 	and	r3,r7,r5
    6e38:	5201ffcc 	andi	r8,r10,2047
    6e3c:	100d883a 	mov	r6,r2
    6e40:	180f883a 	mov	r7,r3
    6e44:	003fc706 	br	6d64 <__pack_d+0x50>
    6e48:	480897fa 	slli	r4,r9,31
    6e4c:	4004d07a 	srli	r2,r8,1
    6e50:	4806d07a 	srli	r3,r9,1
    6e54:	52800044 	addi	r10,r10,1
    6e58:	2084b03a 	or	r2,r4,r2
    6e5c:	1011883a 	mov	r8,r2
    6e60:	1813883a 	mov	r9,r3
    6e64:	003feb06 	br	6e14 <__pack_d+0x100>
    6e68:	383fe11e 	bne	r7,zero,6df0 <__pack_d+0xdc>
    6e6c:	01004004 	movi	r4,256
    6e70:	4104703a 	and	r2,r8,r4
    6e74:	10c4b03a 	or	r2,r2,r3
    6e78:	103fe326 	beq	r2,zero,6e08 <__pack_d+0xf4>
    6e7c:	3005883a 	mov	r2,r6
    6e80:	003fdc06 	br	6df4 <__pack_d+0xe0>
    6e84:	000d883a 	mov	r6,zero
    6e88:	000f883a 	mov	r7,zero
    6e8c:	0201ffc4 	movi	r8,2047
    6e90:	003fb406 	br	6d64 <__pack_d+0x50>
    6e94:	0005883a 	mov	r2,zero
    6e98:	00c00234 	movhi	r3,8
    6e9c:	408cb03a 	or	r6,r8,r2
    6ea0:	48ceb03a 	or	r7,r9,r3
    6ea4:	013fffc4 	movi	r4,-1
    6ea8:	01400434 	movhi	r5,16
    6eac:	297fffc4 	addi	r5,r5,-1
    6eb0:	3104703a 	and	r2,r6,r4
    6eb4:	3946703a 	and	r3,r7,r5
    6eb8:	100d883a 	mov	r6,r2
    6ebc:	180f883a 	mov	r7,r3
    6ec0:	0201ffc4 	movi	r8,2047
    6ec4:	003fa706 	br	6d64 <__pack_d+0x50>
    6ec8:	1109c83a 	sub	r4,r2,r4
    6ecc:	00800e04 	movi	r2,56
    6ed0:	11004316 	blt	r2,r4,6fe0 <__pack_d+0x2cc>
    6ed4:	21fff804 	addi	r7,r4,-32
    6ed8:	38004516 	blt	r7,zero,6ff0 <__pack_d+0x2dc>
    6edc:	49d8d83a 	srl	r12,r9,r7
    6ee0:	001b883a 	mov	r13,zero
    6ee4:	0023883a 	mov	r17,zero
    6ee8:	01400044 	movi	r5,1
    6eec:	0025883a 	mov	r18,zero
    6ef0:	38004716 	blt	r7,zero,7010 <__pack_d+0x2fc>
    6ef4:	29d6983a 	sll	r11,r5,r7
    6ef8:	0015883a 	mov	r10,zero
    6efc:	00bfffc4 	movi	r2,-1
    6f00:	5089883a 	add	r4,r10,r2
    6f04:	588b883a 	add	r5,r11,r2
    6f08:	228d803a 	cmpltu	r6,r4,r10
    6f0c:	314b883a 	add	r5,r6,r5
    6f10:	4104703a 	and	r2,r8,r4
    6f14:	4946703a 	and	r3,r9,r5
    6f18:	10c4b03a 	or	r2,r2,r3
    6f1c:	10000226 	beq	r2,zero,6f28 <__pack_d+0x214>
    6f20:	04400044 	movi	r17,1
    6f24:	0025883a 	mov	r18,zero
    6f28:	00803fc4 	movi	r2,255
    6f2c:	644eb03a 	or	r7,r12,r17
    6f30:	3892703a 	and	r9,r7,r2
    6f34:	00802004 	movi	r2,128
    6f38:	6c90b03a 	or	r8,r13,r18
    6f3c:	0015883a 	mov	r10,zero
    6f40:	48801626 	beq	r9,r2,6f9c <__pack_d+0x288>
    6f44:	01001fc4 	movi	r4,127
    6f48:	3905883a 	add	r2,r7,r4
    6f4c:	11cd803a 	cmpltu	r6,r2,r7
    6f50:	320d883a 	add	r6,r6,r8
    6f54:	100f883a 	mov	r7,r2
    6f58:	00840034 	movhi	r2,4096
    6f5c:	10bfffc4 	addi	r2,r2,-1
    6f60:	3011883a 	mov	r8,r6
    6f64:	0007883a 	mov	r3,zero
    6f68:	11801b36 	bltu	r2,r6,6fd8 <__pack_d+0x2c4>
    6f6c:	4004963a 	slli	r2,r8,24
    6f70:	3808d23a 	srli	r4,r7,8
    6f74:	400ad23a 	srli	r5,r8,8
    6f78:	1813883a 	mov	r9,r3
    6f7c:	1108b03a 	or	r4,r2,r4
    6f80:	00bfffc4 	movi	r2,-1
    6f84:	00c00434 	movhi	r3,16
    6f88:	18ffffc4 	addi	r3,r3,-1
    6f8c:	208c703a 	and	r6,r4,r2
    6f90:	28ce703a 	and	r7,r5,r3
    6f94:	4a01ffcc 	andi	r8,r9,2047
    6f98:	003f7206 	br	6d64 <__pack_d+0x50>
    6f9c:	503fe91e 	bne	r10,zero,6f44 <__pack_d+0x230>
    6fa0:	01004004 	movi	r4,256
    6fa4:	3904703a 	and	r2,r7,r4
    6fa8:	0007883a 	mov	r3,zero
    6fac:	10c4b03a 	or	r2,r2,r3
    6fb0:	10000626 	beq	r2,zero,6fcc <__pack_d+0x2b8>
    6fb4:	3a45883a 	add	r2,r7,r9
    6fb8:	11cd803a 	cmpltu	r6,r2,r7
    6fbc:	320d883a 	add	r6,r6,r8
    6fc0:	100f883a 	mov	r7,r2
    6fc4:	3011883a 	mov	r8,r6
    6fc8:	0007883a 	mov	r3,zero
    6fcc:	00840034 	movhi	r2,4096
    6fd0:	10bfffc4 	addi	r2,r2,-1
    6fd4:	123fe52e 	bgeu	r2,r8,6f6c <__pack_d+0x258>
    6fd8:	00c00044 	movi	r3,1
    6fdc:	003fe306 	br	6f6c <__pack_d+0x258>
    6fe0:	0009883a 	mov	r4,zero
    6fe4:	0013883a 	mov	r9,zero
    6fe8:	000b883a 	mov	r5,zero
    6fec:	003fe406 	br	6f80 <__pack_d+0x26c>
    6ff0:	4a47883a 	add	r3,r9,r9
    6ff4:	008007c4 	movi	r2,31
    6ff8:	1105c83a 	sub	r2,r2,r4
    6ffc:	1886983a 	sll	r3,r3,r2
    7000:	4118d83a 	srl	r12,r8,r4
    7004:	491ad83a 	srl	r13,r9,r4
    7008:	1b18b03a 	or	r12,r3,r12
    700c:	003fb506 	br	6ee4 <__pack_d+0x1d0>
    7010:	2806d07a 	srli	r3,r5,1
    7014:	008007c4 	movi	r2,31
    7018:	1105c83a 	sub	r2,r2,r4
    701c:	1896d83a 	srl	r11,r3,r2
    7020:	2914983a 	sll	r10,r5,r4
    7024:	003fb506 	br	6efc <__pack_d+0x1e8>

00007028 <__fpcmp_parts_d>:
    7028:	21800017 	ldw	r6,0(r4)
    702c:	00c00044 	movi	r3,1
    7030:	19800a2e 	bgeu	r3,r6,705c <__fpcmp_parts_d+0x34>
    7034:	28800017 	ldw	r2,0(r5)
    7038:	1880082e 	bgeu	r3,r2,705c <__fpcmp_parts_d+0x34>
    703c:	00c00104 	movi	r3,4
    7040:	30c02626 	beq	r6,r3,70dc <__fpcmp_parts_d+0xb4>
    7044:	10c02226 	beq	r2,r3,70d0 <__fpcmp_parts_d+0xa8>
    7048:	00c00084 	movi	r3,2
    704c:	30c00526 	beq	r6,r3,7064 <__fpcmp_parts_d+0x3c>
    7050:	10c0071e 	bne	r2,r3,7070 <__fpcmp_parts_d+0x48>
    7054:	20800117 	ldw	r2,4(r4)
    7058:	1000091e 	bne	r2,zero,7080 <__fpcmp_parts_d+0x58>
    705c:	00800044 	movi	r2,1
    7060:	f800283a 	ret
    7064:	10c01a1e 	bne	r2,r3,70d0 <__fpcmp_parts_d+0xa8>
    7068:	0005883a 	mov	r2,zero
    706c:	f800283a 	ret
    7070:	22000117 	ldw	r8,4(r4)
    7074:	28800117 	ldw	r2,4(r5)
    7078:	40800326 	beq	r8,r2,7088 <__fpcmp_parts_d+0x60>
    707c:	403ff726 	beq	r8,zero,705c <__fpcmp_parts_d+0x34>
    7080:	00bfffc4 	movi	r2,-1
    7084:	f800283a 	ret
    7088:	20c00217 	ldw	r3,8(r4)
    708c:	28800217 	ldw	r2,8(r5)
    7090:	10fffa16 	blt	r2,r3,707c <__fpcmp_parts_d+0x54>
    7094:	18800916 	blt	r3,r2,70bc <__fpcmp_parts_d+0x94>
    7098:	21c00417 	ldw	r7,16(r4)
    709c:	28c00417 	ldw	r3,16(r5)
    70a0:	21800317 	ldw	r6,12(r4)
    70a4:	28800317 	ldw	r2,12(r5)
    70a8:	19fff436 	bltu	r3,r7,707c <__fpcmp_parts_d+0x54>
    70ac:	38c00526 	beq	r7,r3,70c4 <__fpcmp_parts_d+0x9c>
    70b0:	38c00236 	bltu	r7,r3,70bc <__fpcmp_parts_d+0x94>
    70b4:	19ffec1e 	bne	r3,r7,7068 <__fpcmp_parts_d+0x40>
    70b8:	30bfeb2e 	bgeu	r6,r2,7068 <__fpcmp_parts_d+0x40>
    70bc:	403fe71e 	bne	r8,zero,705c <__fpcmp_parts_d+0x34>
    70c0:	003fef06 	br	7080 <__fpcmp_parts_d+0x58>
    70c4:	11bffa2e 	bgeu	r2,r6,70b0 <__fpcmp_parts_d+0x88>
    70c8:	403fe426 	beq	r8,zero,705c <__fpcmp_parts_d+0x34>
    70cc:	003fec06 	br	7080 <__fpcmp_parts_d+0x58>
    70d0:	28800117 	ldw	r2,4(r5)
    70d4:	103fe11e 	bne	r2,zero,705c <__fpcmp_parts_d+0x34>
    70d8:	003fe906 	br	7080 <__fpcmp_parts_d+0x58>
    70dc:	11bfdd1e 	bne	r2,r6,7054 <__fpcmp_parts_d+0x2c>
    70e0:	28c00117 	ldw	r3,4(r5)
    70e4:	20800117 	ldw	r2,4(r4)
    70e8:	1885c83a 	sub	r2,r3,r2
    70ec:	f800283a 	ret

000070f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    70f0:	deffff04 	addi	sp,sp,-4
    70f4:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    70f8:	01000074 	movhi	r4,1
    70fc:	2128a504 	addi	r4,r4,-23916
    7100:	00c00074 	movhi	r3,1
    7104:	18e1e704 	addi	r3,r3,-30820

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    7108:	20c00926 	beq	r4,r3,7130 <alt_load+0x40>
    710c:	01800074 	movhi	r6,1
    7110:	31a8a504 	addi	r6,r6,-23916
  {
    while( to != end )
    7114:	19800626 	beq	r3,r6,7130 <alt_load+0x40>
    7118:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    711c:	20800017 	ldw	r2,0(r4)
    7120:	18800015 	stw	r2,0(r3)
    7124:	1947883a 	add	r3,r3,r5
    7128:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    712c:	30fffb1e 	bne	r6,r3,711c <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    7130:	01000034 	movhi	r4,0
    7134:	21000804 	addi	r4,r4,32
    7138:	00c00034 	movhi	r3,0
    713c:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    7140:	20c00926 	beq	r4,r3,7168 <alt_load+0x78>
    7144:	01800034 	movhi	r6,0
    7148:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    714c:	19800626 	beq	r3,r6,7168 <alt_load+0x78>
    7150:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    7154:	20800017 	ldw	r2,0(r4)
    7158:	18800015 	stw	r2,0(r3)
    715c:	1947883a 	add	r3,r3,r5
    7160:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    7164:	30fffb1e 	bne	r6,r3,7154 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    7168:	01000074 	movhi	r4,1
    716c:	21211a04 	addi	r4,r4,-31640
    7170:	00c00074 	movhi	r3,1
    7174:	18e11a04 	addi	r3,r3,-31640

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    7178:	20c00926 	beq	r4,r3,71a0 <alt_load+0xb0>
    717c:	01800074 	movhi	r6,1
    7180:	31a1e704 	addi	r6,r6,-30820
  {
    while( to != end )
    7184:	19800626 	beq	r3,r6,71a0 <alt_load+0xb0>
    7188:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    718c:	20800017 	ldw	r2,0(r4)
    7190:	18800015 	stw	r2,0(r3)
    7194:	1947883a 	add	r3,r3,r5
    7198:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    719c:	30fffb1e 	bne	r6,r3,718c <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    71a0:	0007aa00 	call	7aa0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    71a4:	0007b1c0 	call	7b1c <alt_icache_flush_all>
}
    71a8:	dfc00017 	ldw	ra,0(sp)
    71ac:	dec00104 	addi	sp,sp,4
    71b0:	f800283a 	ret

000071b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    71b4:	defffe04 	addi	sp,sp,-8
    71b8:	dfc00115 	stw	ra,4(sp)
    71bc:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    71c0:	0009883a 	mov	r4,zero
    71c4:	000725c0 	call	725c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    71c8:	000727c0 	call	727c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    71cc:	01800074 	movhi	r6,1
    71d0:	31a1d304 	addi	r6,r6,-30900
    71d4:	3009883a 	mov	r4,r6
    71d8:	300b883a 	mov	r5,r6
    71dc:	0007cb80 	call	7cb8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    71e0:	d126d117 	ldw	r4,-25788(gp)
    71e4:	d166d217 	ldw	r5,-25784(gp)
    71e8:	d1a6d317 	ldw	r6,-25780(gp)
    71ec:	00001c80 	call	1c8 <main>
    71f0:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    71f4:	01000044 	movi	r4,1
    71f8:	00079c00 	call	79c0 <close>
  exit (result);
    71fc:	8009883a 	mov	r4,r16
    7200:	00081f00 	call	81f0 <exit>

00007204 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    7204:	f800283a 	ret

00007208 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    7208:	f800283a 	ret

0000720c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    720c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7210:	00bfff84 	movi	r2,-2
    7214:	2884703a 	and	r2,r5,r2
    7218:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    721c:	d0a00517 	ldw	r2,-32748(gp)
    7220:	108000c4 	addi	r2,r2,3
    7224:	00ffff04 	movi	r3,-4
    7228:	10c6703a 	and	r3,r2,r3
    722c:	d0e00515 	stw	r3,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    7230:	1909883a 	add	r4,r3,r4
    7234:	00820034 	movhi	r2,2048
    7238:	10800004 	addi	r2,r2,0
    723c:	1100032e 	bgeu	r2,r4,724c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7240:	2801703a 	wrctl	status,r5
    7244:	00ffffc4 	movi	r3,-1
    7248:	00000206 	br	7254 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    724c:	d1200515 	stw	r4,-32748(gp)
    7250:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    7254:	1805883a 	mov	r2,r3
    7258:	f800283a 	ret

0000725c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    725c:	deffff04 	addi	sp,sp,-4
    7260:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    7264:	000801c0 	call	801c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    7268:	00800044 	movi	r2,1
    726c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    7270:	dfc00017 	ldw	ra,0(sp)
    7274:	dec00104 	addi	sp,sp,4
    7278:	f800283a 	ret

0000727c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    727c:	defffd04 	addi	sp,sp,-12
    7280:	dfc00215 	stw	ra,8(sp)
    7284:	dc400115 	stw	r17,4(sp)
    7288:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    728c:	04400074 	movhi	r17,1
    7290:	8c63fd04 	addi	r17,r17,-28684
    7294:	8809883a 	mov	r4,r17
    7298:	000b883a 	mov	r5,zero
    729c:	01800204 	movi	r6,8
    72a0:	00074200 	call	7420 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    72a4:	04000074 	movhi	r16,1
    72a8:	84289e04 	addi	r16,r16,-23944
    72ac:	893ff604 	addi	r4,r17,-40
    72b0:	800b883a 	mov	r5,r16
    72b4:	0007aac0 	call	7aac <alt_dev_llist_insert>
    72b8:	01000074 	movhi	r4,1
    72bc:	21280b04 	addi	r4,r4,-24532
    72c0:	800b883a 	mov	r5,r16
    72c4:	0007aac0 	call	7aac <alt_dev_llist_insert>
    72c8:	01000074 	movhi	r4,1
    72cc:	21281604 	addi	r4,r4,-24488
    72d0:	800b883a 	mov	r5,r16
    72d4:	0007aac0 	call	7aac <alt_dev_llist_insert>
    72d8:	01000074 	movhi	r4,1
    72dc:	21282104 	addi	r4,r4,-24444
    72e0:	800b883a 	mov	r5,r16
    72e4:	0007aac0 	call	7aac <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( DDA_OPTIONS, DDA_Options);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
}
    72e8:	dfc00217 	ldw	ra,8(sp)
    72ec:	dc400117 	ldw	r17,4(sp)
    72f0:	dc000017 	ldw	r16,0(sp)
    72f4:	dec00304 	addi	sp,sp,12
    72f8:	f800283a 	ret

000072fc <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    72fc:	deffff04 	addi	sp,sp,-4
    7300:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    7304:	21000017 	ldw	r4,0(r4)
    7308:	21000a04 	addi	r4,r4,40
    730c:	00075d40 	call	75d4 <altera_avalon_jtag_uart_ioctl>
}
    7310:	dfc00017 	ldw	ra,0(sp)
    7314:	dec00104 	addi	sp,sp,4
    7318:	f800283a 	ret

0000731c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    731c:	deffff04 	addi	sp,sp,-4
    7320:	dfc00015 	stw	ra,0(sp)
    7324:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    7328:	21000017 	ldw	r4,0(r4)
    732c:	21000a04 	addi	r4,r4,40
    7330:	11400217 	ldw	r5,8(r2)
    7334:	00073940 	call	7394 <altera_avalon_jtag_uart_close>
}
    7338:	dfc00017 	ldw	ra,0(sp)
    733c:	dec00104 	addi	sp,sp,4
    7340:	f800283a 	ret

00007344 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    7344:	deffff04 	addi	sp,sp,-4
    7348:	dfc00015 	stw	ra,0(sp)
    734c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    7350:	21000017 	ldw	r4,0(r4)
    7354:	21000a04 	addi	r4,r4,40
    7358:	11c00217 	ldw	r7,8(r2)
    735c:	00077b00 	call	77b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    7360:	dfc00017 	ldw	ra,0(sp)
    7364:	dec00104 	addi	sp,sp,4
    7368:	f800283a 	ret

0000736c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    736c:	deffff04 	addi	sp,sp,-4
    7370:	dfc00015 	stw	ra,0(sp)
    7374:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    7378:	21000017 	ldw	r4,0(r4)
    737c:	21000a04 	addi	r4,r4,40
    7380:	11c00217 	ldw	r7,8(r2)
    7384:	00076480 	call	7648 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    7388:	dfc00017 	ldw	ra,0(sp)
    738c:	dec00104 	addi	sp,sp,4
    7390:	f800283a 	ret

00007394 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    7394:	21800c17 	ldw	r6,48(r4)
    7398:	2950000c 	andi	r5,r5,16384
    739c:	280b003a 	cmpeq	r5,r5,zero
    73a0:	00000306 	br	73b0 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    73a4:	2800021e 	bne	r5,zero,73b0 <altera_avalon_jtag_uart_close+0x1c>
    73a8:	00bffd44 	movi	r2,-11
    73ac:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    73b0:	20800d17 	ldw	r2,52(r4)
    73b4:	11800326 	beq	r2,r6,73c4 <altera_avalon_jtag_uart_close+0x30>
    73b8:	20c00917 	ldw	r3,36(r4)
    73bc:	20800117 	ldw	r2,4(r4)
    73c0:	18bff836 	bltu	r3,r2,73a4 <altera_avalon_jtag_uart_close+0x10>
    73c4:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    73c8:	f800283a 	ret

000073cc <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    73cc:	20800017 	ldw	r2,0(r4)
    73d0:	10c00104 	addi	r3,r2,4
    73d4:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    73d8:	01410004 	movi	r5,1024
    73dc:	1144703a 	and	r2,r2,r5
    73e0:	10000526 	beq	r2,zero,73f8 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    73e4:	20800817 	ldw	r2,32(r4)
    73e8:	1144b03a 	or	r2,r2,r5
    73ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    73f0:	20000915 	stw	zero,36(r4)
    73f4:	00000606 	br	7410 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    73f8:	20c00917 	ldw	r3,36(r4)
    73fc:	00a00034 	movhi	r2,32768
    7400:	10bfff04 	addi	r2,r2,-4
    7404:	10c00236 	bltu	r2,r3,7410 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    7408:	18800044 	addi	r2,r3,1
    740c:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    7410:	00800074 	movhi	r2,1
    7414:	10af6b04 	addi	r2,r2,-16980
    7418:	10800017 	ldw	r2,0(r2)
    741c:	f800283a 	ret

00007420 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    7420:	defffd04 	addi	sp,sp,-12
    7424:	dfc00215 	stw	ra,8(sp)
    7428:	dc000115 	stw	r16,4(sp)
    742c:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    7430:	00c00044 	movi	r3,1
    7434:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    7438:	20800017 	ldw	r2,0(r4)
    743c:	10c00135 	stwio	r3,4(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    7440:	d8000015 	stw	zero,0(sp)
    7444:	2809883a 	mov	r4,r5
    7448:	300b883a 	mov	r5,r6
    744c:	01800034 	movhi	r6,0
    7450:	319d2804 	addi	r6,r6,29856
    7454:	800f883a 	mov	r7,r16
    7458:	0007bb80 	call	7bb8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    745c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    7460:	81000204 	addi	r4,r16,8
    7464:	00800074 	movhi	r2,1
    7468:	10af6b04 	addi	r2,r2,-16980
    746c:	11400017 	ldw	r5,0(r2)
    7470:	01800034 	movhi	r6,0
    7474:	319cf304 	addi	r6,r6,29644
    7478:	800f883a 	mov	r7,r16
    747c:	000792c0 	call	792c <alt_alarm_start>
    7480:	1000030e 	bge	r2,zero,7490 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    7484:	00a00034 	movhi	r2,32768
    7488:	10bfffc4 	addi	r2,r2,-1
    748c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    7490:	dfc00217 	ldw	ra,8(sp)
    7494:	dc000117 	ldw	r16,4(sp)
    7498:	dec00304 	addi	sp,sp,12
    749c:	f800283a 	ret

000074a0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    74a0:	22000017 	ldw	r8,0(r4)
    74a4:	03800104 	movi	r14,4
    74a8:	4399883a 	add	r12,r8,r14
    74ac:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    74b0:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    74b4:	5880c00c 	andi	r2,r11,768
    74b8:	10004526 	beq	r2,zero,75d0 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    74bc:	5880400c 	andi	r2,r11,256
    74c0:	10002126 	beq	r2,zero,7548 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    74c4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    74c8:	10800044 	addi	r2,r2,1
    74cc:	1081ffcc 	andi	r2,r2,2047
    74d0:	20c00b17 	ldw	r3,44(r4)
    74d4:	10c01626 	beq	r2,r3,7530 <altera_avalon_jtag_uart_irq+0x90>
    74d8:	02a00014 	movui	r10,32768
    74dc:	02400e04 	movi	r9,56
    74e0:	01c00044 	movi	r7,1
    74e4:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    74e8:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    74ec:	2a84703a 	and	r2,r5,r10
    74f0:	10000d26 	beq	r2,zero,7528 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    74f4:	20800a17 	ldw	r2,40(r4)
    74f8:	1105883a 	add	r2,r2,r4
    74fc:	1245883a 	add	r2,r2,r9
    7500:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    7504:	20800a17 	ldw	r2,40(r4)
    7508:	11c5883a 	add	r2,r2,r7
    750c:	1184703a 	and	r2,r2,r6
    7510:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    7514:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    7518:	11c5883a 	add	r2,r2,r7
    751c:	1184703a 	and	r2,r2,r6
    7520:	20c00b17 	ldw	r3,44(r4)
    7524:	10fff01e 	bne	r2,r3,74e8 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    7528:	2b44703a 	and	r2,r5,r13
    752c:	10000626 	beq	r2,zero,7548 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    7530:	20800817 	ldw	r2,32(r4)
    7534:	00ffff84 	movi	r3,-2
    7538:	10c4703a 	and	r2,r2,r3
    753c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    7540:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    7544:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    7548:	5880800c 	andi	r2,r11,512
    754c:	103fd826 	beq	r2,zero,74b0 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    7550:	5b44703a 	and	r2,r11,r13
    7554:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    7558:	283fd526 	beq	r5,zero,74b0 <altera_avalon_jtag_uart_irq+0x10>
    755c:	20c00d17 	ldw	r3,52(r4)
    7560:	20800c17 	ldw	r2,48(r4)
    7564:	18801126 	beq	r3,r2,75ac <altera_avalon_jtag_uart_irq+0x10c>
    7568:	02420e04 	movi	r9,2104
    756c:	01800044 	movi	r6,1
    7570:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    7574:	20800d17 	ldw	r2,52(r4)
    7578:	1105883a 	add	r2,r2,r4
    757c:	1245883a 	add	r2,r2,r9
    7580:	10800007 	ldb	r2,0(r2)
    7584:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    7588:	20800d17 	ldw	r2,52(r4)
    758c:	1185883a 	add	r2,r2,r6
    7590:	11c4703a 	and	r2,r2,r7
    7594:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    7598:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    759c:	283fc426 	beq	r5,zero,74b0 <altera_avalon_jtag_uart_irq+0x10>
    75a0:	20c00d17 	ldw	r3,52(r4)
    75a4:	20800c17 	ldw	r2,48(r4)
    75a8:	18bff21e 	bne	r3,r2,7574 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    75ac:	20c00817 	ldw	r3,32(r4)
    75b0:	00bfff44 	movi	r2,-3
    75b4:	1886703a 	and	r3,r3,r2
    75b8:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    75bc:	20800017 	ldw	r2,0(r4)
    75c0:	1385883a 	add	r2,r2,r14
    75c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    75c8:	60800037 	ldwio	r2,0(r12)
    75cc:	003fb806 	br	74b0 <altera_avalon_jtag_uart_irq+0x10>
    75d0:	f800283a 	ret

000075d4 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    75d4:	009a8044 	movi	r2,27137
    75d8:	28800326 	beq	r5,r2,75e8 <altera_avalon_jtag_uart_ioctl+0x14>
    75dc:	009a8084 	movi	r2,27138
    75e0:	2880171e 	bne	r5,r2,7640 <altera_avalon_jtag_uart_ioctl+0x6c>
    75e4:	00000d06 	br	761c <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    75e8:	20c00117 	ldw	r3,4(r4)
    75ec:	00a00034 	movhi	r2,32768
    75f0:	10bfffc4 	addi	r2,r2,-1
    75f4:	18801226 	beq	r3,r2,7640 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    75f8:	31800017 	ldw	r6,0(r6)
    75fc:	30ffff84 	addi	r3,r6,-2
    7600:	10bfff44 	addi	r2,r2,-3
    7604:	10c0022e 	bgeu	r2,r3,7610 <altera_avalon_jtag_uart_ioctl+0x3c>
    7608:	01a00034 	movhi	r6,32768
    760c:	31bfff84 	addi	r6,r6,-2
    7610:	21800115 	stw	r6,4(r4)
    7614:	0005883a 	mov	r2,zero
    7618:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    761c:	20c00117 	ldw	r3,4(r4)
    7620:	00a00034 	movhi	r2,32768
    7624:	10bfffc4 	addi	r2,r2,-1
    7628:	18800526 	beq	r3,r2,7640 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    762c:	20800917 	ldw	r2,36(r4)
    7630:	10c5803a 	cmpltu	r2,r2,r3
    7634:	30800015 	stw	r2,0(r6)
    7638:	0005883a 	mov	r2,zero
    763c:	f800283a 	ret
    7640:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    7644:	f800283a 	ret

00007648 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    7648:	defff604 	addi	sp,sp,-40
    764c:	dfc00915 	stw	ra,36(sp)
    7650:	df000815 	stw	fp,32(sp)
    7654:	ddc00715 	stw	r23,28(sp)
    7658:	dd800615 	stw	r22,24(sp)
    765c:	dd400515 	stw	r21,20(sp)
    7660:	dd000415 	stw	r20,16(sp)
    7664:	dcc00315 	stw	r19,12(sp)
    7668:	dc800215 	stw	r18,8(sp)
    766c:	dc400115 	stw	r17,4(sp)
    7670:	dc000015 	stw	r16,0(sp)
    7674:	2025883a 	mov	r18,r4
    7678:	282f883a 	mov	r23,r5
    767c:	3027883a 	mov	r19,r6
    7680:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    7684:	0180220e 	bge	zero,r6,7710 <altera_avalon_jtag_uart_read+0xc8>
    7688:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    768c:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    7690:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    7694:	b4400236 	bltu	r22,r17,76a0 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    7698:	b461c83a 	sub	r16,r22,r17
    769c:	00000206 	br	76a8 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    76a0:	00820004 	movi	r2,2048
    76a4:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    76a8:	80000d26 	beq	r16,zero,76e0 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    76ac:	9829883a 	mov	r20,r19
    76b0:	9c001d36 	bltu	r19,r16,7728 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    76b4:	91400e04 	addi	r5,r18,56
    76b8:	a809883a 	mov	r4,r21
    76bc:	2c4b883a 	add	r5,r5,r17
    76c0:	800d883a 	mov	r6,r16
    76c4:	00042a00 	call	42a0 <memcpy>
      ptr   += n;
    76c8:	ac2b883a 	add	r21,r21,r16
      space -= n;
    76cc:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    76d0:	8445883a 	add	r2,r16,r17
    76d4:	1081ffcc 	andi	r2,r2,2047
    76d8:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    76dc:	04ffeb16 	blt	zero,r19,768c <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    76e0:	adc01c1e 	bne	r21,r23,7754 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    76e4:	e090000c 	andi	r2,fp,16384
    76e8:	10000d1e 	bne	r2,zero,7720 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    76ec:	90800a17 	ldw	r2,40(r18)
    76f0:	b080031e 	bne	r22,r2,7700 <altera_avalon_jtag_uart_read+0xb8>
    76f4:	90c00917 	ldw	r3,36(r18)
    76f8:	90800117 	ldw	r2,4(r18)
    76fc:	18bffb36 	bltu	r3,r2,76ec <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    7700:	90800a17 	ldw	r2,40(r18)
    7704:	b0800426 	beq	r22,r2,7718 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    7708:	04c0030e 	bge	zero,r19,7718 <altera_avalon_jtag_uart_read+0xd0>
    770c:	003fde06 	br	7688 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    7710:	3890000c 	andi	r2,r7,16384
    7714:	1000021e 	bne	r2,zero,7720 <altera_avalon_jtag_uart_read+0xd8>
    7718:	00bffec4 	movi	r2,-5
    771c:	00001806 	br	7780 <altera_avalon_jtag_uart_read+0x138>
    7720:	00bffd44 	movi	r2,-11
    7724:	00001606 	br	7780 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    7728:	91400e04 	addi	r5,r18,56
    772c:	a809883a 	mov	r4,r21
    7730:	894b883a 	add	r5,r17,r5
    7734:	980d883a 	mov	r6,r19
    7738:	00042a00 	call	42a0 <memcpy>
      ptr   += n;
    773c:	aceb883a 	add	r21,r21,r19
      space -= n;
    7740:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    7744:	a445883a 	add	r2,r20,r17
    7748:	1081ffcc 	andi	r2,r2,2047
    774c:	90800b15 	stw	r2,44(r18)
    7750:	003fe306 	br	76e0 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7754:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7758:	00bfff84 	movi	r2,-2
    775c:	2084703a 	and	r2,r4,r2
    7760:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    7764:	90800817 	ldw	r2,32(r18)
    7768:	10800054 	ori	r2,r2,1
    776c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    7770:	90c00017 	ldw	r3,0(r18)
    7774:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7778:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    777c:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    7780:	dfc00917 	ldw	ra,36(sp)
    7784:	df000817 	ldw	fp,32(sp)
    7788:	ddc00717 	ldw	r23,28(sp)
    778c:	dd800617 	ldw	r22,24(sp)
    7790:	dd400517 	ldw	r21,20(sp)
    7794:	dd000417 	ldw	r20,16(sp)
    7798:	dcc00317 	ldw	r19,12(sp)
    779c:	dc800217 	ldw	r18,8(sp)
    77a0:	dc400117 	ldw	r17,4(sp)
    77a4:	dc000017 	ldw	r16,0(sp)
    77a8:	dec00a04 	addi	sp,sp,40
    77ac:	f800283a 	ret

000077b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    77b0:	defff804 	addi	sp,sp,-32
    77b4:	dfc00715 	stw	ra,28(sp)
    77b8:	dd800615 	stw	r22,24(sp)
    77bc:	dd400515 	stw	r21,20(sp)
    77c0:	dd000415 	stw	r20,16(sp)
    77c4:	dcc00315 	stw	r19,12(sp)
    77c8:	dc800215 	stw	r18,8(sp)
    77cc:	dc400115 	stw	r17,4(sp)
    77d0:	dc000015 	stw	r16,0(sp)
    77d4:	2021883a 	mov	r16,r4
    77d8:	282d883a 	mov	r22,r5
    77dc:	3011883a 	mov	r8,r6
    77e0:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    77e4:	01800616 	blt	zero,r6,7800 <altera_avalon_jtag_uart_write+0x50>
    77e8:	2829883a 	mov	r20,r5
    77ec:	00002106 	br	7874 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    77f0:	a585c83a 	sub	r2,r20,r22
    77f4:	00004306 	br	7904 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    77f8:	00bffd44 	movi	r2,-11
    77fc:	00004106 	br	7904 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    7800:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    7804:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    7808:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    780c:	9140032e 	bgeu	r18,r5,781c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    7810:	2c85c83a 	sub	r2,r5,r18
    7814:	11bfffc4 	addi	r6,r2,-1
    7818:	00000606 	br	7834 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    781c:	28000326 	beq	r5,zero,782c <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    7820:	00820004 	movi	r2,2048
    7824:	148dc83a 	sub	r6,r2,r18
    7828:	00000206 	br	7834 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    782c:	0081ffc4 	movi	r2,2047
    7830:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    7834:	30002626 	beq	r6,zero,78d0 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    7838:	4027883a 	mov	r19,r8
    783c:	3023883a 	mov	r17,r6
    7840:	4180012e 	bgeu	r8,r6,7848 <altera_avalon_jtag_uart_write+0x98>
    7844:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    7848:	81020e04 	addi	r4,r16,2104
    784c:	2489883a 	add	r4,r4,r18
    7850:	a00b883a 	mov	r5,r20
    7854:	880d883a 	mov	r6,r17
    7858:	00042a00 	call	42a0 <memcpy>
      ptr   += n;
    785c:	a469883a 	add	r20,r20,r17
      count -= n;
    7860:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    7864:	9445883a 	add	r2,r18,r17
    7868:	1081ffcc 	andi	r2,r2,2047
    786c:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    7870:	023fe416 	blt	zero,r8,7804 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7874:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7878:	00bfff84 	movi	r2,-2
    787c:	2084703a 	and	r2,r4,r2
    7880:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    7884:	80800817 	ldw	r2,32(r16)
    7888:	10800094 	ori	r2,r2,2
    788c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    7890:	80c00017 	ldw	r3,0(r16)
    7894:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7898:	2001703a 	wrctl	status,r4
    789c:	00000706 	br	78bc <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    78a0:	80800d17 	ldw	r2,52(r16)
    78a4:	1140031e 	bne	r2,r5,78b4 <altera_avalon_jtag_uart_write+0x104>
    78a8:	80c00917 	ldw	r3,36(r16)
    78ac:	80800117 	ldw	r2,4(r16)
    78b0:	18bffb36 	bltu	r3,r2,78a0 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    78b4:	80800d17 	ldw	r2,52(r16)
    78b8:	117fed1e 	bne	r2,r5,7870 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    78bc:	b53fcc1e 	bne	r22,r20,77f0 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    78c0:	a890000c 	andi	r2,r21,16384
    78c4:	103fcc1e 	bne	r2,zero,77f8 <altera_avalon_jtag_uart_write+0x48>
    78c8:	00bffec4 	movi	r2,-5
    78cc:	00000d06 	br	7904 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    78d0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    78d4:	00bfff84 	movi	r2,-2
    78d8:	2084703a 	and	r2,r4,r2
    78dc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    78e0:	80800817 	ldw	r2,32(r16)
    78e4:	10800094 	ori	r2,r2,2
    78e8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    78ec:	80c00017 	ldw	r3,0(r16)
    78f0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    78f4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    78f8:	a890000c 	andi	r2,r21,16384
    78fc:	103fe826 	beq	r2,zero,78a0 <altera_avalon_jtag_uart_write+0xf0>
    7900:	003fee06 	br	78bc <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    7904:	dfc00717 	ldw	ra,28(sp)
    7908:	dd800617 	ldw	r22,24(sp)
    790c:	dd400517 	ldw	r21,20(sp)
    7910:	dd000417 	ldw	r20,16(sp)
    7914:	dcc00317 	ldw	r19,12(sp)
    7918:	dc800217 	ldw	r18,8(sp)
    791c:	dc400117 	ldw	r17,4(sp)
    7920:	dc000017 	ldw	r16,0(sp)
    7924:	dec00804 	addi	sp,sp,32
    7928:	f800283a 	ret

0000792c <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    792c:	00800074 	movhi	r2,1
    7930:	10af6b04 	addi	r2,r2,-16980
    7934:	10800017 	ldw	r2,0(r2)
    7938:	1000021e 	bne	r2,zero,7944 <alt_alarm_start+0x18>
    793c:	00bfde84 	movi	r2,-134
    7940:	f800283a 	ret
  {
    if (alarm)
    7944:	2000021e 	bne	r4,zero,7950 <alt_alarm_start+0x24>
    7948:	00bffa84 	movi	r2,-22
    794c:	f800283a 	ret
    {
      alarm->callback = callback;
    7950:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    7954:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7958:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    795c:	00bfff84 	movi	r2,-2
    7960:	3884703a 	and	r2,r7,r2
    7964:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    7968:	00800074 	movhi	r2,1
    796c:	10af6c04 	addi	r2,r2,-16976
    7970:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    7974:	01800044 	movi	r6,1
    7978:	1985883a 	add	r2,r3,r6
    797c:	2885883a 	add	r2,r5,r2
    7980:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    7984:	10c0022e 	bgeu	r2,r3,7990 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
    7988:	21800405 	stb	r6,16(r4)
    798c:	00000106 	br	7994 <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
    7990:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    7994:	00800074 	movhi	r2,1
    7998:	10a8a304 	addi	r2,r2,-23924
    799c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    79a0:	10c00017 	ldw	r3,0(r2)
    79a4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    79a8:	10c00017 	ldw	r3,0(r2)
    79ac:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    79b0:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    79b4:	3801703a 	wrctl	status,r7
    79b8:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
    79bc:	f800283a 	ret

000079c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    79c0:	defffd04 	addi	sp,sp,-12
    79c4:	dfc00215 	stw	ra,8(sp)
    79c8:	dc400115 	stw	r17,4(sp)
    79cc:	dc000015 	stw	r16,0(sp)
    79d0:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    79d4:	20001d16 	blt	r4,zero,7a4c <close+0x8c>
    79d8:	01400304 	movi	r5,12
    79dc:	0006a900 	call	6a90 <__mulsi3>
    79e0:	00c00074 	movhi	r3,1
    79e4:	18e83604 	addi	r3,r3,-24360
    79e8:	10c9883a 	add	r4,r2,r3

  if (fd)
    79ec:	20001726 	beq	r4,zero,7a4c <close+0x8c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    79f0:	20800017 	ldw	r2,0(r4)
    79f4:	10800417 	ldw	r2,16(r2)
    79f8:	10002126 	beq	r2,zero,7a80 <close+0xc0>
    79fc:	103ee83a 	callr	r2
    7a00:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    7a04:	8009883a 	mov	r4,r16
    7a08:	0007ed40 	call	7ed4 <alt_release_fd>
    if (rval < 0)
    7a0c:	88000216 	blt	r17,zero,7a18 <close+0x58>
    7a10:	0005883a 	mov	r2,zero
    7a14:	00001d06 	br	7a8c <close+0xcc>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    7a18:	00800074 	movhi	r2,1
    7a1c:	10a8a104 	addi	r2,r2,-23932
    7a20:	10800017 	ldw	r2,0(r2)
    7a24:	1000031e 	bne	r2,zero,7a34 <close+0x74>
    7a28:	00c00074 	movhi	r3,1
    7a2c:	18ef6604 	addi	r3,r3,-17000
    7a30:	00000206 	br	7a3c <close+0x7c>
    7a34:	103ee83a 	callr	r2
    7a38:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    7a3c:	0445c83a 	sub	r2,zero,r17
    7a40:	18800015 	stw	r2,0(r3)
    7a44:	00bfffc4 	movi	r2,-1
    7a48:	00001006 	br	7a8c <close+0xcc>
    7a4c:	00800074 	movhi	r2,1
    7a50:	10a8a104 	addi	r2,r2,-23932
    7a54:	10800017 	ldw	r2,0(r2)
    7a58:	1000031e 	bne	r2,zero,7a68 <close+0xa8>
    7a5c:	00c00074 	movhi	r3,1
    7a60:	18ef6604 	addi	r3,r3,-17000
    7a64:	00000206 	br	7a70 <close+0xb0>
    7a68:	103ee83a 	callr	r2
    7a6c:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    7a70:	00801444 	movi	r2,81
    7a74:	18800015 	stw	r2,0(r3)
    7a78:	00bfffc4 	movi	r2,-1
    7a7c:	00000306 	br	7a8c <close+0xcc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    7a80:	8009883a 	mov	r4,r16
    7a84:	0007ed40 	call	7ed4 <alt_release_fd>
    7a88:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    7a8c:	dfc00217 	ldw	ra,8(sp)
    7a90:	dc400117 	ldw	r17,4(sp)
    7a94:	dc000017 	ldw	r16,0(sp)
    7a98:	dec00304 	addi	sp,sp,12
    7a9c:	f800283a 	ret

00007aa0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    7aa0:	f800283a 	ret

00007aa4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    7aa4:	3005883a 	mov	r2,r6
    7aa8:	f800283a 	ret

00007aac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    7aac:	deffff04 	addi	sp,sp,-4
    7ab0:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    7ab4:	20000226 	beq	r4,zero,7ac0 <alt_dev_llist_insert+0x14>
    7ab8:	20800217 	ldw	r2,8(r4)
    7abc:	10000d1e 	bne	r2,zero,7af4 <alt_dev_llist_insert+0x48>
    7ac0:	00800074 	movhi	r2,1
    7ac4:	10a8a104 	addi	r2,r2,-23932
    7ac8:	10800017 	ldw	r2,0(r2)
    7acc:	1000031e 	bne	r2,zero,7adc <alt_dev_llist_insert+0x30>
    7ad0:	00c00074 	movhi	r3,1
    7ad4:	18ef6604 	addi	r3,r3,-17000
    7ad8:	00000206 	br	7ae4 <alt_dev_llist_insert+0x38>
    7adc:	103ee83a 	callr	r2
    7ae0:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    7ae4:	00800584 	movi	r2,22
    7ae8:	18800015 	stw	r2,0(r3)
    7aec:	00bffa84 	movi	r2,-22
    7af0:	00000706 	br	7b10 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    7af4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    7af8:	28800017 	ldw	r2,0(r5)
    7afc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    7b00:	28800017 	ldw	r2,0(r5)
    7b04:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    7b08:	29000015 	stw	r4,0(r5)
    7b0c:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    7b10:	dfc00017 	ldw	ra,0(sp)
    7b14:	dec00104 	addi	sp,sp,4
    7b18:	f800283a 	ret

00007b1c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    7b1c:	f800283a 	ret

00007b20 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    7b20:	000530fa 	rdctl	r2,ienable
    7b24:	00c00044 	movi	r3,1
    7b28:	1946983a 	sll	r3,r3,r5
    7b2c:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
    7b30:	1004c03a 	cmpne	r2,r2,zero
    7b34:	f800283a 	ret

00007b38 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b38:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b3c:	00bfff84 	movi	r2,-2
    7b40:	3084703a 	and	r2,r6,r2
    7b44:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    7b48:	00c00074 	movhi	r3,1
    7b4c:	18ef6a04 	addi	r3,r3,-16984
    7b50:	19000017 	ldw	r4,0(r3)
    7b54:	00800044 	movi	r2,1
    7b58:	1144983a 	sll	r2,r2,r5
    7b5c:	1104b03a 	or	r2,r2,r4
    7b60:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    7b64:	18800017 	ldw	r2,0(r3)
    7b68:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7b6c:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    7b70:	0005883a 	mov	r2,zero
    7b74:	f800283a 	ret

00007b78 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b78:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b7c:	00bfff84 	movi	r2,-2
    7b80:	3084703a 	and	r2,r6,r2
    7b84:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    7b88:	00c00074 	movhi	r3,1
    7b8c:	18ef6a04 	addi	r3,r3,-16984
    7b90:	19000017 	ldw	r4,0(r3)
    7b94:	00bfff84 	movi	r2,-2
    7b98:	1144183a 	rol	r2,r2,r5
    7b9c:	1104703a 	and	r2,r2,r4
    7ba0:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    7ba4:	18800017 	ldw	r2,0(r3)
    7ba8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7bac:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    7bb0:	0005883a 	mov	r2,zero
    7bb4:	f800283a 	ret

00007bb8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    7bb8:	defffe04 	addi	sp,sp,-8
    7bbc:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    7bc0:	d8800217 	ldw	r2,8(sp)
    7bc4:	d8800015 	stw	r2,0(sp)
    7bc8:	0007bd80 	call	7bd8 <alt_iic_isr_register>
}  
    7bcc:	dfc00117 	ldw	ra,4(sp)
    7bd0:	dec00204 	addi	sp,sp,8
    7bd4:	f800283a 	ret

00007bd8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    7bd8:	defffe04 	addi	sp,sp,-8
    7bdc:	dfc00115 	stw	ra,4(sp)
    7be0:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    7be4:	008007c4 	movi	r2,31
    7be8:	1140020e 	bge	r2,r5,7bf4 <alt_iic_isr_register+0x1c>
    7bec:	00bffa84 	movi	r2,-22
    7bf0:	00000f06 	br	7c30 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7bf4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7bf8:	00bfff84 	movi	r2,-2
    7bfc:	8084703a 	and	r2,r16,r2
    7c00:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    7c04:	280490fa 	slli	r2,r5,3
    7c08:	00c00074 	movhi	r3,1
    7c0c:	18efb704 	addi	r3,r3,-16676
    7c10:	10c5883a 	add	r2,r2,r3
    7c14:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    7c18:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    7c1c:	30000226 	beq	r6,zero,7c28 <alt_iic_isr_register+0x50>
    7c20:	0007b380 	call	7b38 <alt_ic_irq_enable>
    7c24:	00000106 	br	7c2c <alt_iic_isr_register+0x54>
    7c28:	0007b780 	call	7b78 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7c2c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    7c30:	dfc00117 	ldw	ra,4(sp)
    7c34:	dc000017 	ldw	r16,0(sp)
    7c38:	dec00204 	addi	sp,sp,8
    7c3c:	f800283a 	ret

00007c40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    7c40:	defffd04 	addi	sp,sp,-12
    7c44:	dfc00215 	stw	ra,8(sp)
    7c48:	dc400115 	stw	r17,4(sp)
    7c4c:	dc000015 	stw	r16,0(sp)
    7c50:	2023883a 	mov	r17,r4
  int old;

  old = open (name, flags, mode);
    7c54:	2809883a 	mov	r4,r5
    7c58:	300b883a 	mov	r5,r6
    7c5c:	380d883a 	mov	r6,r7
    7c60:	0007d500 	call	7d50 <open>
    7c64:	1021883a 	mov	r16,r2

  if (old >= 0)
    7c68:	10000e16 	blt	r2,zero,7ca4 <alt_open_fd+0x64>
  {
    fd->dev      = alt_fd_list[old].dev;
    7c6c:	1009883a 	mov	r4,r2
    7c70:	01400304 	movi	r5,12
    7c74:	0006a900 	call	6a90 <__mulsi3>
    7c78:	00c00074 	movhi	r3,1
    7c7c:	18e83604 	addi	r3,r3,-24360
    7c80:	10c5883a 	add	r2,r2,r3
    7c84:	10c00017 	ldw	r3,0(r2)
    7c88:	88c00015 	stw	r3,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    7c8c:	10c00117 	ldw	r3,4(r2)
    7c90:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    7c94:	10800217 	ldw	r2,8(r2)
    7c98:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
    7c9c:	8009883a 	mov	r4,r16
    7ca0:	0007ed40 	call	7ed4 <alt_release_fd>
  }
} 
    7ca4:	dfc00217 	ldw	ra,8(sp)
    7ca8:	dc400117 	ldw	r17,4(sp)
    7cac:	dc000017 	ldw	r16,0(sp)
    7cb0:	dec00304 	addi	sp,sp,12
    7cb4:	f800283a 	ret

00007cb8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    7cb8:	defffa04 	addi	sp,sp,-24
    7cbc:	dfc00515 	stw	ra,20(sp)
    7cc0:	dd000415 	stw	r20,16(sp)
    7cc4:	dcc00315 	stw	r19,12(sp)
    7cc8:	dc800215 	stw	r18,8(sp)
    7ccc:	dc400115 	stw	r17,4(sp)
    7cd0:	dc000015 	stw	r16,0(sp)
    7cd4:	2005883a 	mov	r2,r4
    7cd8:	2827883a 	mov	r19,r5
    7cdc:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    7ce0:	04000074 	movhi	r16,1
    7ce4:	84283904 	addi	r16,r16,-24348
    7ce8:	04800044 	movi	r18,1
    7cec:	04407fc4 	movi	r17,511
    7cf0:	8009883a 	mov	r4,r16
    7cf4:	100b883a 	mov	r5,r2
    7cf8:	900d883a 	mov	r6,r18
    7cfc:	880f883a 	mov	r7,r17
    7d00:	0007c400 	call	7c40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    7d04:	843ffd04 	addi	r16,r16,-12
    7d08:	8009883a 	mov	r4,r16
    7d0c:	980b883a 	mov	r5,r19
    7d10:	000d883a 	mov	r6,zero
    7d14:	880f883a 	mov	r7,r17
    7d18:	0007c400 	call	7c40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    7d1c:	81000604 	addi	r4,r16,24
    7d20:	a00b883a 	mov	r5,r20
    7d24:	900d883a 	mov	r6,r18
    7d28:	880f883a 	mov	r7,r17
    7d2c:	0007c400 	call	7c40 <alt_open_fd>
}  
    7d30:	dfc00517 	ldw	ra,20(sp)
    7d34:	dd000417 	ldw	r20,16(sp)
    7d38:	dcc00317 	ldw	r19,12(sp)
    7d3c:	dc800217 	ldw	r18,8(sp)
    7d40:	dc400117 	ldw	r17,4(sp)
    7d44:	dc000017 	ldw	r16,0(sp)
    7d48:	dec00604 	addi	sp,sp,24
    7d4c:	f800283a 	ret

00007d50 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    7d50:	defff904 	addi	sp,sp,-28
    7d54:	dfc00615 	stw	ra,24(sp)
    7d58:	dd400515 	stw	r21,20(sp)
    7d5c:	dd000415 	stw	r20,16(sp)
    7d60:	dcc00315 	stw	r19,12(sp)
    7d64:	dc800215 	stw	r18,8(sp)
    7d68:	dc400115 	stw	r17,4(sp)
    7d6c:	dc000015 	stw	r16,0(sp)
    7d70:	2029883a 	mov	r20,r4
    7d74:	2827883a 	mov	r19,r5
    7d78:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    7d7c:	01400074 	movhi	r5,1
    7d80:	29689e04 	addi	r5,r5,-23944
    7d84:	00080240 	call	8024 <alt_find_dev>
    7d88:	1021883a 	mov	r16,r2
    7d8c:	10000226 	beq	r2,zero,7d98 <open+0x48>
    7d90:	0025883a 	mov	r18,zero
    7d94:	00000a06 	br	7dc0 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    7d98:	a009883a 	mov	r4,r20
    7d9c:	00080940 	call	8094 <alt_find_file>
    7da0:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    7da4:	1000051e 	bne	r2,zero,7dbc <open+0x6c>
    7da8:	047fffc4 	movi	r17,-1
    7dac:	043ffb44 	movi	r16,-19
    7db0:	00002d06 	br	7e68 <open+0x118>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    7db4:	043ffcc4 	movi	r16,-13
    7db8:	00002b06 	br	7e68 <open+0x118>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    7dbc:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
    7dc0:	8009883a 	mov	r4,r16
    7dc4:	00081500 	call	8150 <alt_get_fd>
    7dc8:	1023883a 	mov	r17,r2
    7dcc:	10003516 	blt	r2,zero,7ea4 <open+0x154>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    7dd0:	1009883a 	mov	r4,r2
    7dd4:	01400304 	movi	r5,12
    7dd8:	0006a900 	call	6a90 <__mulsi3>
    7ddc:	02000074 	movhi	r8,1
    7de0:	42283604 	addi	r8,r8,-24360
    7de4:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    7de8:	00900034 	movhi	r2,16384
    7dec:	10bfffc4 	addi	r2,r2,-1
    7df0:	9886703a 	and	r3,r19,r2
    7df4:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    7df8:	9004c03a 	cmpne	r2,r18,zero
    7dfc:	1000121e 	bne	r2,zero,7e48 <open+0xf8>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    7e00:	18900034 	orhi	r2,r3,16384
    7e04:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    7e08:	00800074 	movhi	r2,1
    7e0c:	10a8a004 	addi	r2,r2,-23936
    7e10:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    7e14:	21800017 	ldw	r6,0(r4)
    7e18:	000b883a 	mov	r5,zero
    7e1c:	4007883a 	mov	r3,r8
    7e20:	02400044 	movi	r9,1
    7e24:	02000304 	movi	r8,12
    7e28:	18800017 	ldw	r2,0(r3)
    7e2c:	1180031e 	bne	r2,r6,7e3c <open+0xec>
    7e30:	18800217 	ldw	r2,8(r3)
    7e34:	1000010e 	bge	r2,zero,7e3c <open+0xec>
    7e38:	193fde1e 	bne	r3,r4,7db4 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    7e3c:	2a4b883a 	add	r5,r5,r9
    7e40:	1a07883a 	add	r3,r3,r8
    7e44:	397ff82e 	bgeu	r7,r5,7e28 <open+0xd8>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    7e48:	80800317 	ldw	r2,12(r16)
    7e4c:	10001726 	beq	r2,zero,7eac <open+0x15c>
    7e50:	a00b883a 	mov	r5,r20
    7e54:	980d883a 	mov	r6,r19
    7e58:	a80f883a 	mov	r7,r21
    7e5c:	103ee83a 	callr	r2
    7e60:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    7e64:	1000110e 	bge	r2,zero,7eac <open+0x15c>
  {
    alt_release_fd (index);  
    7e68:	8809883a 	mov	r4,r17
    7e6c:	0007ed40 	call	7ed4 <alt_release_fd>
    7e70:	00800074 	movhi	r2,1
    7e74:	10a8a104 	addi	r2,r2,-23932
    7e78:	10800017 	ldw	r2,0(r2)
    7e7c:	1000031e 	bne	r2,zero,7e8c <open+0x13c>
    7e80:	00c00074 	movhi	r3,1
    7e84:	18ef6604 	addi	r3,r3,-17000
    7e88:	00000206 	br	7e94 <open+0x144>
    7e8c:	103ee83a 	callr	r2
    7e90:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
    7e94:	0405c83a 	sub	r2,zero,r16
    7e98:	18800015 	stw	r2,0(r3)
    7e9c:	047fffc4 	movi	r17,-1
    7ea0:	00000206 	br	7eac <open+0x15c>
    7ea4:	1021883a 	mov	r16,r2
    7ea8:	003fef06 	br	7e68 <open+0x118>
  }
  
  /* return the reference upon success */

  return index;
}
    7eac:	8805883a 	mov	r2,r17
    7eb0:	dfc00617 	ldw	ra,24(sp)
    7eb4:	dd400517 	ldw	r21,20(sp)
    7eb8:	dd000417 	ldw	r20,16(sp)
    7ebc:	dcc00317 	ldw	r19,12(sp)
    7ec0:	dc800217 	ldw	r18,8(sp)
    7ec4:	dc400117 	ldw	r17,4(sp)
    7ec8:	dc000017 	ldw	r16,0(sp)
    7ecc:	dec00704 	addi	sp,sp,28
    7ed0:	f800283a 	ret

00007ed4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    7ed4:	defffc04 	addi	sp,sp,-16
    7ed8:	dfc00315 	stw	ra,12(sp)
    7edc:	dc800215 	stw	r18,8(sp)
    7ee0:	dc400115 	stw	r17,4(sp)
    7ee4:	dc000015 	stw	r16,0(sp)
    7ee8:	2025883a 	mov	r18,r4
  if (fd > 2)
    7eec:	00800084 	movi	r2,2
    7ef0:	11000c0e 	bge	r2,r4,7f24 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    7ef4:	04400074 	movhi	r17,1
    7ef8:	8c683604 	addi	r17,r17,-24360
    7efc:	04000304 	movi	r16,12
    7f00:	800b883a 	mov	r5,r16
    7f04:	0006a900 	call	6a90 <__mulsi3>
    7f08:	1445883a 	add	r2,r2,r17
    7f0c:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    7f10:	9009883a 	mov	r4,r18
    7f14:	800b883a 	mov	r5,r16
    7f18:	0006a900 	call	6a90 <__mulsi3>
    7f1c:	1445883a 	add	r2,r2,r17
    7f20:	10000015 	stw	zero,0(r2)
  }
}
    7f24:	dfc00317 	ldw	ra,12(sp)
    7f28:	dc800217 	ldw	r18,8(sp)
    7f2c:	dc400117 	ldw	r17,4(sp)
    7f30:	dc000017 	ldw	r16,0(sp)
    7f34:	dec00404 	addi	sp,sp,16
    7f38:	f800283a 	ret

00007f3c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f3c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f40:	00bfff84 	movi	r2,-2
    7f44:	2884703a 	and	r2,r5,r2
    7f48:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    7f4c:	20c00017 	ldw	r3,0(r4)
    7f50:	20800117 	ldw	r2,4(r4)
    7f54:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    7f58:	20800117 	ldw	r2,4(r4)
    7f5c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    7f60:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    7f64:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f68:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    7f6c:	f800283a 	ret

00007f70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    7f70:	defffd04 	addi	sp,sp,-12
    7f74:	dfc00215 	stw	ra,8(sp)
    7f78:	dc400115 	stw	r17,4(sp)
    7f7c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    7f80:	d4200d17 	ldw	r16,-32716(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    7f84:	d0a6d617 	ldw	r2,-25768(gp)
    7f88:	10800044 	addi	r2,r2,1
    7f8c:	d0a6d615 	stw	r2,-25768(gp)
    7f90:	00001b06 	br	8000 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    7f94:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    7f98:	80800403 	ldbu	r2,16(r16)
    7f9c:	10000326 	beq	r2,zero,7fac <alt_tick+0x3c>
    7fa0:	d0a6d617 	ldw	r2,-25768(gp)
    7fa4:	1000011e 	bne	r2,zero,7fac <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    7fa8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    7fac:	d0e6d617 	ldw	r3,-25768(gp)
    7fb0:	80800217 	ldw	r2,8(r16)
    7fb4:	18801136 	bltu	r3,r2,7ffc <alt_tick+0x8c>
    7fb8:	80800403 	ldbu	r2,16(r16)
    7fbc:	10000f1e 	bne	r2,zero,7ffc <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    7fc0:	80800317 	ldw	r2,12(r16)
    7fc4:	81000517 	ldw	r4,20(r16)
    7fc8:	103ee83a 	callr	r2
    7fcc:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    7fd0:	1000031e 	bne	r2,zero,7fe0 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    7fd4:	8009883a 	mov	r4,r16
    7fd8:	0007f3c0 	call	7f3c <alt_alarm_stop>
    7fdc:	00000706 	br	7ffc <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    7fe0:	80800217 	ldw	r2,8(r16)
    7fe4:	1885883a 	add	r2,r3,r2
    7fe8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    7fec:	d0e6d617 	ldw	r3,-25768(gp)
    7ff0:	10c0022e 	bgeu	r2,r3,7ffc <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    7ff4:	00800044 	movi	r2,1
    7ff8:	80800405 	stb	r2,16(r16)
    7ffc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    8000:	d0a00d04 	addi	r2,gp,-32716
    8004:	80bfe31e 	bne	r16,r2,7f94 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    8008:	dfc00217 	ldw	ra,8(sp)
    800c:	dc400117 	ldw	r17,4(sp)
    8010:	dc000017 	ldw	r16,0(sp)
    8014:	dec00304 	addi	sp,sp,12
    8018:	f800283a 	ret

0000801c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    801c:	000170fa 	wrctl	ienable,zero
}
    8020:	f800283a 	ret

00008024 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    8024:	defffb04 	addi	sp,sp,-20
    8028:	dfc00415 	stw	ra,16(sp)
    802c:	dcc00315 	stw	r19,12(sp)
    8030:	dc800215 	stw	r18,8(sp)
    8034:	dc400115 	stw	r17,4(sp)
    8038:	dc000015 	stw	r16,0(sp)
    803c:	2027883a 	mov	r19,r4
    8040:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
    8044:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    8048:	00082280 	call	8228 <strlen>
    804c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8050:	8c000726 	beq	r17,r16,8070 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    8054:	89000217 	ldw	r4,8(r17)
    8058:	980b883a 	mov	r5,r19
    805c:	900d883a 	mov	r6,r18
    8060:	000422c0 	call	422c <memcmp>
    8064:	10000326 	beq	r2,zero,8074 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    8068:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    806c:	847ff91e 	bne	r16,r17,8054 <alt_find_dev+0x30>
    8070:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
    8074:	8805883a 	mov	r2,r17
    8078:	dfc00417 	ldw	ra,16(sp)
    807c:	dcc00317 	ldw	r19,12(sp)
    8080:	dc800217 	ldw	r18,8(sp)
    8084:	dc400117 	ldw	r17,4(sp)
    8088:	dc000017 	ldw	r16,0(sp)
    808c:	dec00504 	addi	sp,sp,20
    8090:	f800283a 	ret

00008094 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    8094:	defff904 	addi	sp,sp,-28
    8098:	dfc00615 	stw	ra,24(sp)
    809c:	dd400515 	stw	r21,20(sp)
    80a0:	dd000415 	stw	r20,16(sp)
    80a4:	dcc00315 	stw	r19,12(sp)
    80a8:	dc800215 	stw	r18,8(sp)
    80ac:	dc400115 	stw	r17,4(sp)
    80b0:	dc000015 	stw	r16,0(sp)
    80b4:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    80b8:	00800074 	movhi	r2,1
    80bc:	10a89c04 	addi	r2,r2,-23952
    80c0:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    80c4:	102b883a 	mov	r21,r2
    80c8:	88801626 	beq	r17,r2,8124 <alt_find_file+0x90>
    80cc:	053fffc4 	movi	r20,-1
    80d0:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
    80d4:	8c000217 	ldw	r16,8(r17)
    80d8:	8009883a 	mov	r4,r16
    80dc:	00082280 	call	8228 <strlen>
    80e0:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    80e4:	8085883a 	add	r2,r16,r2
    80e8:	1505883a 	add	r2,r2,r20
    80ec:	10800007 	ldb	r2,0(r2)
    80f0:	14c0011e 	bne	r2,r19,80f8 <alt_find_file+0x64>
    {
      len -= 1;
    80f4:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    80f8:	1c85883a 	add	r2,r3,r18
    80fc:	10800007 	ldb	r2,0(r2)
    8100:	14c00126 	beq	r2,r19,8108 <alt_find_file+0x74>
    8104:	1000051e 	bne	r2,zero,811c <alt_find_file+0x88>
    8108:	8009883a 	mov	r4,r16
    810c:	900b883a 	mov	r5,r18
    8110:	180d883a 	mov	r6,r3
    8114:	000422c0 	call	422c <memcmp>
    8118:	10000326 	beq	r2,zero,8128 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    811c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8120:	8d7fec1e 	bne	r17,r21,80d4 <alt_find_file+0x40>
    8124:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
    8128:	8805883a 	mov	r2,r17
    812c:	dfc00617 	ldw	ra,24(sp)
    8130:	dd400517 	ldw	r21,20(sp)
    8134:	dd000417 	ldw	r20,16(sp)
    8138:	dcc00317 	ldw	r19,12(sp)
    813c:	dc800217 	ldw	r18,8(sp)
    8140:	dc400117 	ldw	r17,4(sp)
    8144:	dc000017 	ldw	r16,0(sp)
    8148:	dec00704 	addi	sp,sp,28
    814c:	f800283a 	ret

00008150 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    8150:	defffb04 	addi	sp,sp,-20
    8154:	dfc00415 	stw	ra,16(sp)
    8158:	dcc00315 	stw	r19,12(sp)
    815c:	dc800215 	stw	r18,8(sp)
    8160:	dc400115 	stw	r17,4(sp)
    8164:	dc000015 	stw	r16,0(sp)
    8168:	2025883a 	mov	r18,r4
    816c:	0021883a 	mov	r16,zero
    8170:	00c00074 	movhi	r3,1
    8174:	18e83604 	addi	r3,r3,-24360
    8178:	04c00074 	movhi	r19,1
    817c:	9ce8a004 	addi	r19,r19,-23936
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    8180:	18800017 	ldw	r2,0(r3)
    8184:	10000e1e 	bne	r2,zero,81c0 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
    8188:	8009883a 	mov	r4,r16
    818c:	01400304 	movi	r5,12
    8190:	0006a900 	call	6a90 <__mulsi3>
    8194:	00c00074 	movhi	r3,1
    8198:	18e83604 	addi	r3,r3,-24360
    819c:	10c5883a 	add	r2,r2,r3
    81a0:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    81a4:	98800017 	ldw	r2,0(r19)
    81a8:	14000216 	blt	r2,r16,81b4 <alt_get_fd+0x64>
    81ac:	8005883a 	mov	r2,r16
    81b0:	00000806 	br	81d4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    81b4:	9c000015 	stw	r16,0(r19)
    81b8:	8005883a 	mov	r2,r16
    81bc:	00000506 	br	81d4 <alt_get_fd+0x84>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    81c0:	84000044 	addi	r16,r16,1
    81c4:	18c00304 	addi	r3,r3,12
    81c8:	00800804 	movi	r2,32
    81cc:	80bfec1e 	bne	r16,r2,8180 <alt_get_fd+0x30>
    81d0:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    81d4:	dfc00417 	ldw	ra,16(sp)
    81d8:	dcc00317 	ldw	r19,12(sp)
    81dc:	dc800217 	ldw	r18,8(sp)
    81e0:	dc400117 	ldw	r17,4(sp)
    81e4:	dc000017 	ldw	r16,0(sp)
    81e8:	dec00504 	addi	sp,sp,20
    81ec:	f800283a 	ret

000081f0 <exit>:
    81f0:	defffe04 	addi	sp,sp,-8
    81f4:	000b883a 	mov	r5,zero
    81f8:	dc000015 	stw	r16,0(sp)
    81fc:	dfc00115 	stw	ra,4(sp)
    8200:	2021883a 	mov	r16,r4
    8204:	00082a00 	call	82a0 <__call_exitprocs>
    8208:	00800074 	movhi	r2,1
    820c:	10a89a04 	addi	r2,r2,-23960
    8210:	11000017 	ldw	r4,0(r2)
    8214:	20800f17 	ldw	r2,60(r4)
    8218:	10000126 	beq	r2,zero,8220 <exit+0x30>
    821c:	103ee83a 	callr	r2
    8220:	8009883a 	mov	r4,r16
    8224:	00084500 	call	8450 <_exit>

00008228 <strlen>:
    8228:	208000cc 	andi	r2,r4,3
    822c:	2011883a 	mov	r8,r4
    8230:	1000161e 	bne	r2,zero,828c <strlen+0x64>
    8234:	20c00017 	ldw	r3,0(r4)
    8238:	017fbff4 	movhi	r5,65279
    823c:	297fbfc4 	addi	r5,r5,-257
    8240:	01e02074 	movhi	r7,32897
    8244:	39e02004 	addi	r7,r7,-32640
    8248:	1945883a 	add	r2,r3,r5
    824c:	11c4703a 	and	r2,r2,r7
    8250:	00c6303a 	nor	r3,zero,r3
    8254:	1886703a 	and	r3,r3,r2
    8258:	18000c1e 	bne	r3,zero,828c <strlen+0x64>
    825c:	280d883a 	mov	r6,r5
    8260:	380b883a 	mov	r5,r7
    8264:	21000104 	addi	r4,r4,4
    8268:	20800017 	ldw	r2,0(r4)
    826c:	1187883a 	add	r3,r2,r6
    8270:	1946703a 	and	r3,r3,r5
    8274:	0084303a 	nor	r2,zero,r2
    8278:	10c4703a 	and	r2,r2,r3
    827c:	103ff926 	beq	r2,zero,8264 <strlen+0x3c>
    8280:	20800007 	ldb	r2,0(r4)
    8284:	10000326 	beq	r2,zero,8294 <strlen+0x6c>
    8288:	21000044 	addi	r4,r4,1
    828c:	20800007 	ldb	r2,0(r4)
    8290:	103ffd1e 	bne	r2,zero,8288 <strlen+0x60>
    8294:	2205c83a 	sub	r2,r4,r8
    8298:	f800283a 	ret

0000829c <register_fini>:
    829c:	f800283a 	ret

000082a0 <__call_exitprocs>:
    82a0:	00800074 	movhi	r2,1
    82a4:	10a89a04 	addi	r2,r2,-23960
    82a8:	10800017 	ldw	r2,0(r2)
    82ac:	defff304 	addi	sp,sp,-52
    82b0:	df000b15 	stw	fp,44(sp)
    82b4:	d8800115 	stw	r2,4(sp)
    82b8:	00800034 	movhi	r2,0
    82bc:	10829f04 	addi	r2,r2,2684
    82c0:	1005003a 	cmpeq	r2,r2,zero
    82c4:	d8800215 	stw	r2,8(sp)
    82c8:	d8800117 	ldw	r2,4(sp)
    82cc:	dd400815 	stw	r21,32(sp)
    82d0:	dd000715 	stw	r20,28(sp)
    82d4:	10805204 	addi	r2,r2,328
    82d8:	dfc00c15 	stw	ra,48(sp)
    82dc:	ddc00a15 	stw	r23,40(sp)
    82e0:	dd800915 	stw	r22,36(sp)
    82e4:	dcc00615 	stw	r19,24(sp)
    82e8:	dc800515 	stw	r18,20(sp)
    82ec:	dc400415 	stw	r17,16(sp)
    82f0:	dc000315 	stw	r16,12(sp)
    82f4:	282b883a 	mov	r21,r5
    82f8:	2039883a 	mov	fp,r4
    82fc:	d8800015 	stw	r2,0(sp)
    8300:	2829003a 	cmpeq	r20,r5,zero
    8304:	d8800117 	ldw	r2,4(sp)
    8308:	14405217 	ldw	r17,328(r2)
    830c:	88001026 	beq	r17,zero,8350 <__call_exitprocs+0xb0>
    8310:	ddc00017 	ldw	r23,0(sp)
    8314:	88800117 	ldw	r2,4(r17)
    8318:	8c802204 	addi	r18,r17,136
    831c:	143fffc4 	addi	r16,r2,-1
    8320:	80000916 	blt	r16,zero,8348 <__call_exitprocs+0xa8>
    8324:	05bfffc4 	movi	r22,-1
    8328:	a000151e 	bne	r20,zero,8380 <__call_exitprocs+0xe0>
    832c:	8409883a 	add	r4,r16,r16
    8330:	2105883a 	add	r2,r4,r4
    8334:	1485883a 	add	r2,r2,r18
    8338:	10c02017 	ldw	r3,128(r2)
    833c:	a8c01126 	beq	r21,r3,8384 <__call_exitprocs+0xe4>
    8340:	843fffc4 	addi	r16,r16,-1
    8344:	85bff81e 	bne	r16,r22,8328 <__call_exitprocs+0x88>
    8348:	d8800217 	ldw	r2,8(sp)
    834c:	10003126 	beq	r2,zero,8414 <__call_exitprocs+0x174>
    8350:	dfc00c17 	ldw	ra,48(sp)
    8354:	df000b17 	ldw	fp,44(sp)
    8358:	ddc00a17 	ldw	r23,40(sp)
    835c:	dd800917 	ldw	r22,36(sp)
    8360:	dd400817 	ldw	r21,32(sp)
    8364:	dd000717 	ldw	r20,28(sp)
    8368:	dcc00617 	ldw	r19,24(sp)
    836c:	dc800517 	ldw	r18,20(sp)
    8370:	dc400417 	ldw	r17,16(sp)
    8374:	dc000317 	ldw	r16,12(sp)
    8378:	dec00d04 	addi	sp,sp,52
    837c:	f800283a 	ret
    8380:	8409883a 	add	r4,r16,r16
    8384:	88c00117 	ldw	r3,4(r17)
    8388:	2105883a 	add	r2,r4,r4
    838c:	1445883a 	add	r2,r2,r17
    8390:	18ffffc4 	addi	r3,r3,-1
    8394:	11800217 	ldw	r6,8(r2)
    8398:	1c001526 	beq	r3,r16,83f0 <__call_exitprocs+0x150>
    839c:	10000215 	stw	zero,8(r2)
    83a0:	303fe726 	beq	r6,zero,8340 <__call_exitprocs+0xa0>
    83a4:	00c00044 	movi	r3,1
    83a8:	1c06983a 	sll	r3,r3,r16
    83ac:	90804017 	ldw	r2,256(r18)
    83b0:	8cc00117 	ldw	r19,4(r17)
    83b4:	1884703a 	and	r2,r3,r2
    83b8:	10001426 	beq	r2,zero,840c <__call_exitprocs+0x16c>
    83bc:	90804117 	ldw	r2,260(r18)
    83c0:	1884703a 	and	r2,r3,r2
    83c4:	10000c1e 	bne	r2,zero,83f8 <__call_exitprocs+0x158>
    83c8:	2105883a 	add	r2,r4,r4
    83cc:	1485883a 	add	r2,r2,r18
    83d0:	11400017 	ldw	r5,0(r2)
    83d4:	e009883a 	mov	r4,fp
    83d8:	303ee83a 	callr	r6
    83dc:	88800117 	ldw	r2,4(r17)
    83e0:	98bfc81e 	bne	r19,r2,8304 <__call_exitprocs+0x64>
    83e4:	b8800017 	ldw	r2,0(r23)
    83e8:	147fd526 	beq	r2,r17,8340 <__call_exitprocs+0xa0>
    83ec:	003fc506 	br	8304 <__call_exitprocs+0x64>
    83f0:	8c000115 	stw	r16,4(r17)
    83f4:	003fea06 	br	83a0 <__call_exitprocs+0x100>
    83f8:	2105883a 	add	r2,r4,r4
    83fc:	1485883a 	add	r2,r2,r18
    8400:	11000017 	ldw	r4,0(r2)
    8404:	303ee83a 	callr	r6
    8408:	003ff406 	br	83dc <__call_exitprocs+0x13c>
    840c:	303ee83a 	callr	r6
    8410:	003ff206 	br	83dc <__call_exitprocs+0x13c>
    8414:	88800117 	ldw	r2,4(r17)
    8418:	1000081e 	bne	r2,zero,843c <__call_exitprocs+0x19c>
    841c:	89000017 	ldw	r4,0(r17)
    8420:	20000726 	beq	r4,zero,8440 <__call_exitprocs+0x1a0>
    8424:	b9000015 	stw	r4,0(r23)
    8428:	8809883a 	mov	r4,r17
    842c:	0000a7c0 	call	a7c <free>
    8430:	bc400017 	ldw	r17,0(r23)
    8434:	883fb71e 	bne	r17,zero,8314 <__call_exitprocs+0x74>
    8438:	003fc506 	br	8350 <__call_exitprocs+0xb0>
    843c:	89000017 	ldw	r4,0(r17)
    8440:	882f883a 	mov	r23,r17
    8444:	2023883a 	mov	r17,r4
    8448:	883fb21e 	bne	r17,zero,8314 <__call_exitprocs+0x74>
    844c:	003fc006 	br	8350 <__call_exitprocs+0xb0>

00008450 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    8450:	20000226 	beq	r4,zero,845c <_exit+0xc>
    ALT_SIM_FAIL();
    8454:	002af070 	cmpltui	zero,zero,43969
    8458:	00000106 	br	8460 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    845c:	002af0b0 	cmpltui	zero,zero,43970
    8460:	003fff06 	br	8460 <_exit+0x10>
    8464:	0000829c 	xori	zero,zero,522
