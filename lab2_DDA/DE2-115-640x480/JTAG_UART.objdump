
C:/ECE5760_Epiphyte/lab2_DDA/DE2-115-640x480/JTAG_UART.elf:     file format elf32-littlenios2
C:/ECE5760_Epiphyte/lab2_DDA/DE2-115-640x480/JTAG_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002780 memsz 0x00002780 flags r-x
    LOAD off    0x000037a0 vaddr 0x000027a0 paddr 0x0000417c align 2**12
         filesz 0x000019dc memsz 0x000019dc flags rw-
    LOAD off    0x00005b58 vaddr 0x00005b58 paddr 0x00005b58 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002400  000001c8  000001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001d8  000025c8  000025c8  000035c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000019dc  000027a0  0000417c  000037a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00005b58  00005b58  00005b58  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00005c78  00005c78  0000517c  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0000517c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000517c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005f8  00000000  00000000  000051a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000a0a4  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003593  00000000  00000000  0000f83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003386  00000000  00000000  00012dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000cbc  00000000  00000000  00016158  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000023fb  00000000  00000000  00016e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002f2b  00000000  00000000  0001920f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0001c13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000180  00000000  00000000  0001c160  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001e885  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0001e888  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001e88d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001e88e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001e88f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001e893  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001e897  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0001e89b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0001e8a4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0001e8ad  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0001e8b6  2**0
                  CONTENTS, READONLY
 29 .jdi          0000abc5  00000000  00000000  0001e8c1  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0018697c  00000000  00000000  00029486  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c8 l    d  .text	00000000 .text
000025c8 l    d  .rodata	00000000 .rodata
000027a0 l    d  .rwdata	00000000 .rwdata
00005b58 l    d  .bss	00000000 .bss
00005c78 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 BSP//obj/HAL/src/crt0.o
00000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 JTAG_UART.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00002b24 l     O .rwdata	00001060 JTAG_UART
00002af4 l     O .rwdata	00000030 AV_Config
00002ac4 l     O .rwdata	00000030 Audio_Subsystem_Audio
00002a98 l     O .rwdata	0000002c Char_LCD_16x2
00002a6c l     O .rwdata	0000002c IrDA
00002a40 l     O .rwdata	0000002c Expansion_JP5
00002a14 l     O .rwdata	0000002c Green_LEDs
000029e8 l     O .rwdata	0000002c HEX3_HEX0
000029bc l     O .rwdata	0000002c HEX7_HEX4
00002990 l     O .rwdata	0000002c Pushbuttons
00002964 l     O .rwdata	0000002c Red_LEDs
00002938 l     O .rwdata	0000002c Slider_Switches
00002900 l     O .rwdata	00000038 PS2_Port
000028c8 l     O .rwdata	00000038 PS2_Port_Dual
0000289c l     O .rwdata	0000002c Serial_Port
00002868 l     O .rwdata	00000034 USB
00002820 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
000027cc l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
000027a0 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000870 l     F .text	00000050 altera_avalon_jtag_uart_timeout
000008c0 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000dec l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001934 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001a58 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00003d2c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00005b70 g     O .bss	00000004 alt_instruction_exception_handler
0000046c g     F .text	00000050 alt_main
00005b78 g     O .bss	00000100 alt_irq
00001248 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
0000417c g       *ABS*	00000000 __flash_rwdata_start
00000e88 g     F .text	0000000c alt_up_character_lcd_send_cmd
00001718 g     F .text	00000098 alt_up_char_buffer_string
00001208 g     F .text	0000000c read_CE_bit
00001284 g     F .text	00000038 alt_up_ps2_read_data_byte_timeout
00001588 g     F .text	00000070 alt_up_rs232_read_fd
000016c0 g     F .text	00000058 alt_up_char_buffer_draw
00001ee0 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000e74 g     F .text	00000014 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005b74 g     O .bss	00000004 errno
00005b5c g     O .bss	00000004 alt_argv
0000c150 g       *ABS*	00000000 _gp
00003b84 g     O .rwdata	00000180 alt_fd_list
000019bc g     F .text	0000007c alt_find_dev
000021ac g     F .text	00000138 memcpy
00000f20 g     F .text	00000020 alt_up_character_lcd_write_fd
000017b0 g     F .text	00000020 alt_up_char_buffer_clear
00001abc g     F .text	00000098 alt_io_redirect
000011a8 g     F .text	0000002c alt_up_irda_write_fd
0000153c g     F .text	0000004c alt_up_rs232_read_data
00002084 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000010a8 g     F .text	00000010 alt_up_irda_get_used_space_in_read_FIFO
00000b04 g     F .text	00000150 altera_avalon_jtag_uart_read
0000108c g     F .text	0000001c alt_up_irda_disable_read_interrupt
0000202c g     F .text	00000058 alt_icache_flush
00004150 g     O .rwdata	00000004 alt_max_fd
00001518 g     F .text	00000010 alt_up_rs232_check_parity
00001214 g     F .text	00000008 read_num_bytes_available
00001b54 g     F .text	000000bc alt_irq_register
000011f4 g     F .text	0000000c read_RI_bit
00004174 g     O .rwdata	00000004 _global_impure_ptr
00005c78 g       *ABS*	00000000 __bss_end
00001e14 g     F .text	000000cc alt_tick
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00001228 g     F .text	00000008 read_data_byte
00001ddc g     F .text	00000038 alt_alarm_stop
00001200 g     F .text	00000008 read_RE_bit
00005b64 g     O .bss	00000004 alt_irq_active
000010b8 g     F .text	00000010 alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	00000088 alt_irq_handler
00003d04 g     O .rwdata	00000028 alt_dev_null
00001064 g     F .text	00000010 alt_up_character_lcd_cursor_blink_on
00001264 g     F .text	00000020 alt_up_ps2_write_data_byte
00001930 g     F .text	00000004 alt_dcache_flush_all
0000417c g       *ABS*	00000000 __ram_rwdata_end
00004154 g     O .rwdata	00000008 alt_dev_list
000027a0 g       *ABS*	00000000 __ram_rodata_end
000015f8 g     F .text	0000002c alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00005c78 g       *ABS*	00000000 end
00001430 g     F .text	00000074 alt_up_ps2_write_fd
000010c8 g     F .text	00000010 alt_up_irda_check_parity
00001644 g     F .text	0000005c alt_up_char_buffer_init
000009c8 g     F .text	00000078 altera_avalon_jtag_uart_init
00000184 g     F .exceptions	00000044 alt_instruction_exception_entry
04000000 g       *ABS*	00000000 __alt_stack_pointer
00000e28 g     F .text	0000004c alt_avalon_timer_sc_init
00000c54 g     F .text	00000198 altera_avalon_jtag_uart_write
00000ec4 g     F .text	00000024 alt_up_character_lcd_write
00002420 g     F .text	00000194 __call_exitprocs
000001c8 g     F .text	0000003c _start
00005b6c g     O .bss	00000004 _alt_tick_rate
00005b68 g     O .bss	00000004 _alt_nticks
000004dc g     F .text	000002fc alt_sys_init
00000fc4 g     F .text	00000044 alt_up_character_lcd_shift_display
000013f4 g     F .text	00000014 alt_up_ps2_clear_fifo
00001508 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00001008 g     F .text	0000004c alt_up_character_lcd_erase_pos
00000a40 g     F .text	0000003c altera_avalon_jtag_uart_close
000027a0 g       *ABS*	00000000 __ram_rwdata_start
000025c8 g       *ABS*	00000000 __ram_rodata_start
000007d8 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00001fb4 g     F .text	00000078 alt_get_fd
00002130 g     F .text	0000007c memcmp
00000828 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
00005c78 g       *ABS*	00000000 __alt_stack_base
00000850 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00001074 g     F .text	00000018 alt_up_irda_enable_read_interrupt
000014dc g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00001ee8 g     F .text	000000cc alt_find_file
0000193c g     F .text	00000080 alt_dev_llist_insert
00005b58 g       *ABS*	00000000 __bss_start
00000224 g     F .text	000000c4 main
00005b58 g     O .bss	00000004 alt_envp
000016a0 g     F .text	00000020 alt_up_char_buffer_open_dev
00000800 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00000f80 g     F .text	00000044 alt_up_character_lcd_shift_cursor
000013d0 g     F .text	00000024 alt_up_ps2_read_data_byte
00004164 g     O .rwdata	00000004 alt_errno
000010d8 g     F .text	00000014 alt_up_irda_write_data
000014a4 g     F .text	00000020 alt_up_ps2_open_dev
00000ea4 g     F .text	00000020 alt_up_character_lcd_open_dev
00001230 g     F .text	00000018 alt_up_ps2_enable_read_interrupt
00000e94 g     F .text	00000010 alt_up_character_lcd_init
000022e4 g     F .text	000000a4 strcmp
000025c8 g       *ABS*	00000000 __flash_rodata_start
00001624 g     F .text	00000020 alt_up_rs232_open_dev
000004bc g     F .text	00000020 alt_irq_init
00001db8 g     F .text	00000024 alt_release_fd
0000121c g     F .text	0000000c read_data_valid
00001054 g     F .text	00000010 alt_up_character_lcd_cursor_off
00001318 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00004178 g     O .rwdata	00000004 _impure_ptr
00005b60 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
0000415c g     O .rwdata	00000008 alt_fs_list
000014c4 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00001528 g     F .text	00000014 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000417c g       *ABS*	00000000 _edata
00005c78 g       *ABS*	00000000 _end
000001c8 g       *ABS*	00000000 __ram_exceptions_end
00000a7c g     F .text	00000088 altera_avalon_jtag_uart_ioctl
000020f8 g     F .text	00000038 exit
000010ec g     F .text	0000004c alt_up_irda_read_data
0000134c g     F .text	00000084 alt_up_ps2_init
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000ee8 g     F .text	00000038 alt_up_character_lcd_string
000011d4 g     F .text	00000020 alt_up_irda_open_dev
000025b4 g     F .text	00000014 _exit
000017d0 g     F .text	00000094 alt_alarm_start
000012bc g     F .text	0000005c alt_up_ps2_wait_for_ack
00002388 g     F .text	00000098 strlen
00001c10 g     F .text	000001a8 open
00001a38 g     F .text	00000020 alt_icache_flush_all
00000f40 g     F .text	00000040 alt_up_character_lcd_set_cursor_pos
00004168 g     O .rwdata	00000004 alt_priority_mask
00001408 g     F .text	00000028 alt_up_ps2_read_fd
00001138 g     F .text	00000070 alt_up_irda_read_fd
00000204 g     F .text	00000020 put_jtag
0000416c g     O .rwdata	00000008 alt_alarm_list
000014f8 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00001864 g     F .text	000000cc close
000002e8 g     F .text	00000184 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407214 	ori	at,at,456
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001840 	call	184 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffc04 	addi	sp,sp,-16
 100:	dfc00315 	stw	ra,12(sp)
 104:	dc800215 	stw	r18,8(sp)
 108:	dc400115 	stw	r17,4(sp)
 10c:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0009313a 	rdctl	r4,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	0023883a 	mov	r17,zero
 118:	04800044 	movi	r18,1
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 11c:	04000034 	movhi	r16,0
 120:	8416de04 	addi	r16,r16,23416
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 124:	2080004c 	andi	r2,r4,1
 128:	10000926 	beq	r2,zero,150 <alt_irq_handler+0x54>

  active = alt_irq_pending ();

  do
  {
    i = 0;
 12c:	880b883a 	mov	r5,r17
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 130:	280490fa 	slli	r2,r5,3
 134:	8085883a 	add	r2,r16,r2
 138:	10c00017 	ldw	r3,0(r2)
 13c:	11000117 	ldw	r4,4(r2)
 140:	183ee83a 	callr	r3
 144:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 148:	203ff61e 	bne	r4,zero,124 <__alt_mem_Flash_flash_data+0xf4000124>
 14c:	00000706 	br	16c <alt_irq_handler+0x70>
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 150:	880b883a 	mov	r5,r17
 154:	9005883a 	mov	r2,r18
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 158:	1085883a 	add	r2,r2,r2
      i++;
 15c:	29400044 	addi	r5,r5,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 160:	2086703a 	and	r3,r4,r2
 164:	183ffc26 	beq	r3,zero,158 <__alt_mem_Flash_flash_data+0xf4000158>
 168:	003ff106 	br	130 <__alt_mem_Flash_flash_data+0xf4000130>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 16c:	dfc00317 	ldw	ra,12(sp)
 170:	dc800217 	ldw	r18,8(sp)
 174:	dc400117 	ldw	r17,4(sp)
 178:	dc000017 	ldw	r16,0(sp)
 17c:	dec00404 	addi	sp,sp,16
 180:	f800283a 	ret

00000184 <alt_instruction_exception_entry>:
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 184:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 188:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 18c:	d0e68817 	ldw	r3,-26080(gp)
 190:	18000726 	beq	r3,zero,1b0 <alt_instruction_exception_entry+0x2c>
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 194:	deffff04 	addi	sp,sp,-4
 198:	dfc00015 	stw	ra,0(sp)
 19c:	200b883a 	mov	r5,r4
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1a0:	11001f0c 	andi	r4,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1a4:	2008d0ba 	srli	r4,r4,2
 1a8:	183ee83a 	callr	r3
 1ac:	00000306 	br	1bc <alt_instruction_exception_entry+0x38>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1b0:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1b4:	0005883a 	mov	r2,zero
 1b8:	f800283a 	ret
}
 1bc:	dfc00017 	ldw	ra,0(sp)
 1c0:	dec00104 	addi	sp,sp,4
 1c4:	f800283a 	ret

Disassembly of section .text:

000001c8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     1cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1d4:	d6b05414 	ori	gp,gp,49488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1dc:	1096d614 	ori	r2,r2,23384

    movhi r3, %hi(__bss_end)
     1e0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1e4:	18d71e14 	ori	r3,r3,23672

    beq r2, r3, 1f
     1e8:	10c00326 	beq	r2,r3,1f8 <_start+0x30>

0:
    stw zero, (r2)
     1ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f4:	10fffd36 	bltu	r2,r3,1ec <__alt_mem_Flash_flash_data+0xf40001ec>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f8:	00002e80 	call	2e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1fc:	000046c0 	call	46c <alt_main>

00000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     200:	003fff06 	br	200 <__alt_mem_Flash_flash_data+0xf4000200>

00000204 <put_jtag>:
 * Subroutine to send a character to the JTAG UART
********************************************************************************/
void put_jtag( volatile int * JTAG_UART_ptr, char c )
{
	int control;
	control = *(JTAG_UART_ptr + 1);			// read the JTAG_UART control register
     204:	20800117 	ldw	r2,4(r4)
	if (control & 0xFFFF0000)					// if space, then echo character, else ignore 
     208:	10bfffec 	andhi	r2,r2,65535
     20c:	10000426 	beq	r2,zero,220 <put_jtag+0x1c>
		*(JTAG_UART_ptr) = c;
     210:	29403fcc 	andi	r5,r5,255
     214:	2940201c 	xori	r5,r5,128
     218:	297fe004 	addi	r5,r5,-128
     21c:	21400015 	stw	r5,0(r4)
     220:	f800283a 	ret

00000224 <main>:
 *  	1. sends a text string to the JTAG UART
 * 	2. reads character data from the JTAG UART
 * 	3. echos the character data back to the JTAG UART
********************************************************************************/
int main(void)
{
     224:	defff604 	addi	sp,sp,-40
     228:	dfc00915 	stw	ra,36(sp)
     22c:	dc400815 	stw	r17,32(sp)
     230:	dc000715 	stw	r16,28(sp)
	   and store instructions will be used to access these pointer locations, 
	   instead of regular memory loads and stores) */
	volatile int * JTAG_UART_ptr 	= (int *) 0x10001000;	// JTAG UART address

	int data, i;
	char text_string[] = "\nJTAG UART example code\n> \0";
     234:	00800034 	movhi	r2,0
     238:	10897204 	addi	r2,r2,9672
     23c:	11400017 	ldw	r5,0(r2)
     240:	d9400015 	stw	r5,0(sp)
     244:	10c00117 	ldw	r3,4(r2)
     248:	d8c00115 	stw	r3,4(sp)
     24c:	10c00217 	ldw	r3,8(r2)
     250:	d8c00215 	stw	r3,8(sp)
     254:	10c00317 	ldw	r3,12(r2)
     258:	d8c00315 	stw	r3,12(sp)
     25c:	10c00417 	ldw	r3,16(r2)
     260:	d8c00415 	stw	r3,16(sp)
     264:	10c00517 	ldw	r3,20(r2)
     268:	d8c00515 	stw	r3,20(sp)
     26c:	10800617 	ldw	r2,24(r2)
     270:	d8800615 	stw	r2,24(sp)

	/* print a text string */
	for (i = 0; text_string[i] != 0; ++i)
     274:	28803fcc 	andi	r2,r5,255
     278:	1080201c 	xori	r2,r2,128
     27c:	10bfe004 	addi	r2,r2,-128
     280:	10000e26 	beq	r2,zero,2bc <main+0x98>
     284:	dc000044 	addi	r16,sp,1
		put_jtag (JTAG_UART_ptr, text_string[i]);
     288:	04440034 	movhi	r17,4096
     28c:	8c440004 	addi	r17,r17,4096
     290:	8809883a 	mov	r4,r17
     294:	29403fcc 	andi	r5,r5,255
     298:	2940201c 	xori	r5,r5,128
     29c:	297fe004 	addi	r5,r5,-128
     2a0:	00002040 	call	204 <put_jtag>
     2a4:	84000044 	addi	r16,r16,1

	int data, i;
	char text_string[] = "\nJTAG UART example code\n> \0";

	/* print a text string */
	for (i = 0; text_string[i] != 0; ++i)
     2a8:	817fffc3 	ldbu	r5,-1(r16)
     2ac:	28803fcc 	andi	r2,r5,255
     2b0:	1080201c 	xori	r2,r2,128
     2b4:	10bfe004 	addi	r2,r2,-128
     2b8:	103ff51e 	bne	r2,zero,290 <__alt_mem_Flash_flash_data+0xf4000290>
		put_jtag (JTAG_UART_ptr, text_string[i]);

	/* read and echo characters */
	while(1)
	{
		data = *(JTAG_UART_ptr);		 		// read the JTAG_UART data register
     2bc:	04040034 	movhi	r16,4096
     2c0:	84040004 	addi	r16,r16,4096
     2c4:	81400017 	ldw	r5,0(r16)
		if (data & 0x00008000)					// check RVALID to see if there is new data
     2c8:	28a0000c 	andi	r2,r5,32768
     2cc:	103ffd26 	beq	r2,zero,2c4 <__alt_mem_Flash_flash_data+0xf40002c4>
		{
			data = data & 0x000000FF;			// the data is in the least significant byte
			/* echo the character */
			put_jtag (JTAG_UART_ptr, (char) data & 0xFF );
     2d0:	8009883a 	mov	r4,r16
     2d4:	29403fcc 	andi	r5,r5,255
     2d8:	2940201c 	xori	r5,r5,128
     2dc:	297fe004 	addi	r5,r5,-128
     2e0:	00002040 	call	204 <put_jtag>
     2e4:	003ff706 	br	2c4 <__alt_mem_Flash_flash_data+0xf40002c4>

000002e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     2e8:	deffff04 	addi	sp,sp,-4
     2ec:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     2f0:	00800034 	movhi	r2,0
     2f4:	10905f04 	addi	r2,r2,16764
     2f8:	00c00034 	movhi	r3,0
     2fc:	18c9e804 	addi	r3,r3,10144
     300:	18801926 	beq	r3,r2,368 <alt_load+0x80>
  {
    while( to != end )
     304:	00800034 	movhi	r2,0
     308:	10905f04 	addi	r2,r2,16764
     30c:	00c00034 	movhi	r3,0
     310:	18c9e804 	addi	r3,r3,10144
     314:	18801426 	beq	r3,r2,368 <alt_load+0x80>
     318:	00c00034 	movhi	r3,0
     31c:	18c9e904 	addi	r3,r3,10148
     320:	00800034 	movhi	r2,0
     324:	10905f04 	addi	r2,r2,16764
     328:	10c7c83a 	sub	r3,r2,r3
     32c:	1806d0ba 	srli	r3,r3,2
     330:	18c00044 	addi	r3,r3,1
     334:	18c7883a 	add	r3,r3,r3
     338:	18c7883a 	add	r3,r3,r3
     33c:	0005883a 	mov	r2,zero
     340:	01c00034 	movhi	r7,0
     344:	39c9e804 	addi	r7,r7,10144
     348:	01800034 	movhi	r6,0
     34c:	31905f04 	addi	r6,r6,16764
     350:	11c9883a 	add	r4,r2,r7
     354:	118b883a 	add	r5,r2,r6
    {
      *to++ = *from++;
     358:	29400017 	ldw	r5,0(r5)
     35c:	21400015 	stw	r5,0(r4)
     360:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     364:	10fffa1e 	bne	r2,r3,350 <__alt_mem_Flash_flash_data+0xf4000350>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     368:	00800034 	movhi	r2,0
     36c:	10800804 	addi	r2,r2,32
     370:	00c00034 	movhi	r3,0
     374:	18c00804 	addi	r3,r3,32
     378:	18801926 	beq	r3,r2,3e0 <alt_load+0xf8>
  {
    while( to != end )
     37c:	00800034 	movhi	r2,0
     380:	10807204 	addi	r2,r2,456
     384:	00c00034 	movhi	r3,0
     388:	18c00804 	addi	r3,r3,32
     38c:	18801426 	beq	r3,r2,3e0 <alt_load+0xf8>
     390:	00c00034 	movhi	r3,0
     394:	18c00904 	addi	r3,r3,36
     398:	00800034 	movhi	r2,0
     39c:	10807204 	addi	r2,r2,456
     3a0:	10c7c83a 	sub	r3,r2,r3
     3a4:	1806d0ba 	srli	r3,r3,2
     3a8:	18c00044 	addi	r3,r3,1
     3ac:	18c7883a 	add	r3,r3,r3
     3b0:	18c7883a 	add	r3,r3,r3
     3b4:	0005883a 	mov	r2,zero
     3b8:	01c00034 	movhi	r7,0
     3bc:	39c00804 	addi	r7,r7,32
     3c0:	01800034 	movhi	r6,0
     3c4:	31800804 	addi	r6,r6,32
     3c8:	11c9883a 	add	r4,r2,r7
     3cc:	118b883a 	add	r5,r2,r6
    {
      *to++ = *from++;
     3d0:	29400017 	ldw	r5,0(r5)
     3d4:	21400015 	stw	r5,0(r4)
     3d8:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     3dc:	10fffa1e 	bne	r2,r3,3c8 <__alt_mem_Flash_flash_data+0xf40003c8>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     3e0:	00800034 	movhi	r2,0
     3e4:	10897204 	addi	r2,r2,9672
     3e8:	00c00034 	movhi	r3,0
     3ec:	18c97204 	addi	r3,r3,9672
     3f0:	18801926 	beq	r3,r2,458 <alt_load+0x170>
  {
    while( to != end )
     3f4:	00800034 	movhi	r2,0
     3f8:	1089e804 	addi	r2,r2,10144
     3fc:	00c00034 	movhi	r3,0
     400:	18c97204 	addi	r3,r3,9672
     404:	18801426 	beq	r3,r2,458 <alt_load+0x170>
     408:	00c00034 	movhi	r3,0
     40c:	18c97304 	addi	r3,r3,9676
     410:	00800034 	movhi	r2,0
     414:	1089e804 	addi	r2,r2,10144
     418:	10c7c83a 	sub	r3,r2,r3
     41c:	1806d0ba 	srli	r3,r3,2
     420:	18c00044 	addi	r3,r3,1
     424:	18c7883a 	add	r3,r3,r3
     428:	18c7883a 	add	r3,r3,r3
     42c:	0005883a 	mov	r2,zero
     430:	01c00034 	movhi	r7,0
     434:	39c97204 	addi	r7,r7,9672
     438:	01800034 	movhi	r6,0
     43c:	31897204 	addi	r6,r6,9672
     440:	11c9883a 	add	r4,r2,r7
     444:	118b883a 	add	r5,r2,r6
    {
      *to++ = *from++;
     448:	29400017 	ldw	r5,0(r5)
     44c:	21400015 	stw	r5,0(r4)
     450:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     454:	10fffa1e 	bne	r2,r3,440 <__alt_mem_Flash_flash_data+0xf4000440>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     458:	00019300 	call	1930 <alt_dcache_flush_all>
  alt_icache_flush_all();
     45c:	0001a380 	call	1a38 <alt_icache_flush_all>
}
     460:	dfc00017 	ldw	ra,0(sp)
     464:	dec00104 	addi	sp,sp,4
     468:	f800283a 	ret

0000046c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     46c:	defffe04 	addi	sp,sp,-8
     470:	dfc00115 	stw	ra,4(sp)
     474:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     478:	0009883a 	mov	r4,zero
     47c:	00004bc0 	call	4bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     480:	00004dc0 	call	4dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     484:	01800034 	movhi	r6,0
     488:	31897904 	addi	r6,r6,9700
     48c:	3009883a 	mov	r4,r6
     490:	300b883a 	mov	r5,r6
     494:	0001abc0 	call	1abc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     498:	d1268417 	ldw	r4,-26096(gp)
     49c:	d1668317 	ldw	r5,-26100(gp)
     4a0:	d1a68217 	ldw	r6,-26104(gp)
     4a4:	00002240 	call	224 <main>
     4a8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     4ac:	01000044 	movi	r4,1
     4b0:	00018640 	call	1864 <close>
  exit (result);
     4b4:	8009883a 	mov	r4,r16
     4b8:	00020f80 	call	20f8 <exit>

000004bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     4bc:	deffff04 	addi	sp,sp,-4
     4c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
     4c4:	0001ee00 	call	1ee0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     4c8:	00800044 	movi	r2,1
     4cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     4d0:	dfc00017 	ldw	ra,0(sp)
     4d4:	dec00104 	addi	sp,sp,4
     4d8:	f800283a 	ret

000004dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     4dc:	defffd04 	addi	sp,sp,-12
     4e0:	dfc00215 	stw	ra,8(sp)
     4e4:	dc400115 	stw	r17,4(sp)
     4e8:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     4ec:	04000204 	movi	r16,8
     4f0:	01040034 	movhi	r4,4096
     4f4:	21080004 	addi	r4,r4,8192
     4f8:	000b883a 	mov	r5,zero
     4fc:	000d883a 	mov	r6,zero
     500:	800f883a 	mov	r7,r16
     504:	0000e280 	call	e28 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     508:	04400034 	movhi	r17,0
     50c:	8c4ad304 	addi	r17,r17,11084
     510:	8809883a 	mov	r4,r17
     514:	000b883a 	mov	r5,zero
     518:	800d883a 	mov	r6,r16
     51c:	00009c80 	call	9c8 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     520:	04000034 	movhi	r16,0
     524:	84105504 	addi	r16,r16,16724
     528:	893ff604 	addi	r4,r17,-40
     52c:	800b883a 	mov	r5,r16
     530:	000193c0 	call	193c <alt_dev_llist_insert>
     534:	01000034 	movhi	r4,0
     538:	210abd04 	addi	r4,r4,10996
     53c:	800b883a 	mov	r5,r16
     540:	000193c0 	call	193c <alt_dev_llist_insert>
     544:	01000034 	movhi	r4,0
     548:	210ab104 	addi	r4,r4,10948
     54c:	800b883a 	mov	r5,r16
     550:	000193c0 	call	193c <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     554:	04400034 	movhi	r17,0
     558:	8c4aa604 	addi	r17,r17,10904
     55c:	8809883a 	mov	r4,r17
     560:	0000e940 	call	e94 <alt_up_character_lcd_init>
     564:	8809883a 	mov	r4,r17
     568:	800b883a 	mov	r5,r16
     56c:	000193c0 	call	193c <alt_dev_llist_insert>
     570:	01000034 	movhi	r4,0
     574:	210a9b04 	addi	r4,r4,10860
     578:	800b883a 	mov	r5,r16
     57c:	000193c0 	call	193c <alt_dev_llist_insert>
     580:	01000034 	movhi	r4,0
     584:	210a9004 	addi	r4,r4,10816
     588:	800b883a 	mov	r5,r16
     58c:	000193c0 	call	193c <alt_dev_llist_insert>
     590:	01000034 	movhi	r4,0
     594:	210a8504 	addi	r4,r4,10772
     598:	800b883a 	mov	r5,r16
     59c:	000193c0 	call	193c <alt_dev_llist_insert>
     5a0:	01000034 	movhi	r4,0
     5a4:	210a7a04 	addi	r4,r4,10728
     5a8:	800b883a 	mov	r5,r16
     5ac:	000193c0 	call	193c <alt_dev_llist_insert>
     5b0:	01000034 	movhi	r4,0
     5b4:	210a6f04 	addi	r4,r4,10684
     5b8:	800b883a 	mov	r5,r16
     5bc:	000193c0 	call	193c <alt_dev_llist_insert>
     5c0:	01000034 	movhi	r4,0
     5c4:	210a6404 	addi	r4,r4,10640
     5c8:	800b883a 	mov	r5,r16
     5cc:	000193c0 	call	193c <alt_dev_llist_insert>
     5d0:	01000034 	movhi	r4,0
     5d4:	210a5904 	addi	r4,r4,10596
     5d8:	800b883a 	mov	r5,r16
     5dc:	000193c0 	call	193c <alt_dev_llist_insert>
     5e0:	01000034 	movhi	r4,0
     5e4:	210a4e04 	addi	r4,r4,10552
     5e8:	800b883a 	mov	r5,r16
     5ec:	000193c0 	call	193c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     5f0:	04400034 	movhi	r17,0
     5f4:	8c4a4004 	addi	r17,r17,10496
     5f8:	8809883a 	mov	r4,r17
     5fc:	000134c0 	call	134c <alt_up_ps2_init>
     600:	8809883a 	mov	r4,r17
     604:	800b883a 	mov	r5,r16
     608:	000193c0 	call	193c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
     60c:	04400034 	movhi	r17,0
     610:	8c4a3204 	addi	r17,r17,10440
     614:	8809883a 	mov	r4,r17
     618:	000134c0 	call	134c <alt_up_ps2_init>
     61c:	8809883a 	mov	r4,r17
     620:	800b883a 	mov	r5,r16
     624:	000193c0 	call	193c <alt_dev_llist_insert>
     628:	01000034 	movhi	r4,0
     62c:	210a2704 	addi	r4,r4,10396
     630:	800b883a 	mov	r5,r16
     634:	000193c0 	call	193c <alt_dev_llist_insert>
     638:	01000034 	movhi	r4,0
     63c:	210a1a04 	addi	r4,r4,10344
     640:	800b883a 	mov	r5,r16
     644:	000193c0 	call	193c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
     648:	00c00034 	movhi	r3,0
     64c:	18ca0804 	addi	r3,r3,10272
     650:	18800a17 	ldw	r2,40(r3)
     654:	10800104 	addi	r2,r2,4
     658:	1100000b 	ldhu	r4,0(r2)
     65c:	19000c15 	stw	r4,48(r3)
     660:	10800017 	ldw	r2,0(r2)
     664:	1004d43a 	srli	r2,r2,16
     668:	18800d15 	stw	r2,52(r3)
     66c:	00c01004 	movi	r3,64
     670:	19000636 	bltu	r3,r4,68c <alt_sys_init+0x1b0>
     674:	00c00034 	movhi	r3,0
     678:	18ca0804 	addi	r3,r3,10272
     67c:	01000fc4 	movi	r4,63
     680:	19000f15 	stw	r4,60(r3)
     684:	01000184 	movi	r4,6
     688:	19001015 	stw	r4,64(r3)
     68c:	00c00804 	movi	r3,32
     690:	18800436 	bltu	r3,r2,6a4 <alt_sys_init+0x1c8>
     694:	00c007c4 	movi	r3,31
     698:	00800034 	movhi	r2,0
     69c:	108a0804 	addi	r2,r2,10272
     6a0:	10c01115 	stw	r3,68(r2)
     6a4:	04000034 	movhi	r16,0
     6a8:	840a0804 	addi	r16,r16,10272
     6ac:	8009883a 	mov	r4,r16
     6b0:	00016440 	call	1644 <alt_up_char_buffer_init>
     6b4:	8009883a 	mov	r4,r16
     6b8:	01400034 	movhi	r5,0
     6bc:	29505504 	addi	r5,r5,16724
     6c0:	000193c0 	call	193c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
     6c4:	00c00034 	movhi	r3,0
     6c8:	18c9f304 	addi	r3,r3,10188
     6cc:	18800a17 	ldw	r2,40(r3)
     6d0:	11000017 	ldw	r4,0(r2)
     6d4:	19000b15 	stw	r4,44(r3)
     6d8:	11000117 	ldw	r4,4(r2)
     6dc:	19000c15 	stw	r4,48(r3)
     6e0:	11000204 	addi	r4,r2,8
     6e4:	2140000b 	ldhu	r5,0(r4)
     6e8:	19400f15 	stw	r5,60(r3)
     6ec:	21000017 	ldw	r4,0(r4)
     6f0:	2008d43a 	srli	r4,r4,16
     6f4:	19001015 	stw	r4,64(r3)
     6f8:	10800304 	addi	r2,r2,12
     6fc:	11000017 	ldw	r4,0(r2)
     700:	2009d07a 	srai	r4,r4,1
     704:	2100004c 	andi	r4,r4,1
     708:	19000d15 	stw	r4,52(r3)
     70c:	11000017 	ldw	r4,0(r2)
     710:	2009d13a 	srai	r4,r4,4
     714:	210003cc 	andi	r4,r4,15
     718:	19000e15 	stw	r4,56(r3)
     71c:	10c00017 	ldw	r3,0(r2)
     720:	180dd43a 	srai	r6,r3,16
     724:	180ad63a 	srli	r5,r3,24
     728:	00800044 	movi	r2,1
     72c:	2080041e 	bne	r4,r2,740 <alt_sys_init+0x264>
     730:	00800034 	movhi	r2,0
     734:	1089f304 	addi	r2,r2,10188
     738:	10001115 	stw	zero,68(r2)
     73c:	00000b06 	br	76c <alt_sys_init+0x290>
     740:	00800084 	movi	r2,2
     744:	2080051e 	bne	r4,r2,75c <alt_sys_init+0x280>
     748:	00c00044 	movi	r3,1
     74c:	00800034 	movhi	r2,0
     750:	1089f304 	addi	r2,r2,10188
     754:	10c01115 	stw	r3,68(r2)
     758:	00000406 	br	76c <alt_sys_init+0x290>
     75c:	00c00084 	movi	r3,2
     760:	00800034 	movhi	r2,0
     764:	1089f304 	addi	r2,r2,10188
     768:	10c01115 	stw	r3,68(r2)
     76c:	31803fcc 	andi	r6,r6,255
     770:	01000034 	movhi	r4,0
     774:	2109f304 	addi	r4,r4,10188
     778:	00c00804 	movi	r3,32
     77c:	198fc83a 	sub	r7,r3,r6
     780:	00bfffc4 	movi	r2,-1
     784:	11ced83a 	srl	r7,r2,r7
     788:	21c01215 	stw	r7,72(r4)
     78c:	21c01117 	ldw	r7,68(r4)
     790:	31cd883a 	add	r6,r6,r7
     794:	21801315 	stw	r6,76(r4)
     798:	1947c83a 	sub	r3,r3,r5
     79c:	10c4d83a 	srl	r2,r2,r3
     7a0:	20801415 	stw	r2,80(r4)
     7a4:	04000034 	movhi	r16,0
     7a8:	84105504 	addi	r16,r16,16724
     7ac:	800b883a 	mov	r5,r16
     7b0:	000193c0 	call	193c <alt_dev_llist_insert>
     7b4:	01000034 	movhi	r4,0
     7b8:	2109e804 	addi	r4,r4,10144
     7bc:	800b883a 	mov	r5,r16
     7c0:	000193c0 	call	193c <alt_dev_llist_insert>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
}
     7c4:	dfc00217 	ldw	ra,8(sp)
     7c8:	dc400117 	ldw	r17,4(sp)
     7cc:	dc000017 	ldw	r16,0(sp)
     7d0:	dec00304 	addi	sp,sp,12
     7d4:	f800283a 	ret

000007d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     7d8:	deffff04 	addi	sp,sp,-4
     7dc:	dfc00015 	stw	ra,0(sp)
     7e0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     7e4:	21000017 	ldw	r4,0(r4)
     7e8:	21000a04 	addi	r4,r4,40
     7ec:	11c00217 	ldw	r7,8(r2)
     7f0:	0000b040 	call	b04 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     7f4:	dfc00017 	ldw	ra,0(sp)
     7f8:	dec00104 	addi	sp,sp,4
     7fc:	f800283a 	ret

00000800 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     800:	deffff04 	addi	sp,sp,-4
     804:	dfc00015 	stw	ra,0(sp)
     808:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     80c:	21000017 	ldw	r4,0(r4)
     810:	21000a04 	addi	r4,r4,40
     814:	11c00217 	ldw	r7,8(r2)
     818:	0000c540 	call	c54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     81c:	dfc00017 	ldw	ra,0(sp)
     820:	dec00104 	addi	sp,sp,4
     824:	f800283a 	ret

00000828 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     828:	deffff04 	addi	sp,sp,-4
     82c:	dfc00015 	stw	ra,0(sp)
     830:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     834:	21000017 	ldw	r4,0(r4)
     838:	21000a04 	addi	r4,r4,40
     83c:	11400217 	ldw	r5,8(r2)
     840:	0000a400 	call	a40 <altera_avalon_jtag_uart_close>
}
     844:	dfc00017 	ldw	ra,0(sp)
     848:	dec00104 	addi	sp,sp,4
     84c:	f800283a 	ret

00000850 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     850:	deffff04 	addi	sp,sp,-4
     854:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     858:	21000017 	ldw	r4,0(r4)
     85c:	21000a04 	addi	r4,r4,40
     860:	0000a7c0 	call	a7c <altera_avalon_jtag_uart_ioctl>
}
     864:	dfc00017 	ldw	ra,0(sp)
     868:	dec00104 	addi	sp,sp,4
     86c:	f800283a 	ret

00000870 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     870:	20800017 	ldw	r2,0(r4)
     874:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     878:	1081000c 	andi	r2,r2,1024
     87c:	10000626 	beq	r2,zero,898 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     880:	20c00017 	ldw	r3,0(r4)
     884:	20800817 	ldw	r2,32(r4)
     888:	10810014 	ori	r2,r2,1024
     88c:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
     890:	20000915 	stw	zero,36(r4)
     894:	00000606 	br	8b0 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     898:	20800917 	ldw	r2,36(r4)
     89c:	00e00034 	movhi	r3,32768
     8a0:	18ffff04 	addi	r3,r3,-4
     8a4:	18800236 	bltu	r3,r2,8b0 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
     8a8:	10800044 	addi	r2,r2,1
     8ac:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     8b0:	00800034 	movhi	r2,0
     8b4:	1096db04 	addi	r2,r2,23404
     8b8:	10800017 	ldw	r2,0(r2)
     8bc:	f800283a 	ret

000008c0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     8c0:	21800017 	ldw	r6,0(r4)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     8c4:	32000104 	addi	r8,r6,4
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     8c8:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     8cc:	02ffff44 	movi	r11,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     8d0:	4013883a 	mov	r9,r8
     8d4:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     8d8:	3880c00c 	andi	r2,r7,768
     8dc:	10003926 	beq	r2,zero,9c4 <altera_avalon_jtag_uart_irq+0x104>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     8e0:	3880400c 	andi	r2,r7,256
     8e4:	10001c26 	beq	r2,zero,958 <altera_avalon_jtag_uart_irq+0x98>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     8e8:	20800a17 	ldw	r2,40(r4)
     8ec:	10800044 	addi	r2,r2,1
     8f0:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
     8f4:	20c00b17 	ldw	r3,44(r4)
     8f8:	18801226 	beq	r3,r2,944 <altera_avalon_jtag_uart_irq+0x84>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     8fc:	30800037 	ldwio	r2,0(r6)
     900:	100b883a 	mov	r5,r2
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     904:	10e0000c 	andi	r3,r2,32768
     908:	18000c26 	beq	r3,zero,93c <altera_avalon_jtag_uart_irq+0x7c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     90c:	20c00a17 	ldw	r3,40(r4)
     910:	20c7883a 	add	r3,r4,r3
     914:	18800e05 	stb	r2,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     918:	20800a17 	ldw	r2,40(r4)
     91c:	10800044 	addi	r2,r2,1
     920:	1081ffcc 	andi	r2,r2,2047
     924:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     928:	20800a17 	ldw	r2,40(r4)
     92c:	10800044 	addi	r2,r2,1
     930:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
     934:	20c00b17 	ldw	r3,44(r4)
     938:	18bff01e 	bne	r3,r2,8fc <__alt_mem_Flash_flash_data+0xf40008fc>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     93c:	297fffec 	andhi	r5,r5,65535
     940:	28000526 	beq	r5,zero,958 <altera_avalon_jtag_uart_irq+0x98>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     944:	20800817 	ldw	r2,32(r4)
     948:	1284703a 	and	r2,r2,r10
     94c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     950:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     954:	40800037 	ldwio	r2,0(r8)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     958:	3880800c 	andi	r2,r7,512
     95c:	103fdc26 	beq	r2,zero,8d0 <__alt_mem_Flash_flash_data+0xf40008d0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     960:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
     964:	383fda26 	beq	r7,zero,8d0 <__alt_mem_Flash_flash_data+0xf40008d0>
     968:	20c00d17 	ldw	r3,52(r4)
     96c:	20800c17 	ldw	r2,48(r4)
     970:	18800d26 	beq	r3,r2,9a8 <altera_avalon_jtag_uart_irq+0xe8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     974:	20800d17 	ldw	r2,52(r4)
     978:	2085883a 	add	r2,r4,r2
     97c:	10820e07 	ldb	r2,2104(r2)
     980:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     984:	20800d17 	ldw	r2,52(r4)
     988:	10800044 	addi	r2,r2,1
     98c:	1081ffcc 	andi	r2,r2,2047
     990:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     994:	39ffffc4 	addi	r7,r7,-1
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     998:	383fcd26 	beq	r7,zero,8d0 <__alt_mem_Flash_flash_data+0xf40008d0>
     99c:	20c00d17 	ldw	r3,52(r4)
     9a0:	20800c17 	ldw	r2,48(r4)
     9a4:	18bff31e 	bne	r3,r2,974 <__alt_mem_Flash_flash_data+0xf4000974>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     9a8:	20800817 	ldw	r2,32(r4)
     9ac:	12c4703a 	and	r2,r2,r11
     9b0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     9b4:	20c00017 	ldw	r3,0(r4)
     9b8:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     9bc:	48800037 	ldwio	r2,0(r9)
     9c0:	003fc306 	br	8d0 <__alt_mem_Flash_flash_data+0xf40008d0>
     9c4:	f800283a 	ret

000009c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     9c8:	defffe04 	addi	sp,sp,-8
     9cc:	dfc00115 	stw	ra,4(sp)
     9d0:	dc000015 	stw	r16,0(sp)
     9d4:	2021883a 	mov	r16,r4
     9d8:	3009883a 	mov	r4,r6
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     9dc:	00800044 	movi	r2,1
     9e0:	80800815 	stw	r2,32(r16)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     9e4:	80c00017 	ldw	r3,0(r16)
     9e8:	18800135 	stwio	r2,4(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     9ec:	800b883a 	mov	r5,r16
     9f0:	01800034 	movhi	r6,0
     9f4:	31823004 	addi	r6,r6,2240
     9f8:	0001b540 	call	1b54 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     9fc:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     a00:	81000204 	addi	r4,r16,8
     a04:	00800034 	movhi	r2,0
     a08:	1096db04 	addi	r2,r2,23404
     a0c:	11400017 	ldw	r5,0(r2)
     a10:	01800034 	movhi	r6,0
     a14:	31821c04 	addi	r6,r6,2160
     a18:	800f883a 	mov	r7,r16
     a1c:	00017d00 	call	17d0 <alt_alarm_start>
     a20:	1000030e 	bge	r2,zero,a30 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     a24:	00a00034 	movhi	r2,32768
     a28:	10bfffc4 	addi	r2,r2,-1
     a2c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     a30:	dfc00117 	ldw	ra,4(sp)
     a34:	dc000017 	ldw	r16,0(sp)
     a38:	dec00204 	addi	sp,sp,8
     a3c:	f800283a 	ret

00000a40 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a40:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
     a44:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a48:	00000106 	br	a50 <altera_avalon_jtag_uart_close+0x10>
    if (flags & O_NONBLOCK) {
     a4c:	2800071e 	bne	r5,zero,a6c <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a50:	20800d17 	ldw	r2,52(r4)
     a54:	11800726 	beq	r2,r6,a74 <altera_avalon_jtag_uart_close+0x34>
     a58:	20c00917 	ldw	r3,36(r4)
     a5c:	20800117 	ldw	r2,4(r4)
     a60:	18bffa36 	bltu	r3,r2,a4c <__alt_mem_Flash_flash_data+0xf4000a4c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     a64:	0005883a 	mov	r2,zero
     a68:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
     a6c:	00bffd44 	movi	r2,-11
     a70:	f800283a 	ret
    }
  }

  return 0;
     a74:	0005883a 	mov	r2,zero
}
     a78:	f800283a 	ret

00000a7c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
     a7c:	009a8044 	movi	r2,27137
     a80:	28800326 	beq	r5,r2,a90 <altera_avalon_jtag_uart_ioctl+0x14>
     a84:	009a8084 	movi	r2,27138
     a88:	28800f26 	beq	r5,r2,ac8 <altera_avalon_jtag_uart_ioctl+0x4c>
     a8c:	00001706 	br	aec <altera_avalon_jtag_uart_ioctl+0x70>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     a90:	20c00117 	ldw	r3,4(r4)
     a94:	00a00034 	movhi	r2,32768
     a98:	10bfffc4 	addi	r2,r2,-1
     a9c:	18801526 	beq	r3,r2,af4 <altera_avalon_jtag_uart_ioctl+0x78>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     aa0:	30800017 	ldw	r2,0(r6)
     aa4:	10ffff84 	addi	r3,r2,-2
     aa8:	01600034 	movhi	r5,32768
     aac:	297fff04 	addi	r5,r5,-4
     ab0:	28c0022e 	bgeu	r5,r3,abc <altera_avalon_jtag_uart_ioctl+0x40>
     ab4:	00a00034 	movhi	r2,32768
     ab8:	10bfff84 	addi	r2,r2,-2
     abc:	20800115 	stw	r2,4(r4)
      rc = 0;
     ac0:	0005883a 	mov	r2,zero
     ac4:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     ac8:	20c00117 	ldw	r3,4(r4)
     acc:	00a00034 	movhi	r2,32768
     ad0:	10bfffc4 	addi	r2,r2,-1
     ad4:	18800926 	beq	r3,r2,afc <altera_avalon_jtag_uart_ioctl+0x80>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     ad8:	20800917 	ldw	r2,36(r4)
     adc:	10c5803a 	cmpltu	r2,r2,r3
     ae0:	30800015 	stw	r2,0(r6)
      rc = 0;
     ae4:	0005883a 	mov	r2,zero
     ae8:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
     aec:	00bff9c4 	movi	r2,-25
     af0:	f800283a 	ret
     af4:	00bff9c4 	movi	r2,-25
     af8:	f800283a 	ret
     afc:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
     b00:	f800283a 	ret

00000b04 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     b04:	0180430e 	bge	zero,r6,c14 <altera_avalon_jtag_uart_read+0x110>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     b08:	defff604 	addi	sp,sp,-40
     b0c:	dfc00915 	stw	ra,36(sp)
     b10:	df000815 	stw	fp,32(sp)
     b14:	ddc00715 	stw	r23,28(sp)
     b18:	dd800615 	stw	r22,24(sp)
     b1c:	dd400515 	stw	r21,20(sp)
     b20:	dd000415 	stw	r20,16(sp)
     b24:	dcc00315 	stw	r19,12(sp)
     b28:	dc800215 	stw	r18,8(sp)
     b2c:	dc400115 	stw	r17,4(sp)
     b30:	dc000015 	stw	r16,0(sp)
     b34:	2025883a 	mov	r18,r4
     b38:	282d883a 	mov	r22,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     b3c:	05420004 	movi	r21,2048
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     b40:	3dd0000c 	andi	r23,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     b44:	b029883a 	mov	r20,r22
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     b48:	94c00a17 	ldw	r19,40(r18)
      out = sp->rx_out;
     b4c:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
     b50:	9c400236 	bltu	r19,r17,b5c <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
     b54:	9c61c83a 	sub	r16,r19,r17
     b58:	00000106 	br	b60 <altera_avalon_jtag_uart_read+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     b5c:	ac61c83a 	sub	r16,r21,r17

      if (n == 0)
     b60:	80000e26 	beq	r16,zero,b9c <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
     b64:	3039883a 	mov	fp,r6
     b68:	3400012e 	bgeu	r6,r16,b70 <altera_avalon_jtag_uart_read+0x6c>
     b6c:	3021883a 	mov	r16,r6
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     b70:	89400e04 	addi	r5,r17,56
     b74:	a009883a 	mov	r4,r20
     b78:	914b883a 	add	r5,r18,r5
     b7c:	800d883a 	mov	r6,r16
     b80:	00021ac0 	call	21ac <memcpy>
      ptr   += n;
     b84:	a429883a 	add	r20,r20,r16
      space -= n;
     b88:	e40dc83a 	sub	r6,fp,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     b8c:	8461883a 	add	r16,r16,r17
     b90:	8401ffcc 	andi	r16,r16,2047
     b94:	94000b15 	stw	r16,44(r18)
    }
    while (space > 0);
     b98:	01bfeb16 	blt	zero,r6,b48 <__alt_mem_Flash_flash_data+0xf4000b48>

    /* If we read any data then return it */
    if (ptr != buffer)
     b9c:	a580111e 	bne	r20,r22,be4 <altera_avalon_jtag_uart_read+0xe0>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     ba0:	b8000a1e 	bne	r23,zero,bcc <altera_avalon_jtag_uart_read+0xc8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     ba4:	90800a17 	ldw	r2,40(r18)
     ba8:	14c0031e 	bne	r2,r19,bb8 <altera_avalon_jtag_uart_read+0xb4>
     bac:	90c00917 	ldw	r3,36(r18)
     bb0:	90800117 	ldw	r2,4(r18)
     bb4:	18bffb36 	bltu	r3,r2,ba4 <__alt_mem_Flash_flash_data+0xf4000ba4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     bb8:	90800a17 	ldw	r2,40(r18)
     bbc:	14c00526 	beq	r2,r19,bd4 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     bc0:	01bfe016 	blt	zero,r6,b44 <__alt_mem_Flash_flash_data+0xf4000b44>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
     bc4:	00bffec4 	movi	r2,-5
     bc8:	00001606 	br	c24 <altera_avalon_jtag_uart_read+0x120>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
     bcc:	00bffd44 	movi	r2,-11
     bd0:	00001406 	br	c24 <altera_avalon_jtag_uart_read+0x120>
  else
    return -EIO;
     bd4:	00bffec4 	movi	r2,-5
     bd8:	00001206 	br	c24 <altera_avalon_jtag_uart_read+0x120>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
     bdc:	00bffd44 	movi	r2,-11
     be0:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     be4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     be8:	00bfff84 	movi	r2,-2
     bec:	1884703a 	and	r2,r3,r2
     bf0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     bf4:	90800817 	ldw	r2,32(r18)
     bf8:	10800054 	ori	r2,r2,1
     bfc:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     c00:	91000017 	ldw	r4,0(r18)
     c04:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     c08:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
     c0c:	a585c83a 	sub	r2,r20,r22
     c10:	00000406 	br	c24 <altera_avalon_jtag_uart_read+0x120>
  else if (flags & O_NONBLOCK)
     c14:	39d0000c 	andi	r7,r7,16384
     c18:	383ff01e 	bne	r7,zero,bdc <__alt_mem_Flash_flash_data+0xf4000bdc>
    return -EWOULDBLOCK;
  else
    return -EIO;
     c1c:	00bffec4 	movi	r2,-5
     c20:	f800283a 	ret
}
     c24:	dfc00917 	ldw	ra,36(sp)
     c28:	df000817 	ldw	fp,32(sp)
     c2c:	ddc00717 	ldw	r23,28(sp)
     c30:	dd800617 	ldw	r22,24(sp)
     c34:	dd400517 	ldw	r21,20(sp)
     c38:	dd000417 	ldw	r20,16(sp)
     c3c:	dcc00317 	ldw	r19,12(sp)
     c40:	dc800217 	ldw	r18,8(sp)
     c44:	dc400117 	ldw	r17,4(sp)
     c48:	dc000017 	ldw	r16,0(sp)
     c4c:	dec00a04 	addi	sp,sp,40
     c50:	f800283a 	ret

00000c54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     c54:	defff504 	addi	sp,sp,-44
     c58:	dfc00a15 	stw	ra,40(sp)
     c5c:	df000915 	stw	fp,36(sp)
     c60:	ddc00815 	stw	r23,32(sp)
     c64:	dd800715 	stw	r22,28(sp)
     c68:	dd400615 	stw	r21,24(sp)
     c6c:	dd000515 	stw	r20,20(sp)
     c70:	dcc00415 	stw	r19,16(sp)
     c74:	dc800315 	stw	r18,12(sp)
     c78:	dc400215 	stw	r17,8(sp)
     c7c:	dc000115 	stw	r16,4(sp)
     c80:	2021883a 	mov	r16,r4
     c84:	282b883a 	mov	r21,r5
     c88:	d9c00015 	stw	r7,0(sp)
     c8c:	2827883a 	mov	r19,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     c90:	0701ffc4 	movi	fp,2047
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     c94:	05ffff84 	movi	r23,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
     c98:	3d90000c 	andi	r22,r7,16384
     c9c:	00001906 	br	d04 <altera_avalon_jtag_uart_write+0xb0>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     ca0:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
     ca4:	81000d17 	ldw	r4,52(r16)

      if (in < out)
     ca8:	9100032e 	bgeu	r18,r4,cb8 <altera_avalon_jtag_uart_write+0x64>
     cac:	247fffc4 	addi	r17,r4,-1
        n = out - 1 - in;
     cb0:	8ca3c83a 	sub	r17,r17,r18
     cb4:	00000506 	br	ccc <altera_avalon_jtag_uart_write+0x78>
      else if (out > 0)
     cb8:	20000326 	beq	r4,zero,cc8 <altera_avalon_jtag_uart_write+0x74>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     cbc:	00820004 	movi	r2,2048
     cc0:	14a3c83a 	sub	r17,r2,r18
     cc4:	00000106 	br	ccc <altera_avalon_jtag_uart_write+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     cc8:	e4a3c83a 	sub	r17,fp,r18

      if (n == 0)
     ccc:	88002b26 	beq	r17,zero,d7c <altera_avalon_jtag_uart_write+0x128>
        break;

      if (n > count)
     cd0:	3029883a 	mov	r20,r6
     cd4:	3440012e 	bgeu	r6,r17,cdc <altera_avalon_jtag_uart_write+0x88>
     cd8:	3023883a 	mov	r17,r6
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
     cdc:	91020e04 	addi	r4,r18,2104
     ce0:	8109883a 	add	r4,r16,r4
     ce4:	980b883a 	mov	r5,r19
     ce8:	880d883a 	mov	r6,r17
     cec:	00021ac0 	call	21ac <memcpy>
      ptr   += n;
     cf0:	9c67883a 	add	r19,r19,r17
      count -= n;
     cf4:	a44dc83a 	sub	r6,r20,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     cf8:	8ca3883a 	add	r17,r17,r18
     cfc:	8c41ffcc 	andi	r17,r17,2047
     d00:	84400c15 	stw	r17,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     d04:	01bfe616 	blt	zero,r6,ca0 <__alt_mem_Flash_flash_data+0xf4000ca0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     d08:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d0c:	00bfff84 	movi	r2,-2
     d10:	1884703a 	and	r2,r3,r2
     d14:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     d18:	80800817 	ldw	r2,32(r16)
     d1c:	10800094 	ori	r2,r2,2
     d20:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     d24:	81000017 	ldw	r4,0(r16)
     d28:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d2c:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     d30:	9d40091e 	bne	r19,r21,d58 <altera_avalon_jtag_uart_write+0x104>
     d34:	00000a06 	br	d60 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     d38:	80800d17 	ldw	r2,52(r16)
     d3c:	2080031e 	bne	r4,r2,d4c <altera_avalon_jtag_uart_write+0xf8>
     d40:	80c00917 	ldw	r3,36(r16)
     d44:	80800117 	ldw	r2,4(r16)
     d48:	18bffb36 	bltu	r3,r2,d38 <__alt_mem_Flash_flash_data+0xf4000d38>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
     d4c:	80800917 	ldw	r2,36(r16)
     d50:	103fec26 	beq	r2,zero,d04 <__alt_mem_Flash_flash_data+0xf4000d04>
     d54:	00001406 	br	da8 <altera_avalon_jtag_uart_write+0x154>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
     d58:	9d45c83a 	sub	r2,r19,r21
     d5c:	00001706 	br	dbc <altera_avalon_jtag_uart_write+0x168>
  else if (flags & O_NONBLOCK)
     d60:	d8c00017 	ldw	r3,0(sp)
     d64:	1890000c 	andi	r2,r3,16384
     d68:	1000021e 	bne	r2,zero,d74 <altera_avalon_jtag_uart_write+0x120>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
     d6c:	00bffec4 	movi	r2,-5
     d70:	00001206 	br	dbc <altera_avalon_jtag_uart_write+0x168>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
     d74:	00bffd44 	movi	r2,-11
     d78:	00001006 	br	dbc <altera_avalon_jtag_uart_write+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     d7c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d80:	1dc4703a 	and	r2,r3,r23
     d84:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     d88:	80800817 	ldw	r2,32(r16)
     d8c:	10800094 	ori	r2,r2,2
     d90:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     d94:	81400017 	ldw	r5,0(r16)
     d98:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d9c:	1801703a 	wrctl	status,r3
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
     da0:	b03fe526 	beq	r22,zero,d38 <__alt_mem_Flash_flash_data+0xf4000d38>
     da4:	00000306 	br	db4 <altera_avalon_jtag_uart_write+0x160>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     da8:	9d7feb1e 	bne	r19,r21,d58 <__alt_mem_Flash_flash_data+0xf4000d58>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
     dac:	00bffec4 	movi	r2,-5
     db0:	00000206 	br	dbc <altera_avalon_jtag_uart_write+0x168>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     db4:	9d7fe81e 	bne	r19,r21,d58 <__alt_mem_Flash_flash_data+0xf4000d58>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
     db8:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
     dbc:	dfc00a17 	ldw	ra,40(sp)
     dc0:	df000917 	ldw	fp,36(sp)
     dc4:	ddc00817 	ldw	r23,32(sp)
     dc8:	dd800717 	ldw	r22,28(sp)
     dcc:	dd400617 	ldw	r21,24(sp)
     dd0:	dd000517 	ldw	r20,20(sp)
     dd4:	dcc00417 	ldw	r19,16(sp)
     dd8:	dc800317 	ldw	r18,12(sp)
     ddc:	dc400217 	ldw	r17,8(sp)
     de0:	dc000117 	ldw	r16,4(sp)
     de4:	dec00b04 	addi	sp,sp,44
     de8:	f800283a 	ret

00000dec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
     dec:	defffe04 	addi	sp,sp,-8
     df0:	dfc00115 	stw	ra,4(sp)
     df4:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
     df8:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
     dfc:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     e00:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e04:	00bfff84 	movi	r2,-2
     e08:	8084703a 	and	r2,r16,r2
     e0c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
     e10:	0001e140 	call	1e14 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     e14:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
     e18:	dfc00117 	ldw	ra,4(sp)
     e1c:	dc000017 	ldw	r16,0(sp)
     e20:	dec00204 	addi	sp,sp,8
     e24:	f800283a 	ret

00000e28 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
     e28:	deffff04 	addi	sp,sp,-4
     e2c:	dfc00015 	stw	ra,0(sp)
     e30:	200b883a 	mov	r5,r4
     e34:	3009883a 	mov	r4,r6
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     e38:	00800034 	movhi	r2,0
     e3c:	1096db04 	addi	r2,r2,23404
     e40:	10800017 	ldw	r2,0(r2)
     e44:	1000031e 	bne	r2,zero,e54 <alt_avalon_timer_sc_init+0x2c>
  {
    _alt_tick_rate = nticks;
     e48:	00800034 	movhi	r2,0
     e4c:	1096db04 	addi	r2,r2,23404
     e50:	11c00015 	stw	r7,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
     e54:	008001c4 	movi	r2,7
     e58:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
     e5c:	01800034 	movhi	r6,0
     e60:	31837b04 	addi	r6,r6,3564
     e64:	0001b540 	call	1b54 <alt_irq_register>
#endif  
}
     e68:	dfc00017 	ldw	ra,0(sp)
     e6c:	dec00104 	addi	sp,sp,4
     e70:	f800283a 	ret

00000e74 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
     e74:	28000126 	beq	r5,zero,e7c <get_DDRAM_addr+0x8>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
     e78:	21001014 	ori	r4,r4,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
     e7c:	00bfe004 	movi	r2,-128
     e80:	1104b03a 	or	r2,r2,r4
     e84:	f800283a 	ret

00000e88 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
     e88:	20800a17 	ldw	r2,40(r4)
     e8c:	11400025 	stbio	r5,0(r2)
     e90:	f800283a 	ret

00000e94 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
     e94:	20800a17 	ldw	r2,40(r4)
     e98:	00c00044 	movi	r3,1
     e9c:	10c00025 	stbio	r3,0(r2)
     ea0:	f800283a 	ret

00000ea4 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
     ea4:	deffff04 	addi	sp,sp,-4
     ea8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
     eac:	01400034 	movhi	r5,0
     eb0:	29505504 	addi	r5,r5,16724
     eb4:	00019bc0 	call	19bc <alt_find_dev>

  return dev;
}
     eb8:	dfc00017 	ldw	ra,0(sp)
     ebc:	dec00104 	addi	sp,sp,4
     ec0:	f800283a 	ret

00000ec4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
     ec4:	30000726 	beq	r6,zero,ee4 <alt_up_character_lcd_write+0x20>
     ec8:	2805883a 	mov	r2,r5
     ecc:	298b883a 	add	r5,r5,r6
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
     ed0:	20c00a17 	ldw	r3,40(r4)
     ed4:	11c00007 	ldb	r7,0(r2)
     ed8:	19c00065 	stbio	r7,1(r3)
     edc:	10800044 	addi	r2,r2,1
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
     ee0:	117ffb1e 	bne	r2,r5,ed0 <__alt_mem_Flash_flash_data+0xf4000ed0>
     ee4:	f800283a 	ret

00000ee8 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
     ee8:	28800003 	ldbu	r2,0(r5)
     eec:	10c03fcc 	andi	r3,r2,255
     ef0:	18c0201c 	xori	r3,r3,128
     ef4:	18ffe004 	addi	r3,r3,-128
     ef8:	18000826 	beq	r3,zero,f1c <alt_up_character_lcd_string+0x34>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
     efc:	20c00a17 	ldw	r3,40(r4)
     f00:	18800065 	stbio	r2,1(r3)
		++ptr;
     f04:	29400044 	addi	r5,r5,1
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
     f08:	28800003 	ldbu	r2,0(r5)
     f0c:	10c03fcc 	andi	r3,r2,255
     f10:	18c0201c 	xori	r3,r3,128
     f14:	18ffe004 	addi	r3,r3,-128
     f18:	183ff81e 	bne	r3,zero,efc <__alt_mem_Flash_flash_data+0xf4000efc>
     f1c:	f800283a 	ret

00000f20 <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
     f20:	deffff04 	addi	sp,sp,-4
     f24:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
     f28:	21000017 	ldw	r4,0(r4)
     f2c:	0000ec40 	call	ec4 <alt_up_character_lcd_write>
	return 0;
}
     f30:	0005883a 	mov	r2,zero
     f34:	dfc00017 	ldw	ra,0(sp)
     f38:	dec00104 	addi	sp,sp,4
     f3c:	f800283a 	ret

00000f40 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
     f40:	008009c4 	movi	r2,39
     f44:	11400a36 	bltu	r2,r5,f70 <alt_up_character_lcd_set_cursor_pos+0x30>
     f48:	00800044 	movi	r2,1
     f4c:	11800a36 	bltu	r2,r6,f78 <alt_up_character_lcd_set_cursor_pos+0x38>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
     f50:	30000126 	beq	r6,zero,f58 <alt_up_character_lcd_set_cursor_pos+0x18>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
     f54:	29401014 	ori	r5,r5,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
     f58:	00bfe004 	movi	r2,-128
     f5c:	288ab03a 	or	r5,r5,r2
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
     f60:	20800a17 	ldw	r2,40(r4)
     f64:	11400025 	stbio	r5,0(r2)
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
     f68:	0005883a 	mov	r2,zero
     f6c:	f800283a 	ret
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
		// invalid argument
		return -1;
     f70:	00bfffc4 	movi	r2,-1
     f74:	f800283a 	ret
     f78:	00bfffc4 	movi	r2,-1
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}
     f7c:	f800283a 	ret

00000f80 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
     f80:	28000f26 	beq	r5,zero,fc0 <alt_up_character_lcd_shift_cursor+0x40>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
     f84:	01400216 	blt	zero,r5,f90 <alt_up_character_lcd_shift_cursor+0x10>
     f88:	01800404 	movi	r6,16
     f8c:	00000106 	br	f94 <alt_up_character_lcd_shift_cursor+0x14>
     f90:	01800504 	movi	r6,20
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
     f94:	2807883a 	mov	r3,r5
     f98:	2800010e 	bge	r5,zero,fa0 <alt_up_character_lcd_shift_cursor+0x20>
     f9c:	0147c83a 	sub	r3,zero,r5
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
     fa0:	18803fcc 	andi	r2,r3,255
     fa4:	10000626 	beq	r2,zero,fc0 <alt_up_character_lcd_shift_cursor+0x40>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
     fa8:	20800a17 	ldw	r2,40(r4)
     fac:	11800025 	stbio	r6,0(r2)
     fb0:	18bfffc4 	addi	r2,r3,-1
     fb4:	1007883a 	mov	r3,r2
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
     fb8:	10803fcc 	andi	r2,r2,255
     fbc:	103ffa1e 	bne	r2,zero,fa8 <__alt_mem_Flash_flash_data+0xf4000fa8>
     fc0:	f800283a 	ret

00000fc4 <alt_up_character_lcd_shift_display>:
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
     fc4:	28000f26 	beq	r5,zero,1004 <alt_up_character_lcd_shift_display+0x40>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
     fc8:	01400216 	blt	zero,r5,fd4 <alt_up_character_lcd_shift_display+0x10>
     fcc:	01800604 	movi	r6,24
     fd0:	00000106 	br	fd8 <alt_up_character_lcd_shift_display+0x14>
     fd4:	01800704 	movi	r6,28
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
     fd8:	2807883a 	mov	r3,r5
     fdc:	2800010e 	bge	r5,zero,fe4 <alt_up_character_lcd_shift_display+0x20>
     fe0:	0147c83a 	sub	r3,zero,r5
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
     fe4:	18803fcc 	andi	r2,r3,255
     fe8:	10000626 	beq	r2,zero,1004 <alt_up_character_lcd_shift_display+0x40>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
     fec:	20800a17 	ldw	r2,40(r4)
     ff0:	11800025 	stbio	r6,0(r2)
     ff4:	18bfffc4 	addi	r2,r3,-1
     ff8:	1007883a 	mov	r3,r2
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
     ffc:	10803fcc 	andi	r2,r2,255
    1000:	103ffa1e 	bne	r2,zero,fec <__alt_mem_Flash_flash_data+0xf4000fec>
    1004:	f800283a 	ret

00001008 <alt_up_character_lcd_erase_pos>:
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    1008:	008009c4 	movi	r2,39
    100c:	11400d36 	bltu	r2,r5,1044 <alt_up_character_lcd_erase_pos+0x3c>
    1010:	00800044 	movi	r2,1
    1014:	11800d36 	bltu	r2,r6,104c <alt_up_character_lcd_erase_pos+0x44>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    1018:	30000126 	beq	r6,zero,1020 <alt_up_character_lcd_erase_pos+0x18>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    101c:	29401014 	ori	r5,r5,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    1020:	00bfe004 	movi	r2,-128
    1024:	288ab03a 	or	r5,r5,r2
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1028:	20800a17 	ldw	r2,40(r4)
    102c:	11400025 	stbio	r5,0(r2)
	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    1030:	20800a17 	ldw	r2,40(r4)
    1034:	00c00084 	movi	r3,2
    1038:	10c00065 	stbio	r3,1(r2)
	return 0;
    103c:	0005883a 	mov	r2,zero
    1040:	f800283a 	ret

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
		return -1;
    1044:	00bfffc4 	movi	r2,-1
    1048:	f800283a 	ret
    104c:	00bfffc4 	movi	r2,-1
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}
    1050:	f800283a 	ret

00001054 <alt_up_character_lcd_cursor_off>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1054:	20800a17 	ldw	r2,40(r4)
    1058:	00c00304 	movi	r3,12
    105c:	10c00025 	stbio	r3,0(r2)
    1060:	f800283a 	ret

00001064 <alt_up_character_lcd_cursor_blink_on>:
    1064:	20800a17 	ldw	r2,40(r4)
    1068:	00c003c4 	movi	r3,15
    106c:	10c00025 	stbio	r3,0(r2)
    1070:	f800283a 	ret

00001074 <alt_up_irda_enable_read_interrupt>:


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1074:	20800a17 	ldw	r2,40(r4)
    1078:	10800104 	addi	r2,r2,4
    107c:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    1080:	18c00054 	ori	r3,r3,1
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    1084:	10c00035 	stwio	r3,0(r2)
    1088:	f800283a 	ret

0000108c <alt_up_irda_disable_read_interrupt>:
}

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    108c:	20800a17 	ldw	r2,40(r4)
    1090:	10800104 	addi	r2,r2,4
    1094:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    1098:	00ffff84 	movi	r3,-2
    109c:	20c6703a 	and	r3,r4,r3
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    10a0:	10c00035 	stwio	r3,0(r2)
    10a4:	f800283a 	ret

000010a8 <alt_up_irda_get_used_space_in_read_FIFO>:
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    10a8:	20800a17 	ldw	r2,40(r4)
    10ac:	108000ab 	ldhuio	r2,2(r2)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
}
    10b0:	10bfffcc 	andi	r2,r2,65535
    10b4:	f800283a 	ret

000010b8 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    10b8:	20800a17 	ldw	r2,40(r4)
    10bc:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
}
    10c0:	1004d43a 	srli	r2,r2,16
    10c4:	f800283a 	ret

000010c8 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    10c8:	2100800c 	andi	r4,r4,512
	return (parity_error ? -1 : 0);
    10cc:	2004c03a 	cmpne	r2,r4,zero
}
    10d0:	0085c83a 	sub	r2,zero,r2
    10d4:	f800283a 	ret

000010d8 <alt_up_irda_write_data>:
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    10d8:	29403fcc 	andi	r5,r5,255
    10dc:	20800a17 	ldw	r2,40(r4)
    10e0:	11400035 	stwio	r5,0(r2)
	return 0;
}
    10e4:	0005883a 	mov	r2,zero
    10e8:	f800283a 	ret

000010ec <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    10ec:	defffd04 	addi	sp,sp,-12
    10f0:	dfc00215 	stw	ra,8(sp)
    10f4:	dc400115 	stw	r17,4(sp)
    10f8:	dc000015 	stw	r16,0(sp)
    10fc:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    1100:	20800a17 	ldw	r2,40(r4)
    1104:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    1108:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_irda_check_parity(data_reg);
    110c:	8009883a 	mov	r4,r16
    1110:	00010c80 	call	10c8 <alt_up_irda_check_parity>
    1114:	88800005 	stb	r2,0(r17)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    1118:	80a0000c 	andi	r2,r16,32768
    111c:	1004d3fa 	srli	r2,r2,15
}
    1120:	10bfffc4 	addi	r2,r2,-1
    1124:	dfc00217 	ldw	ra,8(sp)
    1128:	dc400117 	ldw	r17,4(sp)
    112c:	dc000017 	ldw	r16,0(sp)
    1130:	dec00304 	addi	sp,sp,12
    1134:	f800283a 	ret

00001138 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    1138:	defffa04 	addi	sp,sp,-24
    113c:	dfc00515 	stw	ra,20(sp)
    1140:	dcc00415 	stw	r19,16(sp)
    1144:	dc800315 	stw	r18,12(sp)
    1148:	dc400215 	stw	r17,8(sp)
    114c:	dc000115 	stw	r16,4(sp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    1150:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1154:	30000b26 	beq	r6,zero,1184 <alt_up_irda_read_fd+0x4c>
    1158:	3023883a 	mov	r17,r6
    115c:	2825883a 	mov	r18,r5
    1160:	0021883a 	mov	r16,zero
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    1164:	9809883a 	mov	r4,r19
    1168:	940b883a 	add	r5,r18,r16
    116c:	d80d883a 	mov	r6,sp
    1170:	00010ec0 	call	10ec <alt_up_irda_read_data>
    1174:	1000041e 	bne	r2,zero,1188 <alt_up_irda_read_fd+0x50>
			count++;
    1178:	84000044 	addi	r16,r16,1
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    117c:	8c3ff91e 	bne	r17,r16,1164 <__alt_mem_Flash_flash_data+0xf4001164>
    1180:	00000106 	br	1188 <alt_up_irda_read_fd+0x50>
}

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
    1184:	0021883a 	mov	r16,zero
			count++;
		else
			break;
	}
	return count;
}
    1188:	8005883a 	mov	r2,r16
    118c:	dfc00517 	ldw	ra,20(sp)
    1190:	dcc00417 	ldw	r19,16(sp)
    1194:	dc800317 	ldw	r18,12(sp)
    1198:	dc400217 	ldw	r17,8(sp)
    119c:	dc000117 	ldw	r16,4(sp)
    11a0:	dec00604 	addi	sp,sp,24
    11a4:	f800283a 	ret

000011a8 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    11a8:	3005883a 	mov	r2,r6
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    11ac:	22000017 	ldw	r8,0(r4)
	int count = 0;
	while(len--)
    11b0:	30000726 	beq	r6,zero,11d0 <alt_up_irda_write_fd+0x28>
    11b4:	3007883a 	mov	r3,r6
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    11b8:	29c00003 	ldbu	r7,0(r5)
    11bc:	41000a17 	ldw	r4,40(r8)
    11c0:	21c00035 	stwio	r7,0(r4)
    11c4:	29400044 	addi	r5,r5,1
    11c8:	18ffffc4 	addi	r3,r3,-1

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    11cc:	183ffa1e 	bne	r3,zero,11b8 <__alt_mem_Flash_flash_data+0xf40011b8>
			count++;
		else
			break;
	}
	return count;
}
    11d0:	f800283a 	ret

000011d4 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    11d4:	deffff04 	addi	sp,sp,-4
    11d8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    11dc:	01400034 	movhi	r5,0
    11e0:	29505504 	addi	r5,r5,16724
    11e4:	00019bc0 	call	19bc <alt_find_dev>

  return dev;
}
    11e8:	dfc00017 	ldw	ra,0(sp)
    11ec:	dec00104 	addi	sp,sp,4
    11f0:	f800283a 	ret

000011f4 <read_RI_bit>:

//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    11f4:	2080400c 	andi	r2,r4,256
	return ri;
}
    11f8:	1004d23a 	srli	r2,r2,8
    11fc:	f800283a 	ret

00001200 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    1200:	2080004c 	andi	r2,r4,1
    1204:	f800283a 	ret

00001208 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    1208:	2081000c 	andi	r2,r4,1024
	return re;
}
    120c:	1004d2ba 	srli	r2,r2,10
    1210:	f800283a 	ret

00001214 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    1214:	2004d43a 	srli	r2,r4,16
    1218:	f800283a 	ret

0000121c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    121c:	20a0000c 	andi	r2,r4,32768
	return rvalid;
}
    1220:	1004d3fa 	srli	r2,r2,15
    1224:	f800283a 	ret

00001228 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    1228:	2005883a 	mov	r2,r4
    122c:	f800283a 	ret

00001230 <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1230:	20800a17 	ldw	r2,40(r4)
    1234:	10800104 	addi	r2,r2,4
    1238:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    123c:	18c00054 	ori	r3,r3,1
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1240:	10c00035 	stwio	r3,0(r2)
    1244:	f800283a 	ret

00001248 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1248:	20800a17 	ldw	r2,40(r4)
    124c:	10800104 	addi	r2,r2,4
    1250:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    1254:	00ffff84 	movi	r3,-2
    1258:	20c6703a 	and	r3,r4,r3
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    125c:	10c00035 	stwio	r3,0(r2)
    1260:	f800283a 	ret

00001264 <alt_up_ps2_write_data_byte>:
int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1264:	20800a17 	ldw	r2,40(r4)
    1268:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    126c:	20800a17 	ldw	r2,40(r4)
    1270:	10800137 	ldwio	r2,4(r2)
	return re;
}

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    1274:	1081000c 	andi	r2,r2,1024
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
	if (read_CE_bit(ctrl_reg))
    1278:	10000126 	beq	r2,zero,1280 <alt_up_ps2_write_data_byte+0x1c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    127c:	00bffec4 	movi	r2,-5
	}
	return 0;
}
    1280:	f800283a 	ret

00001284 <alt_up_ps2_read_data_byte_timeout>:
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
    1284:	0005883a 	mov	r2,zero
	do {
		count++;
    1288:	10800044 	addi	r2,r2,1
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    128c:	20c00a17 	ldw	r3,40(r4)
    1290:	18c00037 	ldwio	r3,0(r3)
	return ravail;
}

alt_u8 read_data_valid(alt_u32 data_reg)
{
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    1294:	19a0000c 	andi	r6,r3,32768
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		if (read_data_valid(data_reg))
    1298:	30000326 	beq	r6,zero,12a8 <alt_up_ps2_read_data_byte_timeout+0x24>
	return rvalid;
}

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    129c:	28c00005 	stb	r3,0(r5)
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		if (read_data_valid(data_reg))
		{
			*byte = read_data_byte(data_reg);
			return 0;
    12a0:	0005883a 	mov	r2,zero
    12a4:	f800283a 	ret
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    12a8:	20c00c17 	ldw	r3,48(r4)
    12ac:	183ff626 	beq	r3,zero,1288 <__alt_mem_Flash_flash_data+0xf4001288>
    12b0:	18bff52e 	bgeu	r3,r2,1288 <__alt_mem_Flash_flash_data+0xf4001288>
		{
			return -ETIMEDOUT;
    12b4:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    12b8:	f800283a 	ret

000012bc <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    12bc:	defffc04 	addi	sp,sp,-16
    12c0:	dfc00315 	stw	ra,12(sp)
    12c4:	dc400215 	stw	r17,8(sp)
    12c8:	dc000115 	stw	r16,4(sp)
    12cc:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    12d0:	d8000005 	stb	zero,0(sp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
		if ( status == 0)
		{
			if (data == PS2_ACK)
    12d4:	04403e84 	movi	r17,250
{
	unsigned char data = 0;
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    12d8:	8009883a 	mov	r4,r16
    12dc:	d80b883a 	mov	r5,sp
    12e0:	00012840 	call	1284 <alt_up_ps2_read_data_byte_timeout>
		if ( status == 0)
    12e4:	10c03fcc 	andi	r3,r2,255
    12e8:	1800031e 	bne	r3,zero,12f8 <alt_up_ps2_wait_for_ack+0x3c>
		{
			if (data == PS2_ACK)
    12ec:	d8800003 	ldbu	r2,0(sp)
    12f0:	147ff91e 	bne	r2,r17,12d8 <__alt_mem_Flash_flash_data+0xf40012d8>
    12f4:	00000206 	br	1300 <alt_up_ps2_wait_for_ack+0x44>
				return 0;
		}
		else 
		{
			return status;
    12f8:	10803fcc 	andi	r2,r2,255
    12fc:	00000106 	br	1304 <alt_up_ps2_wait_for_ack+0x48>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
		if ( status == 0)
		{
			if (data == PS2_ACK)
				return 0;
    1300:	0005883a 	mov	r2,zero
		{
			return status;
		}
	} while(1);
	return -ETIMEDOUT;
}
    1304:	dfc00317 	ldw	ra,12(sp)
    1308:	dc400217 	ldw	r17,8(sp)
    130c:	dc000117 	ldw	r16,4(sp)
    1310:	dec00404 	addi	sp,sp,16
    1314:	f800283a 	ret

00001318 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1318:	defffe04 	addi	sp,sp,-8
    131c:	dfc00115 	stw	ra,4(sp)
    1320:	dc000015 	stw	r16,0(sp)
    1324:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1328:	29403fcc 	andi	r5,r5,255
    132c:	00012640 	call	1264 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    1330:	1000021e 	bne	r2,zero,133c <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    1334:	8009883a 	mov	r4,r16
    1338:	00012bc0 	call	12bc <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    133c:	dfc00117 	ldw	ra,4(sp)
    1340:	dc000017 	ldw	r16,0(sp)
    1344:	dec00204 	addi	sp,sp,8
    1348:	f800283a 	ret

0000134c <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    134c:	defffd04 	addi	sp,sp,-12
    1350:	dfc00215 	stw	ra,8(sp)
    1354:	dc000115 	stw	r16,4(sp)
    1358:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    135c:	01403fc4 	movi	r5,255
    1360:	00013180 	call	1318 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    1364:	1000161e 	bne	r2,zero,13c0 <alt_up_ps2_init+0x74>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1368:	8009883a 	mov	r4,r16
    136c:	d80b883a 	mov	r5,sp
    1370:	00012840 	call	1284 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    1374:	1000121e 	bne	r2,zero,13c0 <alt_up_ps2_init+0x74>
    1378:	d8c00003 	ldbu	r3,0(sp)
    137c:	00802a84 	movi	r2,170
    1380:	18800f1e 	bne	r3,r2,13c0 <alt_up_ps2_init+0x74>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1384:	8009883a 	mov	r4,r16
    1388:	d80b883a 	mov	r5,sp
    138c:	00012840 	call	1284 <alt_up_ps2_read_data_byte_timeout>
			if (status == -ETIMEDOUT)
    1390:	00ffe304 	movi	r3,-116
    1394:	10c0031e 	bne	r2,r3,13a4 <alt_up_ps2_init+0x58>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1398:	00800044 	movi	r2,1
    139c:	80800d15 	stw	r2,52(r16)
    13a0:	00000706 	br	13c0 <alt_up_ps2_init+0x74>
			}
			else if (status == 0 && byte == 0x00)
    13a4:	1000061e 	bne	r2,zero,13c0 <alt_up_ps2_init+0x74>
    13a8:	d8800003 	ldbu	r2,0(sp)
    13ac:	1000041e 	bne	r2,zero,13c0 <alt_up_ps2_init+0x74>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    13b0:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    13b4:	8009883a 	mov	r4,r16
    13b8:	01403d04 	movi	r5,244
    13bc:	00012640 	call	1264 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    13c0:	dfc00217 	ldw	ra,8(sp)
    13c4:	dc000117 	ldw	r16,4(sp)
    13c8:	dec00304 	addi	sp,sp,12
    13cc:	f800283a 	ret

000013d0 <alt_up_ps2_read_data_byte>:
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    13d0:	20800a17 	ldw	r2,40(r4)
    13d4:	10800037 	ldwio	r2,0(r2)
	return ravail;
}

alt_u8 read_data_valid(alt_u32 data_reg)
{
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    13d8:	10e0000c 	andi	r3,r2,32768

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
	if (read_data_valid(data_reg))
    13dc:	18000326 	beq	r3,zero,13ec <alt_up_ps2_read_data_byte+0x1c>
	return rvalid;
}

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    13e0:	28800005 	stb	r2,0(r5)
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
	if (read_data_valid(data_reg))
	{
		*byte = read_data_byte(data_reg);
		return 0;
    13e4:	0005883a 	mov	r2,zero
    13e8:	f800283a 	ret
	}
	return -1;
    13ec:	00bfffc4 	movi	r2,-1
}
    13f0:	f800283a 	ret

000013f4 <alt_up_ps2_clear_fifo>:
	alt_u16 num = 0;
	unsigned int data_reg = 0;
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    13f4:	20800a17 	ldw	r2,40(r4)
    13f8:	10800037 	ldwio	r2,0(r2)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
	} while (num > 0);
    13fc:	1004d43a 	srli	r2,r2,16
    1400:	103ffc1e 	bne	r2,zero,13f4 <__alt_mem_Flash_flash_data+0xf40013f4>
}
    1404:	f800283a 	ret

00001408 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1408:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    140c:	0180010e 	bge	zero,r6,1414 <alt_up_ps2_read_fd+0xc>
    1410:	003fff06 	br	1410 <__alt_mem_Flash_flash_data+0xf4001410>
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1414:	deffff04 	addi	sp,sp,-4
    1418:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len);
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    141c:	00012840 	call	1284 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1420:	1005003a 	cmpeq	r2,r2,zero
    1424:	dfc00017 	ldw	ra,0(sp)
    1428:	dec00104 	addi	sp,sp,4
    142c:	f800283a 	ret

00001430 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1430:	defffb04 	addi	sp,sp,-20
    1434:	dfc00415 	stw	ra,16(sp)
    1438:	dcc00315 	stw	r19,12(sp)
    143c:	dc800215 	stw	r18,8(sp)
    1440:	dc400115 	stw	r17,4(sp)
    1444:	dc000015 	stw	r16,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1448:	24c00017 	ldw	r19,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    144c:	01800c0e 	bge	zero,r6,1480 <alt_up_ps2_write_fd+0x50>
    1450:	3023883a 	mov	r17,r6
    1454:	2825883a 	mov	r18,r5
    1458:	0021883a 	mov	r16,zero
    145c:	9405883a 	add	r2,r18,r16
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1460:	9809883a 	mov	r4,r19
    1464:	11400003 	ldbu	r5,0(r2)
    1468:	00012640 	call	1264 <alt_up_ps2_write_data_byte>
		if (status!=0)
    146c:	1000051e 	bne	r2,zero,1484 <alt_up_ps2_write_fd+0x54>
			return count;
		count++;
    1470:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1474:	847ff91e 	bne	r16,r17,145c <__alt_mem_Flash_flash_data+0xf400145c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
    1478:	8821883a 	mov	r16,r17
    147c:	00000106 	br	1484 <alt_up_ps2_write_fd+0x54>

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
    1480:	0021883a 	mov	r16,zero
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    1484:	8005883a 	mov	r2,r16
    1488:	dfc00417 	ldw	ra,16(sp)
    148c:	dcc00317 	ldw	r19,12(sp)
    1490:	dc800217 	ldw	r18,8(sp)
    1494:	dc400117 	ldw	r17,4(sp)
    1498:	dc000017 	ldw	r16,0(sp)
    149c:	dec00504 	addi	sp,sp,20
    14a0:	f800283a 	ret

000014a4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    14a4:	deffff04 	addi	sp,sp,-4
    14a8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    14ac:	01400034 	movhi	r5,0
    14b0:	29505504 	addi	r5,r5,16724
    14b4:	00019bc0 	call	19bc <alt_find_dev>

  return dev;
}
    14b8:	dfc00017 	ldw	ra,0(sp)
    14bc:	dec00104 	addi	sp,sp,4
    14c0:	f800283a 	ret

000014c4 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    14c4:	20800a17 	ldw	r2,40(r4)
    14c8:	10800104 	addi	r2,r2,4
    14cc:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    14d0:	18c00054 	ori	r3,r3,1
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    14d4:	10c00035 	stwio	r3,0(r2)
    14d8:	f800283a 	ret

000014dc <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    14dc:	20800a17 	ldw	r2,40(r4)
    14e0:	10800104 	addi	r2,r2,4
    14e4:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    14e8:	00ffff84 	movi	r3,-2
    14ec:	20c6703a 	and	r3,r4,r3
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    14f0:	10c00035 	stwio	r3,0(r2)
    14f4:	f800283a 	ret

000014f8 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    14f8:	20800a17 	ldw	r2,40(r4)
    14fc:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1500:	10bfffcc 	andi	r2,r2,65535
    1504:	f800283a 	ret

00001508 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1508:	20800a17 	ldw	r2,40(r4)
    150c:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    1510:	1004d43a 	srli	r2,r2,16
    1514:	f800283a 	ret

00001518 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    1518:	2100800c 	andi	r4,r4,512
	return (parity_error ? -1 : 0);
    151c:	2004c03a 	cmpne	r2,r4,zero
}
    1520:	0085c83a 	sub	r2,zero,r2
    1524:	f800283a 	ret

00001528 <alt_up_rs232_write_data>:
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1528:	29403fcc 	andi	r5,r5,255
    152c:	20800a17 	ldw	r2,40(r4)
    1530:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1534:	0005883a 	mov	r2,zero
    1538:	f800283a 	ret

0000153c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    153c:	defffd04 	addi	sp,sp,-12
    1540:	dfc00215 	stw	ra,8(sp)
    1544:	dc400115 	stw	r17,4(sp)
    1548:	dc000015 	stw	r16,0(sp)
    154c:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1550:	20800a17 	ldw	r2,40(r4)
    1554:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1558:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    155c:	8009883a 	mov	r4,r16
    1560:	00015180 	call	1518 <alt_up_rs232_check_parity>
    1564:	88800005 	stb	r2,0(r17)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    1568:	80a0000c 	andi	r2,r16,32768
    156c:	1004d3fa 	srli	r2,r2,15
}
    1570:	10bfffc4 	addi	r2,r2,-1
    1574:	dfc00217 	ldw	ra,8(sp)
    1578:	dc400117 	ldw	r17,4(sp)
    157c:	dc000017 	ldw	r16,0(sp)
    1580:	dec00304 	addi	sp,sp,12
    1584:	f800283a 	ret

00001588 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1588:	defffa04 	addi	sp,sp,-24
    158c:	dfc00515 	stw	ra,20(sp)
    1590:	dcc00415 	stw	r19,16(sp)
    1594:	dc800315 	stw	r18,12(sp)
    1598:	dc400215 	stw	r17,8(sp)
    159c:	dc000115 	stw	r16,4(sp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    15a0:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    15a4:	30000b26 	beq	r6,zero,15d4 <alt_up_rs232_read_fd+0x4c>
    15a8:	3023883a 	mov	r17,r6
    15ac:	2825883a 	mov	r18,r5
    15b0:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    15b4:	9809883a 	mov	r4,r19
    15b8:	940b883a 	add	r5,r18,r16
    15bc:	d80d883a 	mov	r6,sp
    15c0:	000153c0 	call	153c <alt_up_rs232_read_data>
    15c4:	1000041e 	bne	r2,zero,15d8 <alt_up_rs232_read_fd+0x50>
			count++;
    15c8:	84000044 	addi	r16,r16,1
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    15cc:	8c3ff91e 	bne	r17,r16,15b4 <__alt_mem_Flash_flash_data+0xf40015b4>
    15d0:	00000106 	br	15d8 <alt_up_rs232_read_fd+0x50>
}

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
    15d4:	0021883a 	mov	r16,zero
			count++;
		else
			break;
	}
	return count;
}
    15d8:	8005883a 	mov	r2,r16
    15dc:	dfc00517 	ldw	ra,20(sp)
    15e0:	dcc00417 	ldw	r19,16(sp)
    15e4:	dc800317 	ldw	r18,12(sp)
    15e8:	dc400217 	ldw	r17,8(sp)
    15ec:	dc000117 	ldw	r16,4(sp)
    15f0:	dec00604 	addi	sp,sp,24
    15f4:	f800283a 	ret

000015f8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    15f8:	3005883a 	mov	r2,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    15fc:	22000017 	ldw	r8,0(r4)
	int count = 0;
	while(len--)
    1600:	30000726 	beq	r6,zero,1620 <alt_up_rs232_write_fd+0x28>
    1604:	3007883a 	mov	r3,r6
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1608:	29c00003 	ldbu	r7,0(r5)
    160c:	41000a17 	ldw	r4,40(r8)
    1610:	21c00035 	stwio	r7,0(r4)
	while(len--)
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
		{
			count++;
			ptr++;
    1614:	29400044 	addi	r5,r5,1
    1618:	18ffffc4 	addi	r3,r3,-1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    161c:	183ffa1e 	bne	r3,zero,1608 <__alt_mem_Flash_flash_data+0xf4001608>
		}
		else
			break;
	}
	return count;
}
    1620:	f800283a 	ret

00001624 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1624:	deffff04 	addi	sp,sp,-4
    1628:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    162c:	01400034 	movhi	r5,0
    1630:	29505504 	addi	r5,r5,16724
    1634:	00019bc0 	call	19bc <alt_find_dev>

  return dev;
}
    1638:	dfc00017 	ldw	ra,0(sp)
    163c:	dec00104 	addi	sp,sp,4
    1640:	f800283a 	ret

00001644 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1644:	defffd04 	addi	sp,sp,-12
    1648:	dfc00215 	stw	ra,8(sp)
    164c:	dc400115 	stw	r17,4(sp)
    1650:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1654:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    1658:	80800007 	ldb	r2,0(r16)
    165c:	10000b26 	beq	r2,zero,168c <alt_up_char_buffer_init+0x48>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1660:	04400034 	movhi	r17,0
    1664:	8c49dd04 	addi	r17,r17,10100
    1668:	8009883a 	mov	r4,r16
    166c:	880b883a 	mov	r5,r17
    1670:	00022e40 	call	22e4 <strcmp>
    1674:	1000021e 	bne	r2,zero,1680 <alt_up_char_buffer_init+0x3c>
			(*name) = '\0';
    1678:	80000005 	stb	zero,0(r16)
			break;
    167c:	00000306 	br	168c <alt_up_char_buffer_init+0x48>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1680:	84000044 	addi	r16,r16,1
    1684:	80800007 	ldb	r2,0(r16)
    1688:	103ff71e 	bne	r2,zero,1668 <__alt_mem_Flash_flash_data+0xf4001668>
			break;
		}
	}
	
	return;
}
    168c:	dfc00217 	ldw	ra,8(sp)
    1690:	dc400117 	ldw	r17,4(sp)
    1694:	dc000017 	ldw	r16,0(sp)
    1698:	dec00304 	addi	sp,sp,12
    169c:	f800283a 	ret

000016a0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    16a0:	deffff04 	addi	sp,sp,-4
    16a4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    16a8:	01400034 	movhi	r5,0
    16ac:	29505504 	addi	r5,r5,16724
    16b0:	00019bc0 	call	19bc <alt_find_dev>

  return dev;
}
    16b4:	dfc00017 	ldw	ra,0(sp)
    16b8:	dec00104 	addi	sp,sp,4
    16bc:	f800283a 	ret

000016c0 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    16c0:	20800c17 	ldw	r2,48(r4)
    16c4:	3080102e 	bgeu	r6,r2,1708 <alt_up_char_buffer_draw+0x48>
    16c8:	20800d17 	ldw	r2,52(r4)
    16cc:	3880102e 	bgeu	r7,r2,1710 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    16d0:	20800f17 	ldw	r2,60(r4)
    16d4:	3084703a 	and	r2,r6,r2
    16d8:	21800e17 	ldw	r6,56(r4)
    16dc:	1186983a 	sll	r3,r2,r6
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    16e0:	20801117 	ldw	r2,68(r4)
    16e4:	388e703a 	and	r7,r7,r2
    16e8:	21801017 	ldw	r6,64(r4)
    16ec:	398e983a 	sll	r7,r7,r6
    16f0:	19ccb03a 	or	r6,r3,r7
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    16f4:	20800b17 	ldw	r2,44(r4)
    16f8:	308d883a 	add	r6,r6,r2
    16fc:	31400025 	stbio	r5,0(r6)

	return 0;
    1700:	0005883a 	mov	r2,zero
    1704:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
    1708:	00bfffc4 	movi	r2,-1
    170c:	f800283a 	ret
    1710:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
    1714:	f800283a 	ret

00001718 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1718:	20800c17 	ldw	r2,48(r4)
    171c:	30801c2e 	bgeu	r6,r2,1790 <alt_up_char_buffer_string+0x78>
    1720:	20800d17 	ldw	r2,52(r4)
    1724:	38801c2e 	bgeu	r7,r2,1798 <alt_up_char_buffer_string+0x80>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1728:	22401017 	ldw	r9,64(r4)
    172c:	3a4e983a 	sll	r7,r7,r9
    1730:	398f883a 	add	r7,r7,r6

	while ( *ptr )
    1734:	2a000003 	ldbu	r8,0(r5)
    1738:	40803fcc 	andi	r2,r8,255
    173c:	1080201c 	xori	r2,r2,128
    1740:	10bfe004 	addi	r2,r2,-128
    1744:	10001626 	beq	r2,zero,17a0 <alt_up_char_buffer_string+0x88>
    1748:	2805883a 	mov	r2,r5
    174c:	3953c83a 	sub	r9,r7,r5
    1750:	314bc83a 	sub	r5,r6,r5
    1754:	124f883a 	add	r7,r2,r9
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1758:	20c00b17 	ldw	r3,44(r4)
    175c:	38c7883a 	add	r3,r7,r3
    1760:	1a000025 	stbio	r8,0(r3)
		++ptr;
    1764:	10800044 	addi	r2,r2,1
    1768:	114f883a 	add	r7,r2,r5
		if (++x >= char_buffer->x_resolution)
    176c:	20c00c17 	ldw	r3,48(r4)
    1770:	38c00d2e 	bgeu	r7,r3,17a8 <alt_up_char_buffer_string+0x90>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    1774:	12000003 	ldbu	r8,0(r2)
    1778:	40c03fcc 	andi	r3,r8,255
    177c:	18c0201c 	xori	r3,r3,128
    1780:	18ffe004 	addi	r3,r3,-128
    1784:	183ff31e 	bne	r3,zero,1754 <__alt_mem_Flash_flash_data+0xf4001754>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    1788:	0005883a 	mov	r2,zero
    178c:	f800283a 	ret

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
    1790:	00bfffc4 	movi	r2,-1
    1794:	f800283a 	ret
    1798:	00bfffc4 	movi	r2,-1
    179c:	f800283a 	ret
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    17a0:	0005883a 	mov	r2,zero
    17a4:	f800283a 	ret
	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
    17a8:	00bfffc4 	movi	r2,-1
		++offset;
	}
	return 0;
}
    17ac:	f800283a 	ret

000017b0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    17b0:	20800a17 	ldw	r2,40(r4)
    17b4:	00c00044 	movi	r3,1
    17b8:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    17bc:	20800a17 	ldw	r2,40(r4)
    17c0:	108000a3 	ldbuio	r2,2(r2)
    17c4:	1080004c 	andi	r2,r2,1
    17c8:	103ffc1e 	bne	r2,zero,17bc <__alt_mem_Flash_flash_data+0xf40017bc>
	return 0;
}
    17cc:	f800283a 	ret

000017d0 <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    17d0:	00800034 	movhi	r2,0
    17d4:	1096db04 	addi	r2,r2,23404
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    17d8:	10800017 	ldw	r2,0(r2)
    17dc:	10001d26 	beq	r2,zero,1854 <alt_alarm_start+0x84>
  {
    if (alarm)
    17e0:	20001e26 	beq	r4,zero,185c <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
    17e4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    17e8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    17ec:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17f0:	00bfff84 	movi	r2,-2
    17f4:	1884703a 	and	r2,r3,r2
    17f8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    17fc:	00800034 	movhi	r2,0
    1800:	1096da04 	addi	r2,r2,23400
    1804:	10800017 	ldw	r2,0(r2)
    1808:	11800044 	addi	r6,r2,1
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    180c:	314b883a 	add	r5,r6,r5
    1810:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1814:	2880032e 	bgeu	r5,r2,1824 <alt_alarm_start+0x54>
      {
        alarm->rollover = 1;
    1818:	00800044 	movi	r2,1
    181c:	20800405 	stb	r2,16(r4)
    1820:	00000106 	br	1828 <alt_alarm_start+0x58>
      }
      else
      {
        alarm->rollover = 0;
    1824:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1828:	00800034 	movhi	r2,0
    182c:	10905b04 	addi	r2,r2,16748
    1830:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    1834:	11400017 	ldw	r5,0(r2)
    1838:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
    183c:	11400017 	ldw	r5,0(r2)
    1840:	29000115 	stw	r4,4(r5)
  list->next           = entry;
    1844:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1848:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    184c:	0005883a 	mov	r2,zero
    1850:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    1854:	00bfde84 	movi	r2,-134
    1858:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    185c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    1860:	f800283a 	ret

00001864 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1864:	defffd04 	addi	sp,sp,-12
    1868:	dfc00215 	stw	ra,8(sp)
    186c:	dc400115 	stw	r17,4(sp)
    1870:	dc000015 	stw	r16,0(sp)
    1874:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1878:	20001916 	blt	r4,zero,18e0 <close+0x7c>
    187c:	21000324 	muli	r4,r4,12
    1880:	00800034 	movhi	r2,0
    1884:	108ee104 	addi	r2,r2,15236
    1888:	2089883a 	add	r4,r4,r2
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    188c:	20800017 	ldw	r2,0(r4)
    1890:	10800417 	ldw	r2,16(r2)
    1894:	10001e26 	beq	r2,zero,1910 <close+0xac>
    1898:	103ee83a 	callr	r2
    189c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    18a0:	8009883a 	mov	r4,r16
    18a4:	0001db80 	call	1db8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    18a8:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    18ac:	88001b0e 	bge	r17,zero,191c <close+0xb8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    18b0:	00800034 	movhi	r2,0
    18b4:	10905904 	addi	r2,r2,16740
    18b8:	10800017 	ldw	r2,0(r2)
    18bc:	10000226 	beq	r2,zero,18c8 <close+0x64>
    18c0:	103ee83a 	callr	r2
    18c4:	00000206 	br	18d0 <close+0x6c>
    18c8:	00800034 	movhi	r2,0
    18cc:	1096dd04 	addi	r2,r2,23412
    {
      ALT_ERRNO = -rval;
    18d0:	0463c83a 	sub	r17,zero,r17
    18d4:	14400015 	stw	r17,0(r2)
      return -1;
    18d8:	00bfffc4 	movi	r2,-1
    18dc:	00000f06 	br	191c <close+0xb8>
    18e0:	00800034 	movhi	r2,0
    18e4:	10905904 	addi	r2,r2,16740
    18e8:	10800017 	ldw	r2,0(r2)
    18ec:	10000226 	beq	r2,zero,18f8 <close+0x94>
    18f0:	103ee83a 	callr	r2
    18f4:	00000206 	br	1900 <close+0x9c>
    18f8:	00800034 	movhi	r2,0
    18fc:	1096dd04 	addi	r2,r2,23412
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1900:	00c01444 	movi	r3,81
    1904:	10c00015 	stw	r3,0(r2)
    return -1;
    1908:	00bfffc4 	movi	r2,-1
    190c:	00000306 	br	191c <close+0xb8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1910:	8009883a 	mov	r4,r16
    1914:	0001db80 	call	1db8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    1918:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    191c:	dfc00217 	ldw	ra,8(sp)
    1920:	dc400117 	ldw	r17,4(sp)
    1924:	dc000017 	ldw	r16,0(sp)
    1928:	dec00304 	addi	sp,sp,12
    192c:	f800283a 	ret

00001930 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1930:	f800283a 	ret

00001934 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    1934:	3005883a 	mov	r2,r6
    1938:	f800283a 	ret

0000193c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    193c:	20000226 	beq	r4,zero,1948 <alt_dev_llist_insert+0xc>
    1940:	20800217 	ldw	r2,8(r4)
    1944:	1000121e 	bne	r2,zero,1990 <alt_dev_llist_insert+0x54>
    1948:	00800034 	movhi	r2,0
    194c:	10905904 	addi	r2,r2,16740
    1950:	10800017 	ldw	r2,0(r2)
    1954:	10000426 	beq	r2,zero,1968 <alt_dev_llist_insert+0x2c>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1958:	deffff04 	addi	sp,sp,-4
    195c:	dfc00015 	stw	ra,0(sp)
    1960:	103ee83a 	callr	r2
    1964:	00000606 	br	1980 <alt_dev_llist_insert+0x44>
    1968:	00800034 	movhi	r2,0
    196c:	1096dd04 	addi	r2,r2,23412
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    1970:	00c00584 	movi	r3,22
    1974:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    1978:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    197c:	f800283a 	ret
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    1980:	00c00584 	movi	r3,22
    1984:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    1988:	00bffa84 	movi	r2,-22
    198c:	00000806 	br	19b0 <alt_dev_llist_insert+0x74>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1990:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    1994:	28800017 	ldw	r2,0(r5)
    1998:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    199c:	28800017 	ldw	r2,0(r5)
    19a0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    19a4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    19a8:	0005883a 	mov	r2,zero
    19ac:	f800283a 	ret
}
    19b0:	dfc00017 	ldw	ra,0(sp)
    19b4:	dec00104 	addi	sp,sp,4
    19b8:	f800283a 	ret

000019bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    19bc:	defffb04 	addi	sp,sp,-20
    19c0:	dfc00415 	stw	ra,16(sp)
    19c4:	dcc00315 	stw	r19,12(sp)
    19c8:	dc800215 	stw	r18,8(sp)
    19cc:	dc400115 	stw	r17,4(sp)
    19d0:	dc000015 	stw	r16,0(sp)
    19d4:	2027883a 	mov	r19,r4
    19d8:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    19dc:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    19e0:	00023880 	call	2388 <strlen>
    19e4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    19e8:	8c000926 	beq	r17,r16,1a10 <alt_find_dev+0x54>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    19ec:	81000217 	ldw	r4,8(r16)
    19f0:	980b883a 	mov	r5,r19
    19f4:	900d883a 	mov	r6,r18
    19f8:	00021300 	call	2130 <memcmp>
    19fc:	10000626 	beq	r2,zero,1a18 <alt_find_dev+0x5c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1a00:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1a04:	8c3ff91e 	bne	r17,r16,19ec <__alt_mem_Flash_flash_data+0xf40019ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    1a08:	0005883a 	mov	r2,zero
    1a0c:	00000306 	br	1a1c <alt_find_dev+0x60>
    1a10:	0005883a 	mov	r2,zero
    1a14:	00000106 	br	1a1c <alt_find_dev+0x60>
    1a18:	8005883a 	mov	r2,r16
}
    1a1c:	dfc00417 	ldw	ra,16(sp)
    1a20:	dcc00317 	ldw	r19,12(sp)
    1a24:	dc800217 	ldw	r18,8(sp)
    1a28:	dc400117 	ldw	r17,4(sp)
    1a2c:	dc000017 	ldw	r16,0(sp)
    1a30:	dec00504 	addi	sp,sp,20
    1a34:	f800283a 	ret

00001a38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1a38:	deffff04 	addi	sp,sp,-4
    1a3c:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1a40:	0009883a 	mov	r4,zero
    1a44:	01440004 	movi	r5,4096
    1a48:	000202c0 	call	202c <alt_icache_flush>
#endif
}
    1a4c:	dfc00017 	ldw	ra,0(sp)
    1a50:	dec00104 	addi	sp,sp,4
    1a54:	f800283a 	ret

00001a58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1a58:	defffe04 	addi	sp,sp,-8
    1a5c:	dfc00115 	stw	ra,4(sp)
    1a60:	dc000015 	stw	r16,0(sp)
    1a64:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    1a68:	2809883a 	mov	r4,r5
    1a6c:	300b883a 	mov	r5,r6
    1a70:	380d883a 	mov	r6,r7
    1a74:	0001c100 	call	1c10 <open>

  if (old >= 0)
    1a78:	10000c16 	blt	r2,zero,1aac <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
    1a7c:	10c00324 	muli	r3,r2,12
    1a80:	01000034 	movhi	r4,0
    1a84:	210ee104 	addi	r4,r4,15236
    1a88:	20c7883a 	add	r3,r4,r3
    1a8c:	19000017 	ldw	r4,0(r3)
    1a90:	81000015 	stw	r4,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    1a94:	19000117 	ldw	r4,4(r3)
    1a98:	81000115 	stw	r4,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1a9c:	18c00217 	ldw	r3,8(r3)
    1aa0:	80c00215 	stw	r3,8(r16)

    alt_release_fd (old);
    1aa4:	1009883a 	mov	r4,r2
    1aa8:	0001db80 	call	1db8 <alt_release_fd>
  }
} 
    1aac:	dfc00117 	ldw	ra,4(sp)
    1ab0:	dc000017 	ldw	r16,0(sp)
    1ab4:	dec00204 	addi	sp,sp,8
    1ab8:	f800283a 	ret

00001abc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1abc:	defffa04 	addi	sp,sp,-24
    1ac0:	dfc00515 	stw	ra,20(sp)
    1ac4:	dd000415 	stw	r20,16(sp)
    1ac8:	dcc00315 	stw	r19,12(sp)
    1acc:	dc800215 	stw	r18,8(sp)
    1ad0:	dc400115 	stw	r17,4(sp)
    1ad4:	dc000015 	stw	r16,0(sp)
    1ad8:	2005883a 	mov	r2,r4
    1adc:	2829883a 	mov	r20,r5
    1ae0:	3027883a 	mov	r19,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1ae4:	04000034 	movhi	r16,0
    1ae8:	840ee404 	addi	r16,r16,15248
    1aec:	04800044 	movi	r18,1
    1af0:	04407fc4 	movi	r17,511
    1af4:	8009883a 	mov	r4,r16
    1af8:	100b883a 	mov	r5,r2
    1afc:	900d883a 	mov	r6,r18
    1b00:	880f883a 	mov	r7,r17
    1b04:	0001a580 	call	1a58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1b08:	843ffd04 	addi	r16,r16,-12
    1b0c:	8009883a 	mov	r4,r16
    1b10:	a00b883a 	mov	r5,r20
    1b14:	000d883a 	mov	r6,zero
    1b18:	880f883a 	mov	r7,r17
    1b1c:	0001a580 	call	1a58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1b20:	81000604 	addi	r4,r16,24
    1b24:	980b883a 	mov	r5,r19
    1b28:	900d883a 	mov	r6,r18
    1b2c:	880f883a 	mov	r7,r17
    1b30:	0001a580 	call	1a58 <alt_open_fd>
}  
    1b34:	dfc00517 	ldw	ra,20(sp)
    1b38:	dd000417 	ldw	r20,16(sp)
    1b3c:	dcc00317 	ldw	r19,12(sp)
    1b40:	dc800217 	ldw	r18,8(sp)
    1b44:	dc400117 	ldw	r17,4(sp)
    1b48:	dc000017 	ldw	r16,0(sp)
    1b4c:	dec00604 	addi	sp,sp,24
    1b50:	f800283a 	ret

00001b54 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1b54:	008007c4 	movi	r2,31
    1b58:	11002b36 	bltu	r2,r4,1c08 <alt_irq_register+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1b5c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1b60:	00bfff84 	movi	r2,-2
    1b64:	3884703a 	and	r2,r7,r2
    1b68:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    1b6c:	200490fa 	slli	r2,r4,3
    1b70:	00c00034 	movhi	r3,0
    1b74:	18d6de04 	addi	r3,r3,23416
    1b78:	1885883a 	add	r2,r3,r2
    1b7c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    1b80:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    1b84:	30000f26 	beq	r6,zero,1bc4 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1b88:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1b8c:	00bfff84 	movi	r2,-2
    1b90:	3084703a 	and	r2,r6,r2
    1b94:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1b98:	00800034 	movhi	r2,0
    1b9c:	1096d904 	addi	r2,r2,23396
    1ba0:	10c00017 	ldw	r3,0(r2)
    1ba4:	01400044 	movi	r5,1
    1ba8:	2908983a 	sll	r4,r5,r4
    1bac:	20c8b03a 	or	r4,r4,r3
    1bb0:	11000015 	stw	r4,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1bb4:	10800017 	ldw	r2,0(r2)
    1bb8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1bbc:	3001703a 	wrctl	status,r6
    1bc0:	00000e06 	br	1bfc <alt_irq_register+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1bc4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1bc8:	00bfff84 	movi	r2,-2
    1bcc:	3084703a 	and	r2,r6,r2
    1bd0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1bd4:	00800034 	movhi	r2,0
    1bd8:	1096d904 	addi	r2,r2,23396
    1bdc:	10c00017 	ldw	r3,0(r2)
    1be0:	017fff84 	movi	r5,-2
    1be4:	2908183a 	rol	r4,r5,r4
    1be8:	20c8703a 	and	r4,r4,r3
    1bec:	11000015 	stw	r4,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1bf0:	10800017 	ldw	r2,0(r2)
    1bf4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1bf8:	3001703a 	wrctl	status,r6
    1bfc:	3801703a 	wrctl	status,r7
    1c00:	0005883a 	mov	r2,zero
    1c04:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    1c08:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    1c0c:	f800283a 	ret

00001c10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1c10:	defffa04 	addi	sp,sp,-24
    1c14:	dfc00515 	stw	ra,20(sp)
    1c18:	dd000415 	stw	r20,16(sp)
    1c1c:	dcc00315 	stw	r19,12(sp)
    1c20:	dc800215 	stw	r18,8(sp)
    1c24:	dc400115 	stw	r17,4(sp)
    1c28:	dc000015 	stw	r16,0(sp)
    1c2c:	2025883a 	mov	r18,r4
    1c30:	2827883a 	mov	r19,r5
    1c34:	3029883a 	mov	r20,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1c38:	01400034 	movhi	r5,0
    1c3c:	29505504 	addi	r5,r5,16724
    1c40:	00019bc0 	call	19bc <alt_find_dev>
    1c44:	1021883a 	mov	r16,r2
    1c48:	1000401e 	bne	r2,zero,1d4c <open+0x13c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1c4c:	9009883a 	mov	r4,r18
    1c50:	0001ee80 	call	1ee8 <alt_find_file>
    1c54:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1c58:	10004a1e 	bne	r2,zero,1d84 <open+0x174>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1c5c:	043ffb44 	movi	r16,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1c60:	047fffc4 	movi	r17,-1
    1c64:	00001406 	br	1cb8 <open+0xa8>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1c68:	18800017 	ldw	r2,0(r3)
    1c6c:	1180031e 	bne	r2,r6,1c7c <open+0x6c>
    1c70:	48800017 	ldw	r2,0(r9)
    1c74:	1000010e 	bge	r2,zero,1c7c <open+0x6c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1c78:	20c00e1e 	bne	r4,r3,1cb4 <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1c7c:	42000044 	addi	r8,r8,1
    1c80:	18c00304 	addi	r3,r3,12
    1c84:	4a400304 	addi	r9,r9,12
    1c88:	3a3ff72e 	bgeu	r7,r8,1c68 <__alt_mem_Flash_flash_data+0xf4001c68>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1c8c:	80800317 	ldw	r2,12(r16)
    1c90:	10001726 	beq	r2,zero,1cf0 <open+0xe0>
    1c94:	900b883a 	mov	r5,r18
    1c98:	980d883a 	mov	r6,r19
    1c9c:	a00f883a 	mov	r7,r20
    1ca0:	103ee83a 	callr	r2
    1ca4:	1021883a 	mov	r16,r2
    1ca8:	8805883a 	mov	r2,r17
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1cac:	80003a0e 	bge	r16,zero,1d98 <open+0x188>
    1cb0:	00000106 	br	1cb8 <open+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1cb4:	043ffcc4 	movi	r16,-13

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    1cb8:	8809883a 	mov	r4,r17
    1cbc:	0001db80 	call	1db8 <alt_release_fd>
    1cc0:	00800034 	movhi	r2,0
    1cc4:	10905904 	addi	r2,r2,16740
    1cc8:	10800017 	ldw	r2,0(r2)
    1ccc:	10000226 	beq	r2,zero,1cd8 <open+0xc8>
    1cd0:	103ee83a 	callr	r2
    1cd4:	00000206 	br	1ce0 <open+0xd0>
    1cd8:	00800034 	movhi	r2,0
    1cdc:	1096dd04 	addi	r2,r2,23412
    ALT_ERRNO = -status;
    1ce0:	0421c83a 	sub	r16,zero,r16
    1ce4:	14000015 	stw	r16,0(r2)
    return -1;
    1ce8:	00bfffc4 	movi	r2,-1
    1cec:	00002a06 	br	1d98 <open+0x188>
    1cf0:	8805883a 	mov	r2,r17
    1cf4:	00002806 	br	1d98 <open+0x188>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    1cf8:	8821883a 	mov	r16,r17
    1cfc:	003fee06 	br	1cb8 <__alt_mem_Flash_flash_data+0xf4001cb8>
    1d00:	8821883a 	mov	r16,r17
    1d04:	003fec06 	br	1cb8 <__alt_mem_Flash_flash_data+0xf4001cb8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    1d08:	89000324 	muli	r4,r17,12
    1d0c:	02400034 	movhi	r9,0
    1d10:	4a4ee104 	addi	r9,r9,15236
    1d14:	2249883a 	add	r4,r4,r9
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1d18:	00900034 	movhi	r2,16384
    1d1c:	10bfffc4 	addi	r2,r2,-1
    1d20:	9884703a 	and	r2,r19,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1d24:	10900034 	orhi	r2,r2,16384
    1d28:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1d2c:	00800034 	movhi	r2,0
    1d30:	10905404 	addi	r2,r2,16720
    1d34:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1d38:	21800017 	ldw	r6,0(r4)
    1d3c:	4807883a 	mov	r3,r9
    1d40:	4a400204 	addi	r9,r9,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1d44:	0011883a 	mov	r8,zero
    1d48:	003fc706 	br	1c68 <__alt_mem_Flash_flash_data+0xf4001c68>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    1d4c:	1009883a 	mov	r4,r2
    1d50:	0001fb40 	call	1fb4 <alt_get_fd>
    1d54:	1023883a 	mov	r17,r2
    1d58:	103feb0e 	bge	r2,zero,1d08 <__alt_mem_Flash_flash_data+0xf4001d08>
    1d5c:	003fe606 	br	1cf8 <__alt_mem_Flash_flash_data+0xf4001cf8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    1d60:	89000324 	muli	r4,r17,12
    1d64:	00800034 	movhi	r2,0
    1d68:	108ee104 	addi	r2,r2,15236
    1d6c:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1d70:	00900034 	movhi	r2,16384
    1d74:	10bfffc4 	addi	r2,r2,-1
    1d78:	9884703a 	and	r2,r19,r2
    1d7c:	20800215 	stw	r2,8(r4)
    1d80:	003fc206 	br	1c8c <__alt_mem_Flash_flash_data+0xf4001c8c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    1d84:	1009883a 	mov	r4,r2
    1d88:	0001fb40 	call	1fb4 <alt_get_fd>
    1d8c:	1023883a 	mov	r17,r2
    1d90:	103ff30e 	bge	r2,zero,1d60 <__alt_mem_Flash_flash_data+0xf4001d60>
    1d94:	003fda06 	br	1d00 <__alt_mem_Flash_flash_data+0xf4001d00>
  }
  
  /* return the reference upon success */

  return index;
}
    1d98:	dfc00517 	ldw	ra,20(sp)
    1d9c:	dd000417 	ldw	r20,16(sp)
    1da0:	dcc00317 	ldw	r19,12(sp)
    1da4:	dc800217 	ldw	r18,8(sp)
    1da8:	dc400117 	ldw	r17,4(sp)
    1dac:	dc000017 	ldw	r16,0(sp)
    1db0:	dec00604 	addi	sp,sp,24
    1db4:	f800283a 	ret

00001db8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    1db8:	00800084 	movi	r2,2
    1dbc:	1100060e 	bge	r2,r4,1dd8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    1dc0:	21000324 	muli	r4,r4,12
    1dc4:	00800034 	movhi	r2,0
    1dc8:	108ee104 	addi	r2,r2,15236
    1dcc:	1109883a 	add	r4,r2,r4
    1dd0:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    1dd4:	20000015 	stw	zero,0(r4)
    1dd8:	f800283a 	ret

00001ddc <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ddc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1de0:	00bfff84 	movi	r2,-2
    1de4:	1884703a 	and	r2,r3,r2
    1de8:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1dec:	20800017 	ldw	r2,0(r4)
    1df0:	21400117 	ldw	r5,4(r4)
    1df4:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    1df8:	20800117 	ldw	r2,4(r4)
    1dfc:	21400017 	ldw	r5,0(r4)
    1e00:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1e04:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    1e08:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1e0c:	1801703a 	wrctl	status,r3
    1e10:	f800283a 	ret

00001e14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1e14:	defffb04 	addi	sp,sp,-20
    1e18:	dfc00415 	stw	ra,16(sp)
    1e1c:	dcc00315 	stw	r19,12(sp)
    1e20:	dc800215 	stw	r18,8(sp)
    1e24:	dc400115 	stw	r17,4(sp)
    1e28:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1e2c:	d0e00704 	addi	r3,gp,-32740
    1e30:	1c000017 	ldw	r16,0(r3)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1e34:	d0a68617 	ldw	r2,-26088(gp)
    1e38:	10800044 	addi	r2,r2,1
    1e3c:	d0a68615 	stw	r2,-26088(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1e40:	80c02026 	beq	r16,r3,1ec4 <alt_tick+0xb0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    1e44:	04c00044 	movi	r19,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1e48:	1825883a 	mov	r18,r3
  {
    next = (alt_alarm*) alarm->llist.next;
    1e4c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1e50:	80800403 	ldbu	r2,16(r16)
    1e54:	10001526 	beq	r2,zero,1eac <alt_tick+0x98>
    1e58:	d0a68617 	ldw	r2,-26088(gp)
    1e5c:	1000171e 	bne	r2,zero,1ebc <alt_tick+0xa8>
    {
      alarm->rollover = 0;
    1e60:	80000405 	stb	zero,16(r16)
    1e64:	00001106 	br	1eac <alt_tick+0x98>

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
      {
        alt_alarm_stop (alarm);
    1e68:	8009883a 	mov	r4,r16
    1e6c:	0001ddc0 	call	1ddc <alt_alarm_stop>
    1e70:	00000606 	br	1e8c <alt_tick+0x78>
      }
      else
      {
        alarm->time += next_callback;
    1e74:	80c00217 	ldw	r3,8(r16)
    1e78:	10c5883a 	add	r2,r2,r3
    1e7c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1e80:	d0e68617 	ldw	r3,-26088(gp)
    1e84:	10c0012e 	bgeu	r2,r3,1e8c <alt_tick+0x78>
        {
          alarm->rollover = 1;
    1e88:	84c00405 	stb	r19,16(r16)
    1e8c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1e90:	8cbfee1e 	bne	r17,r18,1e4c <__alt_mem_Flash_flash_data+0xf4001e4c>
    1e94:	00000b06 	br	1ec4 <alt_tick+0xb0>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    1e98:	80800317 	ldw	r2,12(r16)
    1e9c:	81000517 	ldw	r4,20(r16)
    1ea0:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1ea4:	103ff31e 	bne	r2,zero,1e74 <__alt_mem_Flash_flash_data+0xf4001e74>
    1ea8:	003fef06 	br	1e68 <__alt_mem_Flash_flash_data+0xf4001e68>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1eac:	d0e68617 	ldw	r3,-26088(gp)
    1eb0:	80800217 	ldw	r2,8(r16)
    1eb4:	18bff82e 	bgeu	r3,r2,1e98 <__alt_mem_Flash_flash_data+0xf4001e98>
    1eb8:	003ff406 	br	1e8c <__alt_mem_Flash_flash_data+0xf4001e8c>
    1ebc:	d0a68617 	ldw	r2,-26088(gp)
    1ec0:	003ff206 	br	1e8c <__alt_mem_Flash_flash_data+0xf4001e8c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    1ec4:	dfc00417 	ldw	ra,16(sp)
    1ec8:	dcc00317 	ldw	r19,12(sp)
    1ecc:	dc800217 	ldw	r18,8(sp)
    1ed0:	dc400117 	ldw	r17,4(sp)
    1ed4:	dc000017 	ldw	r16,0(sp)
    1ed8:	dec00504 	addi	sp,sp,20
    1edc:	f800283a 	ret

00001ee0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1ee0:	000170fa 	wrctl	ienable,zero
    1ee4:	f800283a 	ret

00001ee8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    1ee8:	defffa04 	addi	sp,sp,-24
    1eec:	dfc00515 	stw	ra,20(sp)
    1ef0:	dd000415 	stw	r20,16(sp)
    1ef4:	dcc00315 	stw	r19,12(sp)
    1ef8:	dc800215 	stw	r18,8(sp)
    1efc:	dc400115 	stw	r17,4(sp)
    1f00:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1f04:	00800034 	movhi	r2,0
    1f08:	10905704 	addi	r2,r2,16732
    1f0c:	14000017 	ldw	r16,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1f10:	80801d26 	beq	r16,r2,1f88 <alt_find_file+0xa0>
    1f14:	2027883a 	mov	r19,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    1f18:	04800bc4 	movi	r18,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1f1c:	00800034 	movhi	r2,0
    1f20:	10905704 	addi	r2,r2,16732
    1f24:	1029883a 	mov	r20,r2
  {
    len = strlen(next->name);
    1f28:	84400217 	ldw	r17,8(r16)
    1f2c:	8809883a 	mov	r4,r17
    1f30:	00023880 	call	2388 <strlen>
    1f34:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    1f38:	8889883a 	add	r4,r17,r2
    1f3c:	213fffc7 	ldb	r4,-1(r4)
    1f40:	2480011e 	bne	r4,r18,1f48 <alt_find_file+0x60>
    {
      len -= 1;
    1f44:	10ffffc4 	addi	r3,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1f48:	180d883a 	mov	r6,r3
    1f4c:	98c7883a 	add	r3,r19,r3
    1f50:	18800003 	ldbu	r2,0(r3)
    1f54:	10c03fcc 	andi	r3,r2,255
    1f58:	18c0201c 	xori	r3,r3,128
    1f5c:	18ffe004 	addi	r3,r3,-128
    1f60:	1c800126 	beq	r3,r18,1f68 <alt_find_file+0x80>
    1f64:	1800041e 	bne	r3,zero,1f78 <alt_find_file+0x90>
        !memcmp (next->name, name, len))
    1f68:	8809883a 	mov	r4,r17
    1f6c:	980b883a 	mov	r5,r19
    1f70:	00021300 	call	2130 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1f74:	10000626 	beq	r2,zero,1f90 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1f78:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1f7c:	853fea1e 	bne	r16,r20,1f28 <__alt_mem_Flash_flash_data+0xf4001f28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    1f80:	0005883a 	mov	r2,zero
    1f84:	00000306 	br	1f94 <alt_find_file+0xac>
    1f88:	0005883a 	mov	r2,zero
    1f8c:	00000106 	br	1f94 <alt_find_file+0xac>
    1f90:	8005883a 	mov	r2,r16
}
    1f94:	dfc00517 	ldw	ra,20(sp)
    1f98:	dd000417 	ldw	r20,16(sp)
    1f9c:	dcc00317 	ldw	r19,12(sp)
    1fa0:	dc800217 	ldw	r18,8(sp)
    1fa4:	dc400117 	ldw	r17,4(sp)
    1fa8:	dc000017 	ldw	r16,0(sp)
    1fac:	dec00604 	addi	sp,sp,24
    1fb0:	f800283a 	ret

00001fb4 <alt_get_fd>:
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    1fb4:	00800034 	movhi	r2,0
    1fb8:	108ee104 	addi	r2,r2,15236
    1fbc:	10800017 	ldw	r2,0(r2)
    1fc0:	10000726 	beq	r2,zero,1fe0 <alt_get_fd+0x2c>
    1fc4:	00c00034 	movhi	r3,0
    1fc8:	18cee404 	addi	r3,r3,15248
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1fcc:	00800044 	movi	r2,1
    1fd0:	01800804 	movi	r6,32
  {
    if (!alt_fd_list[i].dev)
    1fd4:	19400017 	ldw	r5,0(r3)
    1fd8:	28000f1e 	bne	r5,zero,2018 <alt_get_fd+0x64>
    1fdc:	00000106 	br	1fe4 <alt_get_fd+0x30>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1fe0:	0005883a 	mov	r2,zero
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    1fe4:	10c00324 	muli	r3,r2,12
    1fe8:	01400034 	movhi	r5,0
    1fec:	294ee104 	addi	r5,r5,15236
    1ff0:	28c7883a 	add	r3,r5,r3
    1ff4:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
    1ff8:	00c00034 	movhi	r3,0
    1ffc:	18d05404 	addi	r3,r3,16720
    2000:	18c00017 	ldw	r3,0(r3)
    2004:	1880080e 	bge	r3,r2,2028 <alt_get_fd+0x74>
      {
        alt_max_fd = i;
    2008:	00c00034 	movhi	r3,0
    200c:	18d05404 	addi	r3,r3,16720
    2010:	18800015 	stw	r2,0(r3)
      }
      rc = i;
      goto alt_get_fd_exit;
    2014:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2018:	10800044 	addi	r2,r2,1
    201c:	18c00304 	addi	r3,r3,12
    2020:	11bfec1e 	bne	r2,r6,1fd4 <__alt_mem_Flash_flash_data+0xf4001fd4>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    2024:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    2028:	f800283a 	ret

0000202c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    202c:	00840004 	movi	r2,4096
    2030:	1140012e 	bgeu	r2,r5,2038 <alt_icache_flush+0xc>
    2034:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    2038:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    203c:	21400b2e 	bgeu	r4,r5,206c <alt_icache_flush+0x40>
    2040:	2005883a 	mov	r2,r4
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2044:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2048:	10800804 	addi	r2,r2,32
    204c:	117ffd36 	bltu	r2,r5,2044 <__alt_mem_Flash_flash_data+0xf4002044>
    2050:	0104303a 	nor	r2,zero,r4
    2054:	2885883a 	add	r2,r5,r2
    2058:	1004d17a 	srli	r2,r2,5
    205c:	10800044 	addi	r2,r2,1
    2060:	1004917a 	slli	r2,r2,5
    2064:	2085883a 	add	r2,r4,r2
    2068:	00000106 	br	2070 <alt_icache_flush+0x44>
    206c:	2005883a 	mov	r2,r4
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2070:	210007cc 	andi	r4,r4,31
    2074:	20000126 	beq	r4,zero,207c <alt_icache_flush+0x50>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2078:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    207c:	0000203a 	flushp
    2080:	f800283a 	ret

00002084 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    2084:	213ffe84 	addi	r4,r4,-6
    2088:	008003c4 	movi	r2,15
    208c:	11001636 	bltu	r2,r4,20e8 <alt_exception_cause_generated_bad_addr+0x64>
    2090:	200890ba 	slli	r4,r4,2
    2094:	00800034 	movhi	r2,0
    2098:	10882a04 	addi	r2,r2,8360
    209c:	2089883a 	add	r4,r4,r2
    20a0:	20800017 	ldw	r2,0(r4)
    20a4:	1000683a 	jmp	r2
    20a8:	000020f0 	cmpltui	zero,zero,131
    20ac:	000020f0 	cmpltui	zero,zero,131
    20b0:	000020e8 	cmpgeui	zero,zero,131
    20b4:	000020e8 	cmpgeui	zero,zero,131
    20b8:	000020e8 	cmpgeui	zero,zero,131
    20bc:	000020f0 	cmpltui	zero,zero,131
    20c0:	000020e8 	cmpgeui	zero,zero,131
    20c4:	000020e8 	cmpgeui	zero,zero,131
    20c8:	000020f0 	cmpltui	zero,zero,131
    20cc:	000020f0 	cmpltui	zero,zero,131
    20d0:	000020e8 	cmpgeui	zero,zero,131
    20d4:	000020f0 	cmpltui	zero,zero,131
    20d8:	000020e8 	cmpgeui	zero,zero,131
    20dc:	000020e8 	cmpgeui	zero,zero,131
    20e0:	000020e8 	cmpgeui	zero,zero,131
    20e4:	000020f0 	cmpltui	zero,zero,131
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    20e8:	0005883a 	mov	r2,zero
    20ec:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    20f0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    20f4:	f800283a 	ret

000020f8 <exit>:
    20f8:	defffe04 	addi	sp,sp,-8
    20fc:	000b883a 	mov	r5,zero
    2100:	dc000015 	stw	r16,0(sp)
    2104:	dfc00115 	stw	ra,4(sp)
    2108:	2021883a 	mov	r16,r4
    210c:	00024200 	call	2420 <__call_exitprocs>
    2110:	00800034 	movhi	r2,0
    2114:	10905d04 	addi	r2,r2,16756
    2118:	11000017 	ldw	r4,0(r2)
    211c:	20800f17 	ldw	r2,60(r4)
    2120:	10000126 	beq	r2,zero,2128 <exit+0x30>
    2124:	103ee83a 	callr	r2
    2128:	8009883a 	mov	r4,r16
    212c:	00025b40 	call	25b4 <_exit>

00002130 <memcmp>:
    2130:	01c000c4 	movi	r7,3
    2134:	3980192e 	bgeu	r7,r6,219c <memcmp+0x6c>
    2138:	2144b03a 	or	r2,r4,r5
    213c:	11c4703a 	and	r2,r2,r7
    2140:	10000f26 	beq	r2,zero,2180 <memcmp+0x50>
    2144:	20800003 	ldbu	r2,0(r4)
    2148:	28c00003 	ldbu	r3,0(r5)
    214c:	10c0151e 	bne	r2,r3,21a4 <memcmp+0x74>
    2150:	31bfff84 	addi	r6,r6,-2
    2154:	01ffffc4 	movi	r7,-1
    2158:	00000406 	br	216c <memcmp+0x3c>
    215c:	20800003 	ldbu	r2,0(r4)
    2160:	28c00003 	ldbu	r3,0(r5)
    2164:	31bfffc4 	addi	r6,r6,-1
    2168:	10c00e1e 	bne	r2,r3,21a4 <memcmp+0x74>
    216c:	21000044 	addi	r4,r4,1
    2170:	29400044 	addi	r5,r5,1
    2174:	31fff91e 	bne	r6,r7,215c <__alt_mem_Flash_flash_data+0xf400215c>
    2178:	0005883a 	mov	r2,zero
    217c:	f800283a 	ret
    2180:	20c00017 	ldw	r3,0(r4)
    2184:	28800017 	ldw	r2,0(r5)
    2188:	1880041e 	bne	r3,r2,219c <memcmp+0x6c>
    218c:	31bfff04 	addi	r6,r6,-4
    2190:	21000104 	addi	r4,r4,4
    2194:	29400104 	addi	r5,r5,4
    2198:	39bff936 	bltu	r7,r6,2180 <__alt_mem_Flash_flash_data+0xf4002180>
    219c:	303fe91e 	bne	r6,zero,2144 <__alt_mem_Flash_flash_data+0xf4002144>
    21a0:	003ff506 	br	2178 <__alt_mem_Flash_flash_data+0xf4002178>
    21a4:	10c5c83a 	sub	r2,r2,r3
    21a8:	f800283a 	ret

000021ac <memcpy>:
    21ac:	deffff04 	addi	sp,sp,-4
    21b0:	dc000015 	stw	r16,0(sp)
    21b4:	00c003c4 	movi	r3,15
    21b8:	2005883a 	mov	r2,r4
    21bc:	1980432e 	bgeu	r3,r6,22cc <memcpy+0x120>
    21c0:	2146b03a 	or	r3,r4,r5
    21c4:	18c000cc 	andi	r3,r3,3
    21c8:	1800421e 	bne	r3,zero,22d4 <memcpy+0x128>
    21cc:	343ffc04 	addi	r16,r6,-16
    21d0:	8020d13a 	srli	r16,r16,4
    21d4:	28c00104 	addi	r3,r5,4
    21d8:	23400104 	addi	r13,r4,4
    21dc:	801e913a 	slli	r15,r16,4
    21e0:	2b000204 	addi	r12,r5,8
    21e4:	22c00204 	addi	r11,r4,8
    21e8:	7bc00504 	addi	r15,r15,20
    21ec:	2a800304 	addi	r10,r5,12
    21f0:	22400304 	addi	r9,r4,12
    21f4:	2bdf883a 	add	r15,r5,r15
    21f8:	2811883a 	mov	r8,r5
    21fc:	200f883a 	mov	r7,r4
    2200:	41000017 	ldw	r4,0(r8)
    2204:	39c00404 	addi	r7,r7,16
    2208:	18c00404 	addi	r3,r3,16
    220c:	393ffc15 	stw	r4,-16(r7)
    2210:	1bbffc17 	ldw	r14,-16(r3)
    2214:	6b400404 	addi	r13,r13,16
    2218:	5ac00404 	addi	r11,r11,16
    221c:	6bbffc15 	stw	r14,-16(r13)
    2220:	63800017 	ldw	r14,0(r12)
    2224:	4a400404 	addi	r9,r9,16
    2228:	42000404 	addi	r8,r8,16
    222c:	5bbffc15 	stw	r14,-16(r11)
    2230:	53800017 	ldw	r14,0(r10)
    2234:	63000404 	addi	r12,r12,16
    2238:	52800404 	addi	r10,r10,16
    223c:	4bbffc15 	stw	r14,-16(r9)
    2240:	1bffef1e 	bne	r3,r15,2200 <__alt_mem_Flash_flash_data+0xf4002200>
    2244:	81c00044 	addi	r7,r16,1
    2248:	380e913a 	slli	r7,r7,4
    224c:	310003cc 	andi	r4,r6,15
    2250:	02c000c4 	movi	r11,3
    2254:	11c7883a 	add	r3,r2,r7
    2258:	29cb883a 	add	r5,r5,r7
    225c:	59001f2e 	bgeu	r11,r4,22dc <memcpy+0x130>
    2260:	1813883a 	mov	r9,r3
    2264:	2811883a 	mov	r8,r5
    2268:	200f883a 	mov	r7,r4
    226c:	42800017 	ldw	r10,0(r8)
    2270:	4a400104 	addi	r9,r9,4
    2274:	39ffff04 	addi	r7,r7,-4
    2278:	4abfff15 	stw	r10,-4(r9)
    227c:	42000104 	addi	r8,r8,4
    2280:	59fffa36 	bltu	r11,r7,226c <__alt_mem_Flash_flash_data+0xf400226c>
    2284:	213fff04 	addi	r4,r4,-4
    2288:	2008d0ba 	srli	r4,r4,2
    228c:	318000cc 	andi	r6,r6,3
    2290:	21000044 	addi	r4,r4,1
    2294:	2109883a 	add	r4,r4,r4
    2298:	2109883a 	add	r4,r4,r4
    229c:	1907883a 	add	r3,r3,r4
    22a0:	290b883a 	add	r5,r5,r4
    22a4:	30000626 	beq	r6,zero,22c0 <memcpy+0x114>
    22a8:	198d883a 	add	r6,r3,r6
    22ac:	29c00003 	ldbu	r7,0(r5)
    22b0:	18c00044 	addi	r3,r3,1
    22b4:	29400044 	addi	r5,r5,1
    22b8:	19ffffc5 	stb	r7,-1(r3)
    22bc:	19bffb1e 	bne	r3,r6,22ac <__alt_mem_Flash_flash_data+0xf40022ac>
    22c0:	dc000017 	ldw	r16,0(sp)
    22c4:	dec00104 	addi	sp,sp,4
    22c8:	f800283a 	ret
    22cc:	2007883a 	mov	r3,r4
    22d0:	003ff406 	br	22a4 <__alt_mem_Flash_flash_data+0xf40022a4>
    22d4:	2007883a 	mov	r3,r4
    22d8:	003ff306 	br	22a8 <__alt_mem_Flash_flash_data+0xf40022a8>
    22dc:	200d883a 	mov	r6,r4
    22e0:	003ff006 	br	22a4 <__alt_mem_Flash_flash_data+0xf40022a4>

000022e4 <strcmp>:
    22e4:	2144b03a 	or	r2,r4,r5
    22e8:	108000cc 	andi	r2,r2,3
    22ec:	1000171e 	bne	r2,zero,234c <strcmp+0x68>
    22f0:	20800017 	ldw	r2,0(r4)
    22f4:	28c00017 	ldw	r3,0(r5)
    22f8:	10c0141e 	bne	r2,r3,234c <strcmp+0x68>
    22fc:	027fbff4 	movhi	r9,65279
    2300:	4a7fbfc4 	addi	r9,r9,-257
    2304:	0086303a 	nor	r3,zero,r2
    2308:	02202074 	movhi	r8,32897
    230c:	1245883a 	add	r2,r2,r9
    2310:	42202004 	addi	r8,r8,-32640
    2314:	10c4703a 	and	r2,r2,r3
    2318:	1204703a 	and	r2,r2,r8
    231c:	10000226 	beq	r2,zero,2328 <strcmp+0x44>
    2320:	00001706 	br	2380 <strcmp+0x9c>
    2324:	1000161e 	bne	r2,zero,2380 <strcmp+0x9c>
    2328:	21000104 	addi	r4,r4,4
    232c:	20c00017 	ldw	r3,0(r4)
    2330:	29400104 	addi	r5,r5,4
    2334:	29800017 	ldw	r6,0(r5)
    2338:	1a4f883a 	add	r7,r3,r9
    233c:	00c4303a 	nor	r2,zero,r3
    2340:	3884703a 	and	r2,r7,r2
    2344:	1204703a 	and	r2,r2,r8
    2348:	19bff626 	beq	r3,r6,2324 <__alt_mem_Flash_flash_data+0xf4002324>
    234c:	20800007 	ldb	r2,0(r4)
    2350:	1000051e 	bne	r2,zero,2368 <strcmp+0x84>
    2354:	00000606 	br	2370 <strcmp+0x8c>
    2358:	21000044 	addi	r4,r4,1
    235c:	20800007 	ldb	r2,0(r4)
    2360:	29400044 	addi	r5,r5,1
    2364:	10000226 	beq	r2,zero,2370 <strcmp+0x8c>
    2368:	28c00007 	ldb	r3,0(r5)
    236c:	10fffa26 	beq	r2,r3,2358 <__alt_mem_Flash_flash_data+0xf4002358>
    2370:	20800003 	ldbu	r2,0(r4)
    2374:	28c00003 	ldbu	r3,0(r5)
    2378:	10c5c83a 	sub	r2,r2,r3
    237c:	f800283a 	ret
    2380:	0005883a 	mov	r2,zero
    2384:	f800283a 	ret

00002388 <strlen>:
    2388:	208000cc 	andi	r2,r4,3
    238c:	10002026 	beq	r2,zero,2410 <strlen+0x88>
    2390:	20800007 	ldb	r2,0(r4)
    2394:	10002026 	beq	r2,zero,2418 <strlen+0x90>
    2398:	2005883a 	mov	r2,r4
    239c:	00000206 	br	23a8 <strlen+0x20>
    23a0:	10c00007 	ldb	r3,0(r2)
    23a4:	18001826 	beq	r3,zero,2408 <strlen+0x80>
    23a8:	10800044 	addi	r2,r2,1
    23ac:	10c000cc 	andi	r3,r2,3
    23b0:	183ffb1e 	bne	r3,zero,23a0 <__alt_mem_Flash_flash_data+0xf40023a0>
    23b4:	10c00017 	ldw	r3,0(r2)
    23b8:	01ffbff4 	movhi	r7,65279
    23bc:	39ffbfc4 	addi	r7,r7,-257
    23c0:	00ca303a 	nor	r5,zero,r3
    23c4:	01a02074 	movhi	r6,32897
    23c8:	19c7883a 	add	r3,r3,r7
    23cc:	31a02004 	addi	r6,r6,-32640
    23d0:	1946703a 	and	r3,r3,r5
    23d4:	1986703a 	and	r3,r3,r6
    23d8:	1800091e 	bne	r3,zero,2400 <strlen+0x78>
    23dc:	10800104 	addi	r2,r2,4
    23e0:	10c00017 	ldw	r3,0(r2)
    23e4:	19cb883a 	add	r5,r3,r7
    23e8:	00c6303a 	nor	r3,zero,r3
    23ec:	28c6703a 	and	r3,r5,r3
    23f0:	1986703a 	and	r3,r3,r6
    23f4:	183ff926 	beq	r3,zero,23dc <__alt_mem_Flash_flash_data+0xf40023dc>
    23f8:	00000106 	br	2400 <strlen+0x78>
    23fc:	10800044 	addi	r2,r2,1
    2400:	10c00007 	ldb	r3,0(r2)
    2404:	183ffd1e 	bne	r3,zero,23fc <__alt_mem_Flash_flash_data+0xf40023fc>
    2408:	1105c83a 	sub	r2,r2,r4
    240c:	f800283a 	ret
    2410:	2005883a 	mov	r2,r4
    2414:	003fe706 	br	23b4 <__alt_mem_Flash_flash_data+0xf40023b4>
    2418:	0005883a 	mov	r2,zero
    241c:	f800283a 	ret

00002420 <__call_exitprocs>:
    2420:	00800034 	movhi	r2,0
    2424:	10905d04 	addi	r2,r2,16756
    2428:	10800017 	ldw	r2,0(r2)
    242c:	defff404 	addi	sp,sp,-48
    2430:	dd800815 	stw	r22,32(sp)
    2434:	d8800015 	stw	r2,0(sp)
    2438:	10805204 	addi	r2,r2,328
    243c:	dd000615 	stw	r20,24(sp)
    2440:	dc800415 	stw	r18,16(sp)
    2444:	dfc00b15 	stw	ra,44(sp)
    2448:	df000a15 	stw	fp,40(sp)
    244c:	ddc00915 	stw	r23,36(sp)
    2450:	dd400715 	stw	r21,28(sp)
    2454:	dcc00515 	stw	r19,20(sp)
    2458:	dc400315 	stw	r17,12(sp)
    245c:	dc000215 	stw	r16,8(sp)
    2460:	2025883a 	mov	r18,r4
    2464:	2829883a 	mov	r20,r5
    2468:	d8800115 	stw	r2,4(sp)
    246c:	05bfffc4 	movi	r22,-1
    2470:	d8800017 	ldw	r2,0(sp)
    2474:	14c05217 	ldw	r19,328(r2)
    2478:	98001d26 	beq	r19,zero,24f0 <__call_exitprocs+0xd0>
    247c:	dd400117 	ldw	r21,4(sp)
    2480:	98800117 	ldw	r2,4(r19)
    2484:	173fffc4 	addi	fp,r2,-1
    2488:	e0000d16 	blt	fp,zero,24c0 <__call_exitprocs+0xa0>
    248c:	14000044 	addi	r16,r2,1
    2490:	8421883a 	add	r16,r16,r16
    2494:	8421883a 	add	r16,r16,r16
    2498:	84402004 	addi	r17,r16,128
    249c:	9c63883a 	add	r17,r19,r17
    24a0:	9c21883a 	add	r16,r19,r16
    24a4:	a0001e26 	beq	r20,zero,2520 <__call_exitprocs+0x100>
    24a8:	80804017 	ldw	r2,256(r16)
    24ac:	15001c26 	beq	r2,r20,2520 <__call_exitprocs+0x100>
    24b0:	e73fffc4 	addi	fp,fp,-1
    24b4:	843fff04 	addi	r16,r16,-4
    24b8:	8c7fff04 	addi	r17,r17,-4
    24bc:	e5bff91e 	bne	fp,r22,24a4 <__alt_mem_Flash_flash_data+0xf40024a4>
    24c0:	00800034 	movhi	r2,0
    24c4:	10800004 	addi	r2,r2,0
    24c8:	10000926 	beq	r2,zero,24f0 <__call_exitprocs+0xd0>
    24cc:	98800117 	ldw	r2,4(r19)
    24d0:	1000311e 	bne	r2,zero,2598 <__call_exitprocs+0x178>
    24d4:	98800017 	ldw	r2,0(r19)
    24d8:	10003426 	beq	r2,zero,25ac <__call_exitprocs+0x18c>
    24dc:	9809883a 	mov	r4,r19
    24e0:	a8800015 	stw	r2,0(r21)
    24e4:	00000000 	call	0 <__alt_mem_SDRAM>
    24e8:	acc00017 	ldw	r19,0(r21)
    24ec:	983fe41e 	bne	r19,zero,2480 <__alt_mem_Flash_flash_data+0xf4002480>
    24f0:	dfc00b17 	ldw	ra,44(sp)
    24f4:	df000a17 	ldw	fp,40(sp)
    24f8:	ddc00917 	ldw	r23,36(sp)
    24fc:	dd800817 	ldw	r22,32(sp)
    2500:	dd400717 	ldw	r21,28(sp)
    2504:	dd000617 	ldw	r20,24(sp)
    2508:	dcc00517 	ldw	r19,20(sp)
    250c:	dc800417 	ldw	r18,16(sp)
    2510:	dc400317 	ldw	r17,12(sp)
    2514:	dc000217 	ldw	r16,8(sp)
    2518:	dec00c04 	addi	sp,sp,48
    251c:	f800283a 	ret
    2520:	98800117 	ldw	r2,4(r19)
    2524:	80c00017 	ldw	r3,0(r16)
    2528:	10bfffc4 	addi	r2,r2,-1
    252c:	17001526 	beq	r2,fp,2584 <__call_exitprocs+0x164>
    2530:	80000015 	stw	zero,0(r16)
    2534:	183fde26 	beq	r3,zero,24b0 <__alt_mem_Flash_flash_data+0xf40024b0>
    2538:	00800044 	movi	r2,1
    253c:	1708983a 	sll	r4,r2,fp
    2540:	98806217 	ldw	r2,392(r19)
    2544:	9dc00117 	ldw	r23,4(r19)
    2548:	2084703a 	and	r2,r4,r2
    254c:	1000061e 	bne	r2,zero,2568 <__call_exitprocs+0x148>
    2550:	183ee83a 	callr	r3
    2554:	98800117 	ldw	r2,4(r19)
    2558:	15ffc51e 	bne	r2,r23,2470 <__alt_mem_Flash_flash_data+0xf4002470>
    255c:	a8800017 	ldw	r2,0(r21)
    2560:	14ffd326 	beq	r2,r19,24b0 <__alt_mem_Flash_flash_data+0xf40024b0>
    2564:	003fc206 	br	2470 <__alt_mem_Flash_flash_data+0xf4002470>
    2568:	98806317 	ldw	r2,396(r19)
    256c:	2084703a 	and	r2,r4,r2
    2570:	1000061e 	bne	r2,zero,258c <__call_exitprocs+0x16c>
    2574:	89400017 	ldw	r5,0(r17)
    2578:	9009883a 	mov	r4,r18
    257c:	183ee83a 	callr	r3
    2580:	003ff406 	br	2554 <__alt_mem_Flash_flash_data+0xf4002554>
    2584:	9f000115 	stw	fp,4(r19)
    2588:	003fea06 	br	2534 <__alt_mem_Flash_flash_data+0xf4002534>
    258c:	89000017 	ldw	r4,0(r17)
    2590:	183ee83a 	callr	r3
    2594:	003fef06 	br	2554 <__alt_mem_Flash_flash_data+0xf4002554>
    2598:	98800017 	ldw	r2,0(r19)
    259c:	982b883a 	mov	r21,r19
    25a0:	1027883a 	mov	r19,r2
    25a4:	983fb61e 	bne	r19,zero,2480 <__alt_mem_Flash_flash_data+0xf4002480>
    25a8:	003fd106 	br	24f0 <__alt_mem_Flash_flash_data+0xf40024f0>
    25ac:	0005883a 	mov	r2,zero
    25b0:	003ffa06 	br	259c <__alt_mem_Flash_flash_data+0xf400259c>

000025b4 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    25b4:	20000226 	beq	r4,zero,25c0 <_exit+0xc>
    ALT_SIM_FAIL();
    25b8:	002af070 	cmpltui	zero,zero,43969
    25bc:	00000106 	br	25c4 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    25c0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    25c4:	003fff06 	br	25c4 <__alt_mem_Flash_flash_data+0xf40025c4>
